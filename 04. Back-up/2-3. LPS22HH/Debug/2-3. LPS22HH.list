
2-3. LPS22HH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b18  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  08007ca8  08007ca8  00017ca8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008138  08008138  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008138  08008138  00018138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008140  08008140  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008140  08008140  00018140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008144  08008144  00018144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008148  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  200001e0  08008328  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  08008328  00020310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e617  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a0a  00000000  00000000  0002e827  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dc8  00000000  00000000  00031238  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c88  00000000  00000000  00032000  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023f7a  00000000  00000000  00032c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bca5  00000000  00000000  00056c02  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9292  00000000  00000000  000628a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012bb39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046a4  00000000  00000000  0012bbb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007c90 	.word	0x08007c90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08007c90 	.word	0x08007c90

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	601a      	str	r2, [r3, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f023 0210 	bic.w	r2, r3, #16
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	431a      	orrs	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	605a      	str	r2, [r3, #4]
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b083      	sub	sp, #12
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d101      	bne.n	8000fa6 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e000      	b.n	8000fa8 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000fa6:	2300      	movs	r3, #0
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	f003 0302 	and.w	r3, r3, #2
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d101      	bne.n	8000fcc <LL_SPI_IsActiveFlag_TXE+0x18>
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e000      	b.n	8000fce <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	b2db      	uxtb	r3, r3
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	330c      	adds	r3, #12
 8001004:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	78fa      	ldrb	r2, [r7, #3]
 800100a:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800100c:	bf00      	nop
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	691a      	ldr	r2, [r3, #16]
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	4013      	ands	r3, r2
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	429a      	cmp	r2, r3
 800102e:	bf0c      	ite	eq
 8001030:	2301      	moveq	r3, #1
 8001032:	2300      	movne	r3, #0
 8001034:	b2db      	uxtb	r3, r3
}
 8001036:	4618      	mov	r0, r3
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	683a      	ldr	r2, [r7, #0]
 8001050:	619a      	str	r2, [r3, #24]
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800105e:	b480      	push	{r7}
 8001060:	b083      	sub	sp, #12
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
 8001066:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	041a      	lsls	r2, r3, #16
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	619a      	str	r2, [r3, #24]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001086:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001088:	4907      	ldr	r1, [pc, #28]	; (80010a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4313      	orrs	r3, r2
 800108e:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001092:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4013      	ands	r3, r2
 8001098:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800109a:	68fb      	ldr	r3, [r7, #12]
}
 800109c:	bf00      	nop
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	40023800 	.word	0x40023800

080010ac <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80010b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010b8:	4907      	ldr	r1, [pc, #28]	; (80010d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4313      	orrs	r3, r2
 80010be:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80010c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4013      	ands	r3, r2
 80010c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010ca:	68fb      	ldr	r3, [r7, #12]
}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	40023800 	.word	0x40023800

080010dc <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b090      	sub	sp, #64	; 0x40
 80010e0:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80010e2:	f107 0318 	add.w	r3, r7, #24
 80010e6:	2228      	movs	r2, #40	; 0x28
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f003 fd38 	bl	8004b60 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	463b      	mov	r3, r7
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	611a      	str	r2, [r3, #16]
 80010fe:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001100:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001104:	f7ff ffd2 	bl	80010ac <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001108:	2002      	movs	r0, #2
 800110a:	f7ff ffb7 	bl	800107c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800110e:	2004      	movs	r0, #4
 8001110:	f7ff ffb4 	bl	800107c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001114:	2001      	movs	r0, #1
 8001116:	f7ff ffb1 	bl	800107c <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 800111a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800111e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001120:	2302      	movs	r3, #2
 8001122:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001124:	2303      	movs	r3, #3
 8001126:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800112c:	2300      	movs	r3, #0
 800112e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001130:	2305      	movs	r3, #5
 8001132:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001134:	463b      	mov	r3, r7
 8001136:	4619      	mov	r1, r3
 8001138:	4841      	ldr	r0, [pc, #260]	; (8001240 <BNO080_GPIO_SPI_Initialization+0x164>)
 800113a:	f002 fd7c 	bl	8003c36 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800113e:	2300      	movs	r3, #0
 8001140:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001142:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001146:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001148:	2300      	movs	r3, #0
 800114a:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800114c:	2302      	movs	r3, #2
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001150:	2301      	movs	r3, #1
 8001152:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001154:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001158:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 800115a:	2318      	movs	r3, #24
 800115c:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800115e:	2300      	movs	r3, #0
 8001160:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001162:	2300      	movs	r3, #0
 8001164:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8001166:	230a      	movs	r3, #10
 8001168:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 800116a:	f107 0318 	add.w	r3, r7, #24
 800116e:	4619      	mov	r1, r3
 8001170:	4834      	ldr	r0, [pc, #208]	; (8001244 <BNO080_GPIO_SPI_Initialization+0x168>)
 8001172:	f002 ff2e 	bl	8003fd2 <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8001176:	2100      	movs	r1, #0
 8001178:	4832      	ldr	r0, [pc, #200]	; (8001244 <BNO080_GPIO_SPI_Initialization+0x168>)
 800117a:	f7ff fef5 	bl	8000f68 <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 800117e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001182:	4831      	ldr	r0, [pc, #196]	; (8001248 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001184:	f7ff ff6b 	bl	800105e <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 8001188:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800118c:	482c      	ldr	r0, [pc, #176]	; (8001240 <BNO080_GPIO_SPI_Initialization+0x164>)
 800118e:	f7ff ff66 	bl	800105e <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 8001192:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001196:	482d      	ldr	r0, [pc, #180]	; (800124c <BNO080_GPIO_SPI_Initialization+0x170>)
 8001198:	f7ff ff61 	bl	800105e <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 800119c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011a2:	2301      	movs	r3, #1
 80011a4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80011a6:	2303      	movs	r3, #3
 80011a8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 80011b2:	463b      	mov	r3, r7
 80011b4:	4619      	mov	r1, r3
 80011b6:	4822      	ldr	r0, [pc, #136]	; (8001240 <BNO080_GPIO_SPI_Initialization+0x164>)
 80011b8:	f002 fd3d 	bl	8003c36 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 80011bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011c0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011c2:	2301      	movs	r3, #1
 80011c4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80011c6:	2303      	movs	r3, #3
 80011c8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 80011d2:	463b      	mov	r3, r7
 80011d4:	4619      	mov	r1, r3
 80011d6:	481c      	ldr	r0, [pc, #112]	; (8001248 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80011d8:	f002 fd2d 	bl	8003c36 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 80011dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011e0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011e2:	2301      	movs	r3, #1
 80011e4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80011e6:	2303      	movs	r3, #3
 80011e8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 80011f2:	463b      	mov	r3, r7
 80011f4:	4619      	mov	r1, r3
 80011f6:	4815      	ldr	r0, [pc, #84]	; (800124c <BNO080_GPIO_SPI_Initialization+0x170>)
 80011f8:	f002 fd1d 	bl	8003c36 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 80011fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001200:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001202:	2300      	movs	r3, #0
 8001204:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001206:	2301      	movs	r3, #1
 8001208:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 800120a:	463b      	mov	r3, r7
 800120c:	4619      	mov	r1, r3
 800120e:	480e      	ldr	r0, [pc, #56]	; (8001248 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001210:	f002 fd11 	bl	8003c36 <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 8001214:	480b      	ldr	r0, [pc, #44]	; (8001244 <BNO080_GPIO_SPI_Initialization+0x168>)
 8001216:	f7ff fe97 	bl	8000f48 <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 800121a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800121e:	4808      	ldr	r0, [pc, #32]	; (8001240 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001220:	f7ff ff0f 	bl	8001042 <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 8001224:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001228:	4808      	ldr	r0, [pc, #32]	; (800124c <BNO080_GPIO_SPI_Initialization+0x170>)
 800122a:	f7ff ff0a 	bl	8001042 <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 800122e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001234:	f7ff ff05 	bl	8001042 <LL_GPIO_SetOutputPin>
}
 8001238:	bf00      	nop
 800123a:	3740      	adds	r7, #64	; 0x40
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40020400 	.word	0x40020400
 8001244:	40003800 	.word	0x40003800
 8001248:	40020800 	.word	0x40020800
 800124c:	40020000 	.word	0x40020000

08001250 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 8001256:	f7ff ff41 	bl	80010dc <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 800125a:	482e      	ldr	r0, [pc, #184]	; (8001314 <BNO080_Initialization+0xc4>)
 800125c:	f004 f8e4 	bl	8005428 <iprintf>
	
	CHIP_DESELECT(BNO080);
 8001260:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001264:	482c      	ldr	r0, [pc, #176]	; (8001318 <BNO080_Initialization+0xc8>)
 8001266:	f7ff feec 	bl	8001042 <LL_GPIO_SetOutputPin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 800126a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800126e:	482b      	ldr	r0, [pc, #172]	; (800131c <BNO080_Initialization+0xcc>)
 8001270:	f7ff fee7 	bl	8001042 <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 8001274:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001278:	4829      	ldr	r0, [pc, #164]	; (8001320 <BNO080_Initialization+0xd0>)
 800127a:	f7ff fef0 	bl	800105e <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 800127e:	20c8      	movs	r0, #200	; 0xc8
 8001280:	f001 fe9e 	bl	8002fc0 <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 8001284:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001288:	4825      	ldr	r0, [pc, #148]	; (8001320 <BNO080_Initialization+0xd0>)
 800128a:	f7ff feda 	bl	8001042 <LL_GPIO_SetOutputPin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 800128e:	f000 f8d7 	bl	8001440 <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 8001292:	f000 f8d5 	bl	8001440 <BNO080_waitForSPI>
	BNO080_receivePacket();
 8001296:	f000 f8f7 	bl	8001488 <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 800129a:	f000 f8d1 	bl	8001440 <BNO080_waitForSPI>
	BNO080_receivePacket();
 800129e:	f000 f8f3 	bl	8001488 <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 80012a2:	4b20      	ldr	r3, [pc, #128]	; (8001324 <BNO080_Initialization+0xd4>)
 80012a4:	22f9      	movs	r2, #249	; 0xf9
 80012a6:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 80012a8:	4b1e      	ldr	r3, [pc, #120]	; (8001324 <BNO080_Initialization+0xd4>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 80012ae:	2102      	movs	r1, #2
 80012b0:	2002      	movs	r0, #2
 80012b2:	f000 f959 	bl	8001568 <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 80012b6:	f000 f8c3 	bl	8001440 <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 80012ba:	f000 f8e5 	bl	8001488 <BNO080_receivePacket>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d11b      	bne.n	80012fc <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 80012c4:	4b18      	ldr	r3, [pc, #96]	; (8001328 <BNO080_Initialization+0xd8>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	4619      	mov	r1, r3
 80012ca:	4b17      	ldr	r3, [pc, #92]	; (8001328 <BNO080_Initialization+0xd8>)
 80012cc:	785b      	ldrb	r3, [r3, #1]
 80012ce:	461a      	mov	r2, r3
 80012d0:	4b15      	ldr	r3, [pc, #84]	; (8001328 <BNO080_Initialization+0xd8>)
 80012d2:	789b      	ldrb	r3, [r3, #2]
 80012d4:	4618      	mov	r0, r3
 80012d6:	4b14      	ldr	r3, [pc, #80]	; (8001328 <BNO080_Initialization+0xd8>)
 80012d8:	78db      	ldrb	r3, [r3, #3]
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	4603      	mov	r3, r0
 80012de:	4813      	ldr	r0, [pc, #76]	; (800132c <BNO080_Initialization+0xdc>)
 80012e0:	f004 f8a2 	bl	8005428 <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <BNO080_Initialization+0xd4>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2bf8      	cmp	r3, #248	; 0xf8
 80012ea:	d107      	bne.n	80012fc <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 80012ec:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <BNO080_Initialization+0xd4>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	4619      	mov	r1, r3
 80012f2:	480f      	ldr	r0, [pc, #60]	; (8001330 <BNO080_Initialization+0xe0>)
 80012f4:	f004 f898 	bl	8005428 <iprintf>
			return (0);
 80012f8:	2300      	movs	r3, #0
 80012fa:	e007      	b.n	800130c <BNO080_Initialization+0xbc>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 80012fc:	4b09      	ldr	r3, [pc, #36]	; (8001324 <BNO080_Initialization+0xd4>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	22f8      	movs	r2, #248	; 0xf8
 8001302:	4619      	mov	r1, r3
 8001304:	480b      	ldr	r0, [pc, #44]	; (8001334 <BNO080_Initialization+0xe4>)
 8001306:	f004 f88f 	bl	8005428 <iprintf>
	return (1); //Something went wrong
 800130a:	2301      	movs	r3, #1
}
 800130c:	4618      	mov	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	08007ca8 	.word	0x08007ca8
 8001318:	40020400 	.word	0x40020400
 800131c:	40020000 	.word	0x40020000
 8001320:	40020800 	.word	0x40020800
 8001324:	20000268 	.word	0x20000268
 8001328:	20000214 	.word	0x20000214
 800132c:	08007cbc 	.word	0x08007cbc
 8001330:	08007cd4 	.word	0x08007cd4
 8001334:	08007cf4 	.word	0x08007cf4

08001338 <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 8001342:	bf00      	nop
 8001344:	480c      	ldr	r0, [pc, #48]	; (8001378 <SPI2_SendByte+0x40>)
 8001346:	f7ff fe35 	bl	8000fb4 <LL_SPI_IsActiveFlag_TXE>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d0f9      	beq.n	8001344 <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	4619      	mov	r1, r3
 8001354:	4808      	ldr	r0, [pc, #32]	; (8001378 <SPI2_SendByte+0x40>)
 8001356:	f7ff fe4d 	bl	8000ff4 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 800135a:	bf00      	nop
 800135c:	4806      	ldr	r0, [pc, #24]	; (8001378 <SPI2_SendByte+0x40>)
 800135e:	f7ff fe16 	bl	8000f8e <LL_SPI_IsActiveFlag_RXNE>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d0f9      	beq.n	800135c <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 8001368:	4803      	ldr	r0, [pc, #12]	; (8001378 <SPI2_SendByte+0x40>)
 800136a:	f7ff fe36 	bl	8000fda <LL_SPI_ReceiveData8>
 800136e:	4603      	mov	r3, r0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40003800 	.word	0x40003800

0800137c <BNO080_enableGameRotationVector>:
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
}

//Sends the packet to enable the rotation vector
void BNO080_enableGameRotationVector(uint16_t timeBetweenReports)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_GAME_ROTATION_VECTOR, timeBetweenReports, 0);
 8001386:	88fb      	ldrh	r3, [r7, #6]
 8001388:	2200      	movs	r2, #0
 800138a:	4619      	mov	r1, r3
 800138c:	2008      	movs	r0, #8
 800138e:	f000 f805 	bl	800139c <BNO080_setFeatureCommand>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <BNO080_setFeatureCommand>:
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
 80013a8:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 80013aa:	4b24      	ldr	r3, [pc, #144]	; (800143c <BNO080_setFeatureCommand+0xa0>)
 80013ac:	22fd      	movs	r2, #253	; 0xfd
 80013ae:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 80013b0:	4a22      	ldr	r2, [pc, #136]	; (800143c <BNO080_setFeatureCommand+0xa0>)
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 80013b6:	4b21      	ldr	r3, [pc, #132]	; (800143c <BNO080_setFeatureCommand+0xa0>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 80013bc:	4b1f      	ldr	r3, [pc, #124]	; (800143c <BNO080_setFeatureCommand+0xa0>)
 80013be:	2200      	movs	r2, #0
 80013c0:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 80013c2:	4b1e      	ldr	r3, [pc, #120]	; (800143c <BNO080_setFeatureCommand+0xa0>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	4b1b      	ldr	r3, [pc, #108]	; (800143c <BNO080_setFeatureCommand+0xa0>)
 80013ce:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	0a1b      	lsrs	r3, r3, #8
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4b19      	ldr	r3, [pc, #100]	; (800143c <BNO080_setFeatureCommand+0xa0>)
 80013d8:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	0c1b      	lsrs	r3, r3, #16
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	4b16      	ldr	r3, [pc, #88]	; (800143c <BNO080_setFeatureCommand+0xa0>)
 80013e2:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	0e1b      	lsrs	r3, r3, #24
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4b14      	ldr	r3, [pc, #80]	; (800143c <BNO080_setFeatureCommand+0xa0>)
 80013ec:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 80013ee:	4b13      	ldr	r3, [pc, #76]	; (800143c <BNO080_setFeatureCommand+0xa0>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <BNO080_setFeatureCommand+0xa0>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <BNO080_setFeatureCommand+0xa0>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8001400:	4b0e      	ldr	r3, [pc, #56]	; (800143c <BNO080_setFeatureCommand+0xa0>)
 8001402:	2200      	movs	r2, #0
 8001404:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	b2da      	uxtb	r2, r3
 800140a:	4b0c      	ldr	r3, [pc, #48]	; (800143c <BNO080_setFeatureCommand+0xa0>)
 800140c:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	0a1b      	lsrs	r3, r3, #8
 8001412:	b2da      	uxtb	r2, r3
 8001414:	4b09      	ldr	r3, [pc, #36]	; (800143c <BNO080_setFeatureCommand+0xa0>)
 8001416:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	0c1b      	lsrs	r3, r3, #16
 800141c:	b2da      	uxtb	r2, r3
 800141e:	4b07      	ldr	r3, [pc, #28]	; (800143c <BNO080_setFeatureCommand+0xa0>)
 8001420:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	0e1b      	lsrs	r3, r3, #24
 8001426:	b2da      	uxtb	r2, r3
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <BNO080_setFeatureCommand+0xa0>)
 800142a:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 800142c:	2111      	movs	r1, #17
 800142e:	2002      	movs	r0, #2
 8001430:	f000 f89a 	bl	8001568 <BNO080_sendPacket>
}
 8001434:	bf00      	nop
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000268 	.word	0x20000268

08001440 <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	e00c      	b.n	8001466 <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 800144c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001450:	480b      	ldr	r0, [pc, #44]	; (8001480 <BNO080_waitForSPI+0x40>)
 8001452:	f7ff fde1 	bl	8001018 <LL_GPIO_IsInputPinSet>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d101      	bne.n	8001460 <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 800145c:	2301      	movs	r3, #1
 800145e:	e00a      	b.n	8001476 <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3301      	adds	r3, #1
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800146c:	d1ee      	bne.n	800144c <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 800146e:	4805      	ldr	r0, [pc, #20]	; (8001484 <BNO080_waitForSPI+0x44>)
 8001470:	f004 f84e 	bl	8005510 <puts>
	return (0);
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40020800 	.word	0x40020800
 8001484:	08007d40 	.word	0x08007d40

08001488 <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 800148e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001492:	4831      	ldr	r0, [pc, #196]	; (8001558 <BNO080_receivePacket+0xd0>)
 8001494:	f7ff fdc0 	bl	8001018 <LL_GPIO_IsInputPinSet>
 8001498:	4603      	mov	r3, r0
 800149a:	2b01      	cmp	r3, #1
 800149c:	d101      	bne.n	80014a2 <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 800149e:	2300      	movs	r3, #0
 80014a0:	e056      	b.n	8001550 <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 80014a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014a6:	482d      	ldr	r0, [pc, #180]	; (800155c <BNO080_receivePacket+0xd4>)
 80014a8:	f7ff fdd9 	bl	800105e <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 80014ac:	2000      	movs	r0, #0
 80014ae:	f7ff ff43 	bl	8001338 <SPI2_SendByte>
 80014b2:	4603      	mov	r3, r0
 80014b4:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 80014b6:	2000      	movs	r0, #0
 80014b8:	f7ff ff3e 	bl	8001338 <SPI2_SendByte>
 80014bc:	4603      	mov	r3, r0
 80014be:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 80014c0:	2000      	movs	r0, #0
 80014c2:	f7ff ff39 	bl	8001338 <SPI2_SendByte>
 80014c6:	4603      	mov	r3, r0
 80014c8:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 80014ca:	2000      	movs	r0, #0
 80014cc:	f7ff ff34 	bl	8001338 <SPI2_SendByte>
 80014d0:	4603      	mov	r3, r0
 80014d2:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 80014d4:	4a22      	ldr	r2, [pc, #136]	; (8001560 <BNO080_receivePacket+0xd8>)
 80014d6:	7b7b      	ldrb	r3, [r7, #13]
 80014d8:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 80014da:	4a21      	ldr	r2, [pc, #132]	; (8001560 <BNO080_receivePacket+0xd8>)
 80014dc:	7b3b      	ldrb	r3, [r7, #12]
 80014de:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 80014e0:	4a1f      	ldr	r2, [pc, #124]	; (8001560 <BNO080_receivePacket+0xd8>)
 80014e2:	7afb      	ldrb	r3, [r7, #11]
 80014e4:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 80014e6:	4a1e      	ldr	r2, [pc, #120]	; (8001560 <BNO080_receivePacket+0xd8>)
 80014e8:	7abb      	ldrb	r3, [r7, #10]
 80014ea:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 80014ec:	7b3b      	ldrb	r3, [r7, #12]
 80014ee:	021b      	lsls	r3, r3, #8
 80014f0:	b21a      	sxth	r2, r3
 80014f2:	7b7b      	ldrb	r3, [r7, #13]
 80014f4:	b21b      	sxth	r3, r3
 80014f6:	4313      	orrs	r3, r2
 80014f8:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 80014fa:	893b      	ldrh	r3, [r7, #8]
 80014fc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001500:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8001502:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 800150a:	2300      	movs	r3, #0
 800150c:	e020      	b.n	8001550 <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 800150e:	893b      	ldrh	r3, [r7, #8]
 8001510:	3b04      	subs	r3, #4
 8001512:	b29b      	uxth	r3, r3
 8001514:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001516:	2300      	movs	r3, #0
 8001518:	81fb      	strh	r3, [r7, #14]
 800151a:	e00e      	b.n	800153a <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 800151c:	20ff      	movs	r0, #255	; 0xff
 800151e:	f7ff ff0b 	bl	8001338 <SPI2_SendByte>
 8001522:	4603      	mov	r3, r0
 8001524:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 8001526:	89fb      	ldrh	r3, [r7, #14]
 8001528:	2b7f      	cmp	r3, #127	; 0x7f
 800152a:	d803      	bhi.n	8001534 <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 800152c:	89fb      	ldrh	r3, [r7, #14]
 800152e:	490d      	ldr	r1, [pc, #52]	; (8001564 <BNO080_receivePacket+0xdc>)
 8001530:	79fa      	ldrb	r2, [r7, #7]
 8001532:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001534:	89fb      	ldrh	r3, [r7, #14]
 8001536:	3301      	adds	r3, #1
 8001538:	81fb      	strh	r3, [r7, #14]
 800153a:	89fa      	ldrh	r2, [r7, #14]
 800153c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001540:	429a      	cmp	r2, r3
 8001542:	dbeb      	blt.n	800151c <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 8001544:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001548:	4804      	ldr	r0, [pc, #16]	; (800155c <BNO080_receivePacket+0xd4>)
 800154a:	f7ff fd7a 	bl	8001042 <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 800154e:	2301      	movs	r3, #1
}
 8001550:	4618      	mov	r0, r3
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40020800 	.word	0x40020800
 800155c:	40020400 	.word	0x40020400
 8001560:	20000214 	.word	0x20000214
 8001564:	20000268 	.word	0x20000268

08001568 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	460a      	mov	r2, r1
 8001572:	71fb      	strb	r3, [r7, #7]
 8001574:	4613      	mov	r3, r2
 8001576:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8001578:	79bb      	ldrb	r3, [r7, #6]
 800157a:	3304      	adds	r3, #4
 800157c:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 800157e:	f7ff ff5f 	bl	8001440 <BNO080_waitForSPI>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 8001588:	2300      	movs	r3, #0
 800158a:	e032      	b.n	80015f2 <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 800158c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001590:	481a      	ldr	r0, [pc, #104]	; (80015fc <BNO080_sendPacket+0x94>)
 8001592:	f7ff fd64 	bl	800105e <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 8001596:	7bbb      	ldrb	r3, [r7, #14]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff fecd 	bl	8001338 <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 800159e:	7bbb      	ldrb	r3, [r7, #14]
 80015a0:	121b      	asrs	r3, r3, #8
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff fec7 	bl	8001338 <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff fec3 	bl	8001338 <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	4a12      	ldr	r2, [pc, #72]	; (8001600 <BNO080_sendPacket+0x98>)
 80015b6:	5cd2      	ldrb	r2, [r2, r3]
 80015b8:	1c51      	adds	r1, r2, #1
 80015ba:	b2c8      	uxtb	r0, r1
 80015bc:	4910      	ldr	r1, [pc, #64]	; (8001600 <BNO080_sendPacket+0x98>)
 80015be:	54c8      	strb	r0, [r1, r3]
 80015c0:	4610      	mov	r0, r2
 80015c2:	f7ff feb9 	bl	8001338 <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 80015c6:	2300      	movs	r3, #0
 80015c8:	73fb      	strb	r3, [r7, #15]
 80015ca:	e008      	b.n	80015de <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
 80015ce:	4a0d      	ldr	r2, [pc, #52]	; (8001604 <BNO080_sendPacket+0x9c>)
 80015d0:	5cd3      	ldrb	r3, [r2, r3]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff feb0 	bl	8001338 <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
 80015da:	3301      	adds	r3, #1
 80015dc:	73fb      	strb	r3, [r7, #15]
 80015de:	7bfa      	ldrb	r2, [r7, #15]
 80015e0:	79bb      	ldrb	r3, [r7, #6]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d3f2      	bcc.n	80015cc <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 80015e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015ea:	4804      	ldr	r0, [pc, #16]	; (80015fc <BNO080_sendPacket+0x94>)
 80015ec:	f7ff fd29 	bl	8001042 <LL_GPIO_SetOutputPin>

	return (1);
 80015f0:	2301      	movs	r3, #1
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40020400 	.word	0x40020400
 8001600:	200001fc 	.word	0x200001fc
 8001604:	20000268 	.word	0x20000268

08001608 <LL_SPI_Enable>:
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	601a      	str	r2, [r3, #0]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <LL_SPI_SetStandard>:
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f023 0210 	bic.w	r2, r3, #16
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	431a      	orrs	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	605a      	str	r2, [r3, #4]
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <LL_SPI_IsActiveFlag_RXNE>:
{
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	2b01      	cmp	r3, #1
 8001660:	d101      	bne.n	8001666 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001662:	2301      	movs	r3, #1
 8001664:	e000      	b.n	8001668 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <LL_SPI_IsActiveFlag_TXE>:
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b02      	cmp	r3, #2
 8001686:	d101      	bne.n	800168c <LL_SPI_IsActiveFlag_TXE+0x18>
 8001688:	2301      	movs	r3, #1
 800168a:	e000      	b.n	800168e <LL_SPI_IsActiveFlag_TXE+0x1a>
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <LL_SPI_ReceiveData8>:
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	b2db      	uxtb	r3, r3
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <LL_SPI_TransmitData8>:
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	330c      	adds	r3, #12
 80016c4:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	78fa      	ldrb	r2, [r7, #3]
 80016ca:	701a      	strb	r2, [r3, #0]
}
 80016cc:	bf00      	nop
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <LL_GPIO_SetOutputPin>:
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	619a      	str	r2, [r3, #24]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <LL_GPIO_ResetOutputPin>:
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	041a      	lsls	r2, r3, #16
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	619a      	str	r2, [r3, #24]
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <LL_AHB1_GRP1_EnableClock>:
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800171c:	4b08      	ldr	r3, [pc, #32]	; (8001740 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800171e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001720:	4907      	ldr	r1, [pc, #28]	; (8001740 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4313      	orrs	r3, r2
 8001726:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001728:	4b05      	ldr	r3, [pc, #20]	; (8001740 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800172a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4013      	ands	r3, r2
 8001730:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001732:	68fb      	ldr	r3, [r7, #12]
}
 8001734:	bf00      	nop
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	40023800 	.word	0x40023800

08001744 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800174c:	4b08      	ldr	r3, [pc, #32]	; (8001770 <LL_APB2_GRP1_EnableClock+0x2c>)
 800174e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001750:	4907      	ldr	r1, [pc, #28]	; (8001770 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4313      	orrs	r3, r2
 8001756:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <LL_APB2_GRP1_EnableClock+0x2c>)
 800175a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4013      	ands	r3, r2
 8001760:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001762:	68fb      	ldr	r3, [r7, #12]
}
 8001764:	bf00      	nop
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	40023800 	.word	0x40023800

08001774 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b090      	sub	sp, #64	; 0x40
 8001778:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800177a:	f107 0318 	add.w	r3, r7, #24
 800177e:	2228      	movs	r2, #40	; 0x28
 8001780:	2100      	movs	r1, #0
 8001782:	4618      	mov	r0, r3
 8001784:	f003 f9ec 	bl	8004b60 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	463b      	mov	r3, r7
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
 8001794:	611a      	str	r2, [r3, #16]
 8001796:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001798:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800179c:	f7ff ffd2 	bl	8001744 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80017a0:	2001      	movs	r0, #1
 80017a2:	f7ff ffb7 	bl	8001714 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80017a6:	2004      	movs	r0, #4
 80017a8:	f7ff ffb4 	bl	8001714 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80017ac:	23e0      	movs	r3, #224	; 0xe0
 80017ae:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80017b0:	2302      	movs	r3, #2
 80017b2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80017b4:	2303      	movs	r3, #3
 80017b6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80017bc:	2300      	movs	r3, #0
 80017be:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80017c0:	2305      	movs	r3, #5
 80017c2:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c4:	463b      	mov	r3, r7
 80017c6:	4619      	mov	r1, r3
 80017c8:	4825      	ldr	r0, [pc, #148]	; (8001860 <ICM20602_GPIO_SPI_Initialization+0xec>)
 80017ca:	f002 fa34 	bl	8003c36 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80017d2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80017d6:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80017d8:	2300      	movs	r3, #0
 80017da:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80017dc:	2302      	movs	r3, #2
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80017e0:	2301      	movs	r3, #1
 80017e2:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80017e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 80017ea:	2310      	movs	r3, #16
 80017ec:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80017ee:	2300      	movs	r3, #0
 80017f0:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80017f2:	2300      	movs	r3, #0
 80017f4:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 80017f6:	230a      	movs	r3, #10
 80017f8:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 80017fa:	f107 0318 	add.w	r3, r7, #24
 80017fe:	4619      	mov	r1, r3
 8001800:	4818      	ldr	r0, [pc, #96]	; (8001864 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001802:	f002 fbe6 	bl	8003fd2 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8001806:	2100      	movs	r1, #0
 8001808:	4816      	ldr	r0, [pc, #88]	; (8001864 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 800180a:	f7ff ff0d 	bl	8001628 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 800180e:	2110      	movs	r1, #16
 8001810:	4815      	ldr	r0, [pc, #84]	; (8001868 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001812:	f7ff ff6f 	bl	80016f4 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 8001816:	2310      	movs	r3, #16
 8001818:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800181a:	2301      	movs	r3, #1
 800181c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800181e:	2303      	movs	r3, #3
 8001820:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 800182a:	463b      	mov	r3, r7
 800182c:	4619      	mov	r1, r3
 800182e:	480e      	ldr	r0, [pc, #56]	; (8001868 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001830:	f002 fa01 	bl	8003c36 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 8001834:	2320      	movs	r3, #32
 8001836:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001838:	2300      	movs	r3, #0
 800183a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800183c:	2301      	movs	r3, #1
 800183e:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 8001840:	463b      	mov	r3, r7
 8001842:	4619      	mov	r1, r3
 8001844:	4808      	ldr	r0, [pc, #32]	; (8001868 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001846:	f002 f9f6 	bl	8003c36 <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 800184a:	4806      	ldr	r0, [pc, #24]	; (8001864 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 800184c:	f7ff fedc 	bl	8001608 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8001850:	2110      	movs	r1, #16
 8001852:	4805      	ldr	r0, [pc, #20]	; (8001868 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001854:	f7ff ff40 	bl	80016d8 <LL_GPIO_SetOutputPin>
}
 8001858:	bf00      	nop
 800185a:	3740      	adds	r7, #64	; 0x40
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40020000 	.word	0x40020000
 8001864:	40013000 	.word	0x40013000
 8001868:	40020800 	.word	0x40020800

0800186c <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 8001876:	bf00      	nop
 8001878:	480c      	ldr	r0, [pc, #48]	; (80018ac <SPI1_SendByte+0x40>)
 800187a:	f7ff fefb 	bl	8001674 <LL_SPI_IsActiveFlag_TXE>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0f9      	beq.n	8001878 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	4619      	mov	r1, r3
 8001888:	4808      	ldr	r0, [pc, #32]	; (80018ac <SPI1_SendByte+0x40>)
 800188a:	f7ff ff13 	bl	80016b4 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 800188e:	bf00      	nop
 8001890:	4806      	ldr	r0, [pc, #24]	; (80018ac <SPI1_SendByte+0x40>)
 8001892:	f7ff fedc 	bl	800164e <LL_SPI_IsActiveFlag_RXNE>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d0f9      	beq.n	8001890 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 800189c:	4803      	ldr	r0, [pc, #12]	; (80018ac <SPI1_SendByte+0x40>)
 800189e:	f7ff fefc 	bl	800169a <LL_SPI_ReceiveData8>
 80018a2:	4603      	mov	r3, r0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40013000 	.word	0x40013000

080018b0 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 80018ba:	2110      	movs	r1, #16
 80018bc:	480b      	ldr	r0, [pc, #44]	; (80018ec <ICM20602_Readbyte+0x3c>)
 80018be:	f7ff ff19 	bl	80016f4 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff ffce 	bl	800186c <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 80018d0:	2000      	movs	r0, #0
 80018d2:	f7ff ffcb 	bl	800186c <SPI1_SendByte>
 80018d6:	4603      	mov	r3, r0
 80018d8:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 80018da:	2110      	movs	r1, #16
 80018dc:	4803      	ldr	r0, [pc, #12]	; (80018ec <ICM20602_Readbyte+0x3c>)
 80018de:	f7ff fefb 	bl	80016d8 <LL_GPIO_SetOutputPin>
	
	return val;
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40020800 	.word	0x40020800

080018f0 <ICM20602_Writebyte>:
	}
	CHIP_DESELECT(ICM20602);
}

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	460a      	mov	r2, r1
 80018fa:	71fb      	strb	r3, [r7, #7]
 80018fc:	4613      	mov	r3, r2
 80018fe:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 8001900:	2110      	movs	r1, #16
 8001902:	480b      	ldr	r0, [pc, #44]	; (8001930 <ICM20602_Writebyte+0x40>)
 8001904:	f7ff fef6 	bl	80016f4 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800190e:	b2db      	uxtb	r3, r3
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ffab 	bl	800186c <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 8001916:	79bb      	ldrb	r3, [r7, #6]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ffa7 	bl	800186c <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 800191e:	2110      	movs	r1, #16
 8001920:	4803      	ldr	r0, [pc, #12]	; (8001930 <ICM20602_Writebyte+0x40>)
 8001922:	f7ff fed9 	bl	80016d8 <LL_GPIO_SetOutputPin>
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40020800 	.word	0x40020800

08001934 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 800193a:	2300      	movs	r3, #0
 800193c:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 800193e:	f107 0308 	add.w	r3, r7, #8
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8001948:	463b      	mov	r3, r7
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 8001950:	f7ff ff10 	bl	8001774 <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 8001954:	4833      	ldr	r0, [pc, #204]	; (8001a24 <ICM20602_Initialization+0xf0>)
 8001956:	f003 fd67 	bl	8005428 <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 800195a:	2075      	movs	r0, #117	; 0x75
 800195c:	f7ff ffa8 	bl	80018b0 <ICM20602_Readbyte>
 8001960:	4603      	mov	r3, r0
 8001962:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 8001964:	7bfb      	ldrb	r3, [r7, #15]
 8001966:	2b12      	cmp	r3, #18
 8001968:	d105      	bne.n	8001976 <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 800196a:	7bfb      	ldrb	r3, [r7, #15]
 800196c:	4619      	mov	r1, r3
 800196e:	482e      	ldr	r0, [pc, #184]	; (8001a28 <ICM20602_Initialization+0xf4>)
 8001970:	f003 fd5a 	bl	8005428 <iprintf>
 8001974:	e012      	b.n	800199c <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 8001976:	7bfb      	ldrb	r3, [r7, #15]
 8001978:	2b12      	cmp	r3, #18
 800197a:	d00f      	beq.n	800199c <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 800197c:	2075      	movs	r0, #117	; 0x75
 800197e:	f7ff ff97 	bl	80018b0 <ICM20602_Readbyte>
 8001982:	4603      	mov	r3, r0
 8001984:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8001986:	7bfb      	ldrb	r3, [r7, #15]
 8001988:	2b12      	cmp	r3, #18
 800198a:	d007      	beq.n	800199c <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 800198c:	7bfb      	ldrb	r3, [r7, #15]
 800198e:	2212      	movs	r2, #18
 8001990:	4619      	mov	r1, r3
 8001992:	4826      	ldr	r0, [pc, #152]	; (8001a2c <ICM20602_Initialization+0xf8>)
 8001994:	f003 fd48 	bl	8005428 <iprintf>
			return 1; //ERROR
 8001998:	2301      	movs	r3, #1
 800199a:	e03f      	b.n	8001a1c <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 800199c:	2180      	movs	r1, #128	; 0x80
 800199e:	206b      	movs	r0, #107	; 0x6b
 80019a0:	f7ff ffa6 	bl	80018f0 <ICM20602_Writebyte>
	HAL_Delay(50);
 80019a4:	2032      	movs	r0, #50	; 0x32
 80019a6:	f001 fb0b 	bl	8002fc0 <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 80019aa:	2101      	movs	r1, #1
 80019ac:	206b      	movs	r0, #107	; 0x6b
 80019ae:	f7ff ff9f 	bl	80018f0 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 80019b2:	2032      	movs	r0, #50	; 0x32
 80019b4:	f001 fb04 	bl	8002fc0 <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 80019b8:	2138      	movs	r1, #56	; 0x38
 80019ba:	206c      	movs	r0, #108	; 0x6c
 80019bc:	f7ff ff98 	bl	80018f0 <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 80019c0:	2032      	movs	r0, #50	; 0x32
 80019c2:	f001 fafd 	bl	8002fc0 <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 80019c6:	2100      	movs	r1, #0
 80019c8:	2019      	movs	r0, #25
 80019ca:	f7ff ff91 	bl	80018f0 <ICM20602_Writebyte>
	HAL_Delay(50);
 80019ce:	2032      	movs	r0, #50	; 0x32
 80019d0:	f001 faf6 	bl	8002fc0 <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 80019d4:	2105      	movs	r1, #5
 80019d6:	201a      	movs	r0, #26
 80019d8:	f7ff ff8a 	bl	80018f0 <ICM20602_Writebyte>
	HAL_Delay(50);
 80019dc:	2032      	movs	r0, #50	; 0x32
 80019de:	f001 faef 	bl	8002fc0 <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 80019e2:	2118      	movs	r1, #24
 80019e4:	201b      	movs	r0, #27
 80019e6:	f7ff ff83 	bl	80018f0 <ICM20602_Writebyte>
	HAL_Delay(50);
 80019ea:	2032      	movs	r0, #50	; 0x32
 80019ec:	f001 fae8 	bl	8002fc0 <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 80019f0:	2118      	movs	r1, #24
 80019f2:	201c      	movs	r0, #28
 80019f4:	f7ff ff7c 	bl	80018f0 <ICM20602_Writebyte>
	HAL_Delay(50);
 80019f8:	2032      	movs	r0, #50	; 0x32
 80019fa:	f001 fae1 	bl	8002fc0 <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 80019fe:	2103      	movs	r1, #3
 8001a00:	201d      	movs	r0, #29
 8001a02:	f7ff ff75 	bl	80018f0 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001a06:	2032      	movs	r0, #50	; 0x32
 8001a08:	f001 fada 	bl	8002fc0 <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	2038      	movs	r0, #56	; 0x38
 8001a10:	f7ff ff6e 	bl	80018f0 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001a14:	2032      	movs	r0, #50	; 0x32
 8001a16:	f001 fad3 	bl	8002fc0 <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	08007d54 	.word	0x08007d54
 8001a28:	08007d6c 	.word	0x08007d6c
 8001a2c:	08007d90 	.word	0x08007d90

08001a30 <LL_SPI_Enable>:
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	601a      	str	r2, [r3, #0]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <LL_SPI_SetStandard>:
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f023 0210 	bic.w	r2, r3, #16
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	431a      	orrs	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	605a      	str	r2, [r3, #4]
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <LL_SPI_IsActiveFlag_RXNE>:
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d101      	bne.n	8001a8e <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <LL_SPI_IsActiveFlag_TXE>:
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d101      	bne.n	8001ab4 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e000      	b.n	8001ab6 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <LL_SPI_ReceiveData8>:
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	b2db      	uxtb	r3, r3
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <LL_SPI_TransmitData8>:
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	330c      	adds	r3, #12
 8001aec:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	78fa      	ldrb	r2, [r7, #3]
 8001af2:	701a      	strb	r2, [r3, #0]
}
 8001af4:	bf00      	nop
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <LL_GPIO_IsInputPinSet>:
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691a      	ldr	r2, [r3, #16]
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	4013      	ands	r3, r2
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	bf0c      	ite	eq
 8001b18:	2301      	moveq	r3, #1
 8001b1a:	2300      	movne	r3, #0
 8001b1c:	b2db      	uxtb	r3, r3
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <LL_GPIO_SetOutputPin>:
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	619a      	str	r2, [r3, #24]
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <LL_GPIO_ResetOutputPin>:
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
 8001b4e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	041a      	lsls	r2, r3, #16
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	619a      	str	r2, [r3, #24]
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <LL_AHB1_GRP1_EnableClock>:
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001b6c:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b70:	4907      	ldr	r1, [pc, #28]	; (8001b90 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001b78:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b82:	68fb      	ldr	r3, [r7, #12]
}
 8001b84:	bf00      	nop
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	40023800 	.word	0x40023800

08001b94 <LL_APB1_GRP1_EnableClock>:
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001b9c:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ba0:	4907      	ldr	r1, [pc, #28]	; (8001bc0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001ba8:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001baa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
}
 8001bb4:	bf00      	nop
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	40023800 	.word	0x40023800

08001bc4 <LPS22HH_GPIO_SPI_Initialization>:

Struct_LPS22HH LPS22HH;


void LPS22HH_GPIO_SPI_Initialization(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b090      	sub	sp, #64	; 0x40
 8001bc8:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001bca:	f107 0318 	add.w	r3, r7, #24
 8001bce:	2228      	movs	r2, #40	; 0x28
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f002 ffc4 	bl	8004b60 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	463b      	mov	r3, r7
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	605a      	str	r2, [r3, #4]
 8001be0:	609a      	str	r2, [r3, #8]
 8001be2:	60da      	str	r2, [r3, #12]
 8001be4:	611a      	str	r2, [r3, #16]
 8001be6:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8001be8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001bec:	f7ff ffd2 	bl	8001b94 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001bf0:	2002      	movs	r0, #2
 8001bf2:	f7ff ffb7 	bl	8001b64 <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8001bf6:	2338      	movs	r3, #56	; 0x38
 8001bf8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c06:	2300      	movs	r3, #0
 8001c08:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001c0a:	2306      	movs	r3, #6
 8001c0c:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c0e:	463b      	mov	r3, r7
 8001c10:	4619      	mov	r1, r3
 8001c12:	4826      	ldr	r0, [pc, #152]	; (8001cac <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001c14:	f002 f80f 	bl	8003c36 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001c1c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001c20:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001c22:	2300      	movs	r3, #0
 8001c24:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001c26:	2302      	movs	r3, #2
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001c2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c32:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8001c34:	2308      	movs	r3, #8
 8001c36:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8001c40:	230a      	movs	r3, #10
 8001c42:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(LPS22HH_SPI_CHANNEL, &SPI_InitStruct);
 8001c44:	f107 0318 	add.w	r3, r7, #24
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4819      	ldr	r0, [pc, #100]	; (8001cb0 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8001c4c:	f002 f9c1 	bl	8003fd2 <LL_SPI_Init>
	LL_SPI_SetStandard(LPS22HH_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8001c50:	2100      	movs	r1, #0
 8001c52:	4817      	ldr	r0, [pc, #92]	; (8001cb0 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8001c54:	f7ff fefc 	bl	8001a50 <LL_SPI_SetStandard>
	/**LPS22HH GPIO Control Configuration
	 * PB6  ------> LPS22HH_SPI_CS_PIN (output)
	 * PB7  ------> LPS22HH_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(LPS22HH_SPI_CS_PORT, LPS22HH_SPI_CS_PIN);
 8001c58:	2140      	movs	r1, #64	; 0x40
 8001c5a:	4814      	ldr	r0, [pc, #80]	; (8001cac <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001c5c:	f7ff ff73 	bl	8001b46 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_SPI_CS_PIN;
 8001c60:	2340      	movs	r3, #64	; 0x40
 8001c62:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c64:	2301      	movs	r3, #1
 8001c66:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c70:	2300      	movs	r3, #0
 8001c72:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_SPI_CS_PORT, &GPIO_InitStruct);
 8001c74:	463b      	mov	r3, r7
 8001c76:	4619      	mov	r1, r3
 8001c78:	480c      	ldr	r0, [pc, #48]	; (8001cac <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001c7a:	f001 ffdc 	bl	8003c36 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_INT_PIN;
 8001c7e:	2380      	movs	r3, #128	; 0x80
 8001c80:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001c82:	2300      	movs	r3, #0
 8001c84:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001c86:	2301      	movs	r3, #1
 8001c88:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_INT_PORT, &GPIO_InitStruct);
 8001c8a:	463b      	mov	r3, r7
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4807      	ldr	r0, [pc, #28]	; (8001cac <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001c90:	f001 ffd1 	bl	8003c36 <LL_GPIO_Init>
	
	LL_SPI_Enable(LPS22HH_SPI_CHANNEL);
 8001c94:	4806      	ldr	r0, [pc, #24]	; (8001cb0 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8001c96:	f7ff fecb 	bl	8001a30 <LL_SPI_Enable>
	
	CHIP_DESELECT(LPS22HH);
 8001c9a:	2140      	movs	r1, #64	; 0x40
 8001c9c:	4803      	ldr	r0, [pc, #12]	; (8001cac <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001c9e:	f7ff ff44 	bl	8001b2a <LL_GPIO_SetOutputPin>
}
 8001ca2:	bf00      	nop
 8001ca4:	3740      	adds	r7, #64	; 0x40
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40020400 	.word	0x40020400
 8001cb0:	40003c00 	.word	0x40003c00

08001cb4 <SPI3_SendByte>:


unsigned char SPI3_SendByte(unsigned char data)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(LPS22HH_SPI_CHANNEL)==RESET);
 8001cbe:	bf00      	nop
 8001cc0:	480c      	ldr	r0, [pc, #48]	; (8001cf4 <SPI3_SendByte+0x40>)
 8001cc2:	f7ff feeb 	bl	8001a9c <LL_SPI_IsActiveFlag_TXE>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0f9      	beq.n	8001cc0 <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(LPS22HH_SPI_CHANNEL, data);
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4808      	ldr	r0, [pc, #32]	; (8001cf4 <SPI3_SendByte+0x40>)
 8001cd2:	f7ff ff03 	bl	8001adc <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(LPS22HH_SPI_CHANNEL)==RESET);
 8001cd6:	bf00      	nop
 8001cd8:	4806      	ldr	r0, [pc, #24]	; (8001cf4 <SPI3_SendByte+0x40>)
 8001cda:	f7ff fecc 	bl	8001a76 <LL_SPI_IsActiveFlag_RXNE>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0f9      	beq.n	8001cd8 <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(LPS22HH_SPI_CHANNEL);
 8001ce4:	4803      	ldr	r0, [pc, #12]	; (8001cf4 <SPI3_SendByte+0x40>)
 8001ce6:	f7ff feec 	bl	8001ac2 <LL_SPI_ReceiveData8>
 8001cea:	4603      	mov	r3, r0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40003c00 	.word	0x40003c00

08001cf8 <LPS22HH_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t LPS22HH_Readbyte(uint8_t reg_addr)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(LPS22HH);
 8001d02:	2140      	movs	r1, #64	; 0x40
 8001d04:	480b      	ldr	r0, [pc, #44]	; (8001d34 <LPS22HH_Readbyte+0x3c>)
 8001d06:	f7ff ff1e 	bl	8001b46 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff ffce 	bl	8001cb4 <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY
 8001d18:	2000      	movs	r0, #0
 8001d1a:	f7ff ffcb 	bl	8001cb4 <SPI3_SendByte>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(LPS22HH);
 8001d22:	2140      	movs	r1, #64	; 0x40
 8001d24:	4803      	ldr	r0, [pc, #12]	; (8001d34 <LPS22HH_Readbyte+0x3c>)
 8001d26:	f7ff ff00 	bl	8001b2a <LL_GPIO_SetOutputPin>
	
	return val;
 8001d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40020400 	.word	0x40020400

08001d38 <LPS22HH_Readbytes>:

void LPS22HH_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8001d38:	b590      	push	{r4, r7, lr}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	603a      	str	r2, [r7, #0]
 8001d42:	71fb      	strb	r3, [r7, #7]
 8001d44:	460b      	mov	r3, r1
 8001d46:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(LPS22HH);
 8001d4c:	2140      	movs	r1, #64	; 0x40
 8001d4e:	4810      	ldr	r0, [pc, #64]	; (8001d90 <LPS22HH_Readbytes+0x58>)
 8001d50:	f7ff fef9 	bl	8001b46 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001d54:	79fb      	ldrb	r3, [r7, #7]
 8001d56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff ffa9 	bl	8001cb4 <SPI3_SendByte>
	while(i < len)
 8001d62:	e009      	b.n	8001d78 <LPS22HH_Readbytes+0x40>
	{
		data[i++] = SPI3_SendByte(0x00); //Send DUMMY
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	1c5a      	adds	r2, r3, #1
 8001d68:	60fa      	str	r2, [r7, #12]
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	18d4      	adds	r4, r2, r3
 8001d6e:	2000      	movs	r0, #0
 8001d70:	f7ff ffa0 	bl	8001cb4 <SPI3_SendByte>
 8001d74:	4603      	mov	r3, r0
 8001d76:	7023      	strb	r3, [r4, #0]
	while(i < len)
 8001d78:	79bb      	ldrb	r3, [r7, #6]
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d3f1      	bcc.n	8001d64 <LPS22HH_Readbytes+0x2c>
	}
	CHIP_DESELECT(LPS22HH);
 8001d80:	2140      	movs	r1, #64	; 0x40
 8001d82:	4803      	ldr	r0, [pc, #12]	; (8001d90 <LPS22HH_Readbytes+0x58>)
 8001d84:	f7ff fed1 	bl	8001b2a <LL_GPIO_SetOutputPin>
}
 8001d88:	bf00      	nop
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd90      	pop	{r4, r7, pc}
 8001d90:	40020400 	.word	0x40020400

08001d94 <LPS22HH_Writebyte>:

void LPS22HH_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	460a      	mov	r2, r1
 8001d9e:	71fb      	strb	r3, [r7, #7]
 8001da0:	4613      	mov	r3, r2
 8001da2:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(LPS22HH);
 8001da4:	2140      	movs	r1, #64	; 0x40
 8001da6:	480b      	ldr	r0, [pc, #44]	; (8001dd4 <LPS22HH_Writebyte+0x40>)
 8001da8:	f7ff fecd 	bl	8001b46 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff ff7d 	bl	8001cb4 <SPI3_SendByte>
	SPI3_SendByte(val); //Data
 8001dba:	79bb      	ldrb	r3, [r7, #6]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff79 	bl	8001cb4 <SPI3_SendByte>
	CHIP_DESELECT(LPS22HH);
 8001dc2:	2140      	movs	r1, #64	; 0x40
 8001dc4:	4803      	ldr	r0, [pc, #12]	; (8001dd4 <LPS22HH_Writebyte+0x40>)
 8001dc6:	f7ff feb0 	bl	8001b2a <LL_GPIO_SetOutputPin>
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40020400 	.word	0x40020400

08001dd8 <LPS22HH_Initialization>:




int LPS22HH_Initialization(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
	uint8_t temp_reg;
	uint8_t who_am_i = 0;
 8001dde:	2300      	movs	r3, #0
 8001de0:	71fb      	strb	r3, [r7, #7]
	
	LPS22HH_GPIO_SPI_Initialization();
 8001de2:	f7ff feef 	bl	8001bc4 <LPS22HH_GPIO_SPI_Initialization>
	
	printf("Checking LPS22HH...");
 8001de6:	4841      	ldr	r0, [pc, #260]	; (8001eec <LPS22HH_Initialization+0x114>)
 8001de8:	f003 fb1e 	bl	8005428 <iprintf>
	
	// check WHO_AM_I (0x0F)
	who_am_i = LPS22HH_Readbyte(0x0F); 
 8001dec:	200f      	movs	r0, #15
 8001dee:	f7ff ff83 	bl	8001cf8 <LPS22HH_Readbyte>
 8001df2:	4603      	mov	r3, r0
 8001df4:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xb3
	if( who_am_i == 0xb3)
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	2bb3      	cmp	r3, #179	; 0xb3
 8001dfa:	d105      	bne.n	8001e08 <LPS22HH_Initialization+0x30>
	{
		printf("\nLPS22HH who_am_i = 0x%02x...OK\n\n", who_am_i );
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	4619      	mov	r1, r3
 8001e00:	483b      	ldr	r0, [pc, #236]	; (8001ef0 <LPS22HH_Initialization+0x118>)
 8001e02:	f003 fb11 	bl	8005428 <iprintf>
 8001e06:	e012      	b.n	8001e2e <LPS22HH_Initialization+0x56>
	}
	// recheck
	else if( who_am_i != 0xb3)
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	2bb3      	cmp	r3, #179	; 0xb3
 8001e0c:	d00f      	beq.n	8001e2e <LPS22HH_Initialization+0x56>
	{
		who_am_i = LPS22HH_Readbyte(0x0F); // check WHO_AM_I (0x0F)
 8001e0e:	200f      	movs	r0, #15
 8001e10:	f7ff ff72 	bl	8001cf8 <LPS22HH_Readbyte>
 8001e14:	4603      	mov	r3, r0
 8001e16:	71fb      	strb	r3, [r7, #7]

		if ( who_am_i != 0xb3 ){
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	2bb3      	cmp	r3, #179	; 0xb3
 8001e1c:	d007      	beq.n	8001e2e <LPS22HH_Initialization+0x56>
			printf( "nLPS22HH Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0xb3);
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	22b3      	movs	r2, #179	; 0xb3
 8001e22:	4619      	mov	r1, r3
 8001e24:	4833      	ldr	r0, [pc, #204]	; (8001ef4 <LPS22HH_Initialization+0x11c>)
 8001e26:	f003 faff 	bl	8005428 <iprintf>
			return 1; //ERROR
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e059      	b.n	8001ee2 <LPS22HH_Initialization+0x10a>
		}
	}
	
	// Reset LPS22HH
	// CTRL_REG2 0x11
	LPS22HH_Writebyte(CTRL_REG2, 0x04);
 8001e2e:	2104      	movs	r1, #4
 8001e30:	2011      	movs	r0, #17
 8001e32:	f7ff ffaf 	bl	8001d94 <LPS22HH_Writebyte>
	//printf("LPS22HH Reset");
	do{
		//printf(".");
	}
	while((LPS22HH_Readbyte(CTRL_REG2) & 0x04) != 0x00);
 8001e36:	2011      	movs	r0, #17
 8001e38:	f7ff ff5e 	bl	8001cf8 <LPS22HH_Readbyte>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	f003 0304 	and.w	r3, r3, #4
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f7      	bne.n	8001e36 <LPS22HH_Initialization+0x5e>
	
	// Set Output Data Rate
	//0x00: One Shot
	//0x10: 1Hz	0x20: 10Hz	0x30: 25Hz	0x40: 50Hz
	//0x50: 75Hz	0x60: 100Hz	0x70: 200Hz
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001e46:	2010      	movs	r0, #16
 8001e48:	f7ff ff56 	bl	8001cf8 <LPS22HH_Readbyte>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x40;
 8001e50:	79bb      	ldrb	r3, [r7, #6]
 8001e52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e56:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8001e58:	79bb      	ldrb	r3, [r7, #6]
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	2010      	movs	r0, #16
 8001e5e:	f7ff ff99 	bl	8001d94 <LPS22HH_Writebyte>
	temp_reg = 0;
 8001e62:	2300      	movs	r3, #0
 8001e64:	71bb      	strb	r3, [r7, #6]
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001e66:	2010      	movs	r0, #16
 8001e68:	f7ff ff46 	bl	8001cf8 <LPS22HH_Readbyte>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	71bb      	strb	r3, [r7, #6]
	//printf("%x\n", temp_reg);
	
	// Enable LPF, Cut-off frequency
	//0x08: ODR/9	0x0c: ODR/20
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001e70:	2010      	movs	r0, #16
 8001e72:	f7ff ff41 	bl	8001cf8 <LPS22HH_Readbyte>
 8001e76:	4603      	mov	r3, r0
 8001e78:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x0c;
 8001e7a:	79bb      	ldrb	r3, [r7, #6]
 8001e7c:	f043 030c 	orr.w	r3, r3, #12
 8001e80:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8001e82:	79bb      	ldrb	r3, [r7, #6]
 8001e84:	4619      	mov	r1, r3
 8001e86:	2010      	movs	r0, #16
 8001e88:	f7ff ff84 	bl	8001d94 <LPS22HH_Writebyte>
	
	// Enable Block Data Update
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001e8c:	2010      	movs	r0, #16
 8001e8e:	f7ff ff33 	bl	8001cf8 <LPS22HH_Readbyte>
 8001e92:	4603      	mov	r3, r0
 8001e94:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8001e96:	79bb      	ldrb	r3, [r7, #6]
 8001e98:	f043 0302 	orr.w	r3, r3, #2
 8001e9c:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8001e9e:	79bb      	ldrb	r3, [r7, #6]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	2010      	movs	r0, #16
 8001ea4:	f7ff ff76 	bl	8001d94 <LPS22HH_Writebyte>
	
	// Enable Low Noise Mode (ODR should be lower than 100Hz. This is igonored when ODR = 100Hz or 200Hz)
	temp_reg = LPS22HH_Readbyte(CTRL_REG2);
 8001ea8:	2011      	movs	r0, #17
 8001eaa:	f7ff ff25 	bl	8001cf8 <LPS22HH_Readbyte>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8001eb2:	79bb      	ldrb	r3, [r7, #6]
 8001eb4:	f043 0302 	orr.w	r3, r3, #2
 8001eb8:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG2, temp_reg);
 8001eba:	79bb      	ldrb	r3, [r7, #6]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	2011      	movs	r0, #17
 8001ec0:	f7ff ff68 	bl	8001d94 <LPS22HH_Writebyte>
	
	// Enable Data-ready signal on INT-DRDY pin
	temp_reg = LPS22HH_Readbyte(CTRL_REG3);
 8001ec4:	2012      	movs	r0, #18
 8001ec6:	f7ff ff17 	bl	8001cf8 <LPS22HH_Readbyte>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x04;
 8001ece:	79bb      	ldrb	r3, [r7, #6]
 8001ed0:	f043 0304 	orr.w	r3, r3, #4
 8001ed4:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG3, temp_reg);
 8001ed6:	79bb      	ldrb	r3, [r7, #6]
 8001ed8:	4619      	mov	r1, r3
 8001eda:	2012      	movs	r0, #18
 8001edc:	f7ff ff5a 	bl	8001d94 <LPS22HH_Writebyte>
	
	return 0; //OK
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	08007dbc 	.word	0x08007dbc
 8001ef0:	08007dd0 	.word	0x08007dd0
 8001ef4:	08007df4 	.word	0x08007df4

08001ef8 <LPS22HH_DataReady>:


int LPS22HH_DataReady(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(LPS22HH_INT_PORT, LPS22HH_INT_PIN);
 8001efc:	2180      	movs	r1, #128	; 0x80
 8001efe:	4803      	ldr	r0, [pc, #12]	; (8001f0c <LPS22HH_DataReady+0x14>)
 8001f00:	f7ff fdfe 	bl	8001b00 <LL_GPIO_IsInputPinSet>
 8001f04:	4603      	mov	r3, r0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40020400 	.word	0x40020400

08001f10 <LPS22HH_GetPressure>:

void LPS22HH_GetPressure(int32_t* pressure)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(PRESSURE_OUT_XL, 3, (unsigned char*)pressure);
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	2103      	movs	r1, #3
 8001f1c:	2028      	movs	r0, #40	; 0x28
 8001f1e:	f7ff ff0b 	bl	8001d38 <LPS22HH_Readbytes>
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <LPS22HH_GetTemperature>:

void LPS22HH_GetTemperature(int16_t* temperature)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(TEMP_OUT_L, 2, (unsigned char*)temperature);
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	2102      	movs	r1, #2
 8001f36:	202b      	movs	r0, #43	; 0x2b
 8001f38:	f7ff fefe 	bl	8001d38 <LPS22HH_Readbytes>
}
 8001f3c:	bf00      	nop
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <getAltitude2>:
{
	return (1.0f - powf((pressure / SEA_PRESSURE), 0.1902226f)) * 44307.69396f; //145366.45f * 0.3048f = 44307.69396f;
}

float getAltitude2(float pressure, float temperature) //Get Altitude with temperature correction.
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001f4e:	edc7 0a00 	vstr	s1, [r7]
	return (1.0f - powf((pressure / SEA_PRESSURE), 0.1902226f)) * (temperature + 273.15f) / 0.0065f;
 8001f52:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f56:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001f9c <getAltitude2+0x58>
 8001f5a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001f5e:	eddf 0a10 	vldr	s1, [pc, #64]	; 8001fa0 <getAltitude2+0x5c>
 8001f62:	eeb0 0a66 	vmov.f32	s0, s13
 8001f66:	f005 f98d 	bl	8007284 <powf>
 8001f6a:	eeb0 7a40 	vmov.f32	s14, s0
 8001f6e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001f72:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001f76:	edd7 7a00 	vldr	s15, [r7]
 8001f7a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001fa4 <getAltitude2+0x60>
 8001f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f86:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001fa8 <getAltitude2+0x64>
 8001f8a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001f8e:	eef0 7a66 	vmov.f32	s15, s13
}
 8001f92:	eeb0 0a67 	vmov.f32	s0, s15
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	447d5000 	.word	0x447d5000
 8001fa0:	3e42c9b7 	.word	0x3e42c9b7
 8001fa4:	43889333 	.word	0x43889333
 8001fa8:	3bd4fdf4 	.word	0x3bd4fdf4

08001fac <LL_GPIO_ResetOutputPin>:
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	041a      	lsls	r2, r3, #16
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	619a      	str	r2, [r3, #24]
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
	...

08001fcc <LL_AHB1_GRP1_EnableClock>:
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001fd4:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001fd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fd8:	4907      	ldr	r1, [pc, #28]	; (8001ff8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001fe0:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fea:	68fb      	ldr	r3, [r7, #12]
}
 8001fec:	bf00      	nop
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	40023800 	.word	0x40023800

08001ffc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002002:	463b      	mov	r3, r7
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	611a      	str	r2, [r3, #16]
 8002010:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8002012:	2080      	movs	r0, #128	; 0x80
 8002014:	f7ff ffda 	bl	8001fcc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002018:	2004      	movs	r0, #4
 800201a:	f7ff ffd7 	bl	8001fcc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800201e:	2001      	movs	r0, #1
 8002020:	f7ff ffd4 	bl	8001fcc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002024:	2002      	movs	r0, #2
 8002026:	f7ff ffd1 	bl	8001fcc <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4 
 800202a:	f240 2117 	movw	r1, #535	; 0x217
 800202e:	482c      	ldr	r0, [pc, #176]	; (80020e0 <MX_GPIO_Init+0xe4>)
 8002030:	f7ff ffbc 	bl	8001fac <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12|LL_GPIO_PIN_6);
 8002034:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8002038:	482a      	ldr	r0, [pc, #168]	; (80020e4 <MX_GPIO_Init+0xe8>)
 800203a:	f7ff ffb7 	bl	8001fac <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 800203e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002042:	4829      	ldr	r0, [pc, #164]	; (80020e8 <MX_GPIO_Init+0xec>)
 8002044:	f7ff ffb2 	bl	8001fac <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4 
 8002048:	f240 2317 	movw	r3, #535	; 0x217
 800204c:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800204e:	2301      	movs	r3, #1
 8002050:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002052:	2300      	movs	r3, #0
 8002054:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800205a:	2300      	movs	r3, #0
 800205c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800205e:	463b      	mov	r3, r7
 8002060:	4619      	mov	r1, r3
 8002062:	481f      	ldr	r0, [pc, #124]	; (80020e0 <MX_GPIO_Init+0xe4>)
 8002064:	f001 fde7 	bl	8003c36 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_8;
 8002068:	f44f 7390 	mov.w	r3, #288	; 0x120
 800206c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800206e:	2300      	movs	r3, #0
 8002070:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002076:	463b      	mov	r3, r7
 8002078:	4619      	mov	r1, r3
 800207a:	4819      	ldr	r0, [pc, #100]	; (80020e0 <MX_GPIO_Init+0xe4>)
 800207c:	f001 fddb 	bl	8003c36 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_6;
 8002080:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8002084:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002086:	2301      	movs	r3, #1
 8002088:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800208a:	2300      	movs	r3, #0
 800208c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002096:	463b      	mov	r3, r7
 8002098:	4619      	mov	r1, r3
 800209a:	4812      	ldr	r0, [pc, #72]	; (80020e4 <MX_GPIO_Init+0xe8>)
 800209c:	f001 fdcb 	bl	8003c36 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 80020a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020a4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80020a6:	2301      	movs	r3, #1
 80020a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80020aa:	2300      	movs	r3, #0
 80020ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80020b2:	2300      	movs	r3, #0
 80020b4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b6:	463b      	mov	r3, r7
 80020b8:	4619      	mov	r1, r3
 80020ba:	480b      	ldr	r0, [pc, #44]	; (80020e8 <MX_GPIO_Init+0xec>)
 80020bc:	f001 fdbb 	bl	8003c36 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80020c0:	2380      	movs	r3, #128	; 0x80
 80020c2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80020c4:	2300      	movs	r3, #0
 80020c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80020c8:	2300      	movs	r3, #0
 80020ca:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020cc:	463b      	mov	r3, r7
 80020ce:	4619      	mov	r1, r3
 80020d0:	4804      	ldr	r0, [pc, #16]	; (80020e4 <MX_GPIO_Init+0xe8>)
 80020d2:	f001 fdb0 	bl	8003c36 <LL_GPIO_Init>

}
 80020d6:	bf00      	nop
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40020800 	.word	0x40020800
 80020e4:	40020400 	.word	0x40020400
 80020e8:	40020000 	.word	0x40020000

080020ec <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f043 0201 	orr.w	r2, r3, #1
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	601a      	str	r2, [r3, #0]
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a1a      	ldr	r2, [r3, #32]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	431a      	orrs	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	621a      	str	r2, [r3, #32]
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a1a      	ldr	r2, [r3, #32]
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	43db      	mvns	r3, r3
 8002140:	401a      	ands	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	621a      	str	r2, [r3, #32]
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	f043 0220 	orr.w	r2, r3, #32
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	60da      	str	r2, [r3, #12]
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
 800217a:	460b      	mov	r3, r1
 800217c:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800217e:	78fa      	ldrb	r2, [r7, #3]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	605a      	str	r2, [r3, #4]
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char* p, int len)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
	for(int i=0;i<len;i++)
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	e00d      	b.n	80021be <_write+0x2e>
	{
		LL_USART_TransmitData8(USART6,*(p+i));
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	68ba      	ldr	r2, [r7, #8]
 80021a6:	4413      	add	r3, r2
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	4619      	mov	r1, r3
 80021ac:	4808      	ldr	r0, [pc, #32]	; (80021d0 <_write+0x40>)
 80021ae:	f7ff ffe0 	bl	8002172 <LL_USART_TransmitData8>
		HAL_Delay(1);
 80021b2:	2001      	movs	r0, #1
 80021b4:	f000 ff04 	bl	8002fc0 <HAL_Delay>
	for(int i=0;i<len;i++)
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	3301      	adds	r3, #1
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	dbed      	blt.n	80021a2 <_write+0x12>
	}
	return len;
 80021c6:	687b      	ldr	r3, [r7, #4]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40011400 	.word	0x40011400

080021d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int count = 0;
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
	float f = 1.234;
 80021de:	4b4c      	ldr	r3, [pc, #304]	; (8002310 <main+0x13c>)
 80021e0:	613b      	str	r3, [r7, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021e2:	f000 fe7b 	bl	8002edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021e6:	f000 f8a7 	bl	8002338 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021ea:	f7ff ff07 	bl	8001ffc <MX_GPIO_Init>
  MX_TIM3_Init();
 80021ee:	f000 fc99 	bl	8002b24 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 80021f2:	f000 fde9 	bl	8002dc8 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 80021f6:	f000 f9bd 	bl	8002574 <MX_SPI2_Init>
  MX_SPI1_Init();
 80021fa:	f000 f969 	bl	80024d0 <MX_SPI1_Init>
  MX_SPI3_Init();
 80021fe:	f000 fa0d 	bl	800261c <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM3);
 8002202:	4844      	ldr	r0, [pc, #272]	; (8002314 <main+0x140>)
 8002204:	f7ff ff72 	bl	80020ec <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8002208:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800220c:	4841      	ldr	r0, [pc, #260]	; (8002314 <main+0x140>)
 800220e:	f7ff ff7d 	bl	800210c <LL_TIM_CC_EnableChannel>

  TIM3->PSC = 2000; // 2kHz
 8002212:	4b40      	ldr	r3, [pc, #256]	; (8002314 <main+0x140>)
 8002214:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002218:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 800221a:	2064      	movs	r0, #100	; 0x64
 800221c:	f000 fed0 	bl	8002fc0 <HAL_Delay>
  TIM3->PSC=1500;  // 3kHz
 8002220:	4b3c      	ldr	r3, [pc, #240]	; (8002314 <main+0x140>)
 8002222:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002226:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 8002228:	2064      	movs	r0, #100	; 0x64
 800222a:	f000 fec9 	bl	8002fc0 <HAL_Delay>
  TIM3->PSC=1000; // 4kHz
 800222e:	4b39      	ldr	r3, [pc, #228]	; (8002314 <main+0x140>)
 8002230:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002234:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 8002236:	2064      	movs	r0, #100	; 0x64
 8002238:	f000 fec2 	bl	8002fc0 <HAL_Delay>

  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800223c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002240:	4834      	ldr	r0, [pc, #208]	; (8002314 <main+0x140>)
 8002242:	f7ff ff74 	bl	800212e <LL_TIM_CC_DisableChannel>

  LL_USART_EnableIT_RXNE(USART6);
 8002246:	4834      	ldr	r0, [pc, #208]	; (8002318 <main+0x144>)
 8002248:	f7ff ff83 	bl	8002152 <LL_USART_EnableIT_RXNE>

  BNO080_Initialization();
 800224c:	f7ff f800 	bl	8001250 <BNO080_Initialization>
  BNO080_enableGameRotationVector(2500); // 400 times per sec
 8002250:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8002254:	f7ff f892 	bl	800137c <BNO080_enableGameRotationVector>

  ICM20602_Initialization();
 8002258:	f7ff fb6c 	bl	8001934 <ICM20602_Initialization>
  LPS22HH_Initialization();
 800225c:	f7ff fdbc 	bl	8001dd8 <LPS22HH_Initialization>
//		  ICM20602.gyro_z = ICM20602.gyro_z_raw = 2000.f / 32768.f;
//
//		  //printf("%d, %d, %d\n", ICM20602.gyro_x_raw, ICM20602.gyro_y_raw, ICM20602.gyro_z_raw);
//		  printf("%d, %d, %d\n", (int)(ICM20602.gyro_x*100), (int)(ICM20602.gyro_y*100), (int)(ICM20602.gyro_z*100));
//	  }
	  if(LPS22HH_DataReady() == 1)
 8002260:	f7ff fe4a 	bl	8001ef8 <LPS22HH_DataReady>
 8002264:	4603      	mov	r3, r0
 8002266:	2b01      	cmp	r3, #1
 8002268:	d1fa      	bne.n	8002260 <main+0x8c>
	  {
		  LPS22HH_GetPressure(&LPS22HH.pressure_raw);
 800226a:	482c      	ldr	r0, [pc, #176]	; (800231c <main+0x148>)
 800226c:	f7ff fe50 	bl	8001f10 <LPS22HH_GetPressure>
		  LPS22HH_GetTemperature(&LPS22HH.temperature_raw);
 8002270:	482b      	ldr	r0, [pc, #172]	; (8002320 <main+0x14c>)
 8002272:	f7ff fe5a 	bl	8001f2a <LPS22HH_GetTemperature>

		  LPS22HH.baroAlt = getAltitude2(LPS22HH.pressure_raw/4096.f, LPS22HH.temperature_raw/100.f);
 8002276:	4b29      	ldr	r3, [pc, #164]	; (800231c <main+0x148>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	ee07 3a90 	vmov	s15, r3
 800227e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002282:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002324 <main+0x150>
 8002286:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800228a:	4b24      	ldr	r3, [pc, #144]	; (800231c <main+0x148>)
 800228c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002290:	ee07 3a90 	vmov	s15, r3
 8002294:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002298:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002328 <main+0x154>
 800229c:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80022a0:	eef0 0a46 	vmov.f32	s1, s12
 80022a4:	eeb0 0a66 	vmov.f32	s0, s13
 80022a8:	f7ff fe4c 	bl	8001f44 <getAltitude2>
 80022ac:	eef0 7a40 	vmov.f32	s15, s0
 80022b0:	4b1a      	ldr	r3, [pc, #104]	; (800231c <main+0x148>)
 80022b2:	edc3 7a02 	vstr	s15, [r3, #8]
#define X 0.90f
		  LPS22HH.baroAltFilt = LPS22HH.baroAltFilt * X + LPS22HH.baroAlt * (1.0f - X);
 80022b6:	4b19      	ldr	r3, [pc, #100]	; (800231c <main+0x148>)
 80022b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80022bc:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800232c <main+0x158>
 80022c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022c4:	4b15      	ldr	r3, [pc, #84]	; (800231c <main+0x148>)
 80022c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80022ca:	eddf 6a19 	vldr	s13, [pc, #100]	; 8002330 <main+0x15c>
 80022ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80022d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022d6:	4b11      	ldr	r3, [pc, #68]	; (800231c <main+0x148>)
 80022d8:	edc3 7a03 	vstr	s15, [r3, #12]

		  printf("%d, %d\n", (int)(LPS22HH.baroAlt*100),(int)(LPS22HH.baroAltFilt*100));
 80022dc:	4b0f      	ldr	r3, [pc, #60]	; (800231c <main+0x148>)
 80022de:	edd3 7a02 	vldr	s15, [r3, #8]
 80022e2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002328 <main+0x154>
 80022e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022ea:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80022ee:	4b0b      	ldr	r3, [pc, #44]	; (800231c <main+0x148>)
 80022f0:	edd3 7a03 	vldr	s15, [r3, #12]
 80022f4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002328 <main+0x154>
 80022f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002300:	ee17 2a90 	vmov	r2, s15
 8002304:	ee16 1a90 	vmov	r1, s13
 8002308:	480a      	ldr	r0, [pc, #40]	; (8002334 <main+0x160>)
 800230a:	f003 f88d 	bl	8005428 <iprintf>
	  if(LPS22HH_DataReady() == 1)
 800230e:	e7a7      	b.n	8002260 <main+0x8c>
 8002310:	3f9df3b6 	.word	0x3f9df3b6
 8002314:	40000400 	.word	0x40000400
 8002318:	40011400 	.word	0x40011400
 800231c:	200002f8 	.word	0x200002f8
 8002320:	200002fc 	.word	0x200002fc
 8002324:	45800000 	.word	0x45800000
 8002328:	42c80000 	.word	0x42c80000
 800232c:	3f666666 	.word	0x3f666666
 8002330:	3dccccd0 	.word	0x3dccccd0
 8002334:	08007e20 	.word	0x08007e20

08002338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b094      	sub	sp, #80	; 0x50
 800233c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800233e:	f107 0320 	add.w	r3, r7, #32
 8002342:	2230      	movs	r2, #48	; 0x30
 8002344:	2100      	movs	r1, #0
 8002346:	4618      	mov	r0, r3
 8002348:	f002 fc0a 	bl	8004b60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800234c:	f107 030c 	add.w	r3, r7, #12
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	605a      	str	r2, [r3, #4]
 8002356:	609a      	str	r2, [r3, #8]
 8002358:	60da      	str	r2, [r3, #12]
 800235a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800235c:	2300      	movs	r3, #0
 800235e:	60bb      	str	r3, [r7, #8]
 8002360:	4b28      	ldr	r3, [pc, #160]	; (8002404 <SystemClock_Config+0xcc>)
 8002362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002364:	4a27      	ldr	r2, [pc, #156]	; (8002404 <SystemClock_Config+0xcc>)
 8002366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800236a:	6413      	str	r3, [r2, #64]	; 0x40
 800236c:	4b25      	ldr	r3, [pc, #148]	; (8002404 <SystemClock_Config+0xcc>)
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002378:	2300      	movs	r3, #0
 800237a:	607b      	str	r3, [r7, #4]
 800237c:	4b22      	ldr	r3, [pc, #136]	; (8002408 <SystemClock_Config+0xd0>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a21      	ldr	r2, [pc, #132]	; (8002408 <SystemClock_Config+0xd0>)
 8002382:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002386:	6013      	str	r3, [r2, #0]
 8002388:	4b1f      	ldr	r3, [pc, #124]	; (8002408 <SystemClock_Config+0xd0>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002390:	607b      	str	r3, [r7, #4]
 8002392:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002394:	2301      	movs	r3, #1
 8002396:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002398:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800239e:	2302      	movs	r3, #2
 80023a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80023a8:	2304      	movs	r3, #4
 80023aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80023ac:	23a8      	movs	r3, #168	; 0xa8
 80023ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023b0:	2302      	movs	r3, #2
 80023b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80023b4:	2304      	movs	r3, #4
 80023b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023b8:	f107 0320 	add.w	r3, r7, #32
 80023bc:	4618      	mov	r0, r3
 80023be:	f000 ff07 	bl	80031d0 <HAL_RCC_OscConfig>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80023c8:	f000 f820 	bl	800240c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023cc:	230f      	movs	r3, #15
 80023ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023d0:	2302      	movs	r3, #2
 80023d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80023dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80023de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80023e4:	f107 030c 	add.w	r3, r7, #12
 80023e8:	2105      	movs	r1, #5
 80023ea:	4618      	mov	r0, r3
 80023ec:	f001 f960 	bl	80036b0 <HAL_RCC_ClockConfig>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80023f6:	f000 f809 	bl	800240c <Error_Handler>
  }
}
 80023fa:	bf00      	nop
 80023fc:	3750      	adds	r7, #80	; 0x50
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40023800 	.word	0x40023800
 8002408:	40007000 	.word	0x40007000

0800240c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <LL_SPI_SetStandard>:
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f023 0210 	bic.w	r2, r3, #16
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	605a      	str	r2, [r3, #4]
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <LL_AHB1_GRP1_EnableClock>:
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002448:	4b08      	ldr	r3, [pc, #32]	; (800246c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800244a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800244c:	4907      	ldr	r1, [pc, #28]	; (800246c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4313      	orrs	r3, r2
 8002452:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002454:	4b05      	ldr	r3, [pc, #20]	; (800246c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002456:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4013      	ands	r3, r2
 800245c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800245e:	68fb      	ldr	r3, [r7, #12]
}
 8002460:	bf00      	nop
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	40023800 	.word	0x40023800

08002470 <LL_APB1_GRP1_EnableClock>:
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002478:	4b08      	ldr	r3, [pc, #32]	; (800249c <LL_APB1_GRP1_EnableClock+0x2c>)
 800247a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800247c:	4907      	ldr	r1, [pc, #28]	; (800249c <LL_APB1_GRP1_EnableClock+0x2c>)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4313      	orrs	r3, r2
 8002482:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002484:	4b05      	ldr	r3, [pc, #20]	; (800249c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002486:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4013      	ands	r3, r2
 800248c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800248e:	68fb      	ldr	r3, [r7, #12]
}
 8002490:	bf00      	nop
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	40023800 	.word	0x40023800

080024a0 <LL_APB2_GRP1_EnableClock>:
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80024a8:	4b08      	ldr	r3, [pc, #32]	; (80024cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80024aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024ac:	4907      	ldr	r1, [pc, #28]	; (80024cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80024b4:	4b05      	ldr	r3, [pc, #20]	; (80024cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80024b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4013      	ands	r3, r2
 80024bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024be:	68fb      	ldr	r3, [r7, #12]
}
 80024c0:	bf00      	nop
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	40023800 	.word	0x40023800

080024d0 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b090      	sub	sp, #64	; 0x40
 80024d4:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80024d6:	f107 0318 	add.w	r3, r7, #24
 80024da:	2228      	movs	r2, #40	; 0x28
 80024dc:	2100      	movs	r1, #0
 80024de:	4618      	mov	r0, r3
 80024e0:	f002 fb3e 	bl	8004b60 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e4:	463b      	mov	r3, r7
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	605a      	str	r2, [r3, #4]
 80024ec:	609a      	str	r2, [r3, #8]
 80024ee:	60da      	str	r2, [r3, #12]
 80024f0:	611a      	str	r2, [r3, #16]
 80024f2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80024f4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80024f8:	f7ff ffd2 	bl	80024a0 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80024fc:	2001      	movs	r0, #1
 80024fe:	f7ff ff9f 	bl	8002440 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration  
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002502:	23e0      	movs	r3, #224	; 0xe0
 8002504:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002506:	2302      	movs	r3, #2
 8002508:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800250a:	2303      	movs	r3, #3
 800250c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800250e:	2300      	movs	r3, #0
 8002510:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002512:	2300      	movs	r3, #0
 8002514:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002516:	2305      	movs	r3, #5
 8002518:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251a:	463b      	mov	r3, r7
 800251c:	4619      	mov	r1, r3
 800251e:	4813      	ldr	r0, [pc, #76]	; (800256c <MX_SPI1_Init+0x9c>)
 8002520:	f001 fb89 	bl	8003c36 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002524:	2300      	movs	r3, #0
 8002526:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002528:	f44f 7382 	mov.w	r3, #260	; 0x104
 800252c:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800252e:	2300      	movs	r3, #0
 8002530:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002532:	2302      	movs	r3, #2
 8002534:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002536:	2301      	movs	r3, #1
 8002538:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800253a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800253e:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8002540:	2310      	movs	r3, #16
 8002542:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002544:	2300      	movs	r3, #0
 8002546:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002548:	2300      	movs	r3, #0
 800254a:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 800254c:	230a      	movs	r3, #10
 800254e:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8002550:	f107 0318 	add.w	r3, r7, #24
 8002554:	4619      	mov	r1, r3
 8002556:	4806      	ldr	r0, [pc, #24]	; (8002570 <MX_SPI1_Init+0xa0>)
 8002558:	f001 fd3b 	bl	8003fd2 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 800255c:	2100      	movs	r1, #0
 800255e:	4804      	ldr	r0, [pc, #16]	; (8002570 <MX_SPI1_Init+0xa0>)
 8002560:	f7ff ff5b 	bl	800241a <LL_SPI_SetStandard>

}
 8002564:	bf00      	nop
 8002566:	3740      	adds	r7, #64	; 0x40
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40020000 	.word	0x40020000
 8002570:	40013000 	.word	0x40013000

08002574 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b090      	sub	sp, #64	; 0x40
 8002578:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800257a:	f107 0318 	add.w	r3, r7, #24
 800257e:	2228      	movs	r2, #40	; 0x28
 8002580:	2100      	movs	r1, #0
 8002582:	4618      	mov	r0, r3
 8002584:	f002 faec 	bl	8004b60 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002588:	463b      	mov	r3, r7
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	605a      	str	r2, [r3, #4]
 8002590:	609a      	str	r2, [r3, #8]
 8002592:	60da      	str	r2, [r3, #12]
 8002594:	611a      	str	r2, [r3, #16]
 8002596:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8002598:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800259c:	f7ff ff68 	bl	8002470 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80025a0:	2002      	movs	r0, #2
 80025a2:	f7ff ff4d 	bl	8002440 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration  
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 80025a6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80025aa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80025ac:	2302      	movs	r3, #2
 80025ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80025b0:	2303      	movs	r3, #3
 80025b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80025b8:	2300      	movs	r3, #0
 80025ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80025bc:	2305      	movs	r3, #5
 80025be:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c0:	463b      	mov	r3, r7
 80025c2:	4619      	mov	r1, r3
 80025c4:	4813      	ldr	r0, [pc, #76]	; (8002614 <MX_SPI2_Init+0xa0>)
 80025c6:	f001 fb36 	bl	8003c36 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80025ca:	2300      	movs	r3, #0
 80025cc:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80025ce:	f44f 7382 	mov.w	r3, #260	; 0x104
 80025d2:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80025d4:	2300      	movs	r3, #0
 80025d6:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80025d8:	2302      	movs	r3, #2
 80025da:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80025dc:	2301      	movs	r3, #1
 80025de:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80025e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80025e6:	2318      	movs	r3, #24
 80025e8:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80025ea:	2300      	movs	r3, #0
 80025ec:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80025ee:	2300      	movs	r3, #0
 80025f0:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 80025f2:	230a      	movs	r3, #10
 80025f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 80025f6:	f107 0318 	add.w	r3, r7, #24
 80025fa:	4619      	mov	r1, r3
 80025fc:	4806      	ldr	r0, [pc, #24]	; (8002618 <MX_SPI2_Init+0xa4>)
 80025fe:	f001 fce8 	bl	8003fd2 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8002602:	2100      	movs	r1, #0
 8002604:	4804      	ldr	r0, [pc, #16]	; (8002618 <MX_SPI2_Init+0xa4>)
 8002606:	f7ff ff08 	bl	800241a <LL_SPI_SetStandard>

}
 800260a:	bf00      	nop
 800260c:	3740      	adds	r7, #64	; 0x40
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40020400 	.word	0x40020400
 8002618:	40003800 	.word	0x40003800

0800261c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b090      	sub	sp, #64	; 0x40
 8002620:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002622:	f107 0318 	add.w	r3, r7, #24
 8002626:	2228      	movs	r2, #40	; 0x28
 8002628:	2100      	movs	r1, #0
 800262a:	4618      	mov	r0, r3
 800262c:	f002 fa98 	bl	8004b60 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002630:	463b      	mov	r3, r7
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	605a      	str	r2, [r3, #4]
 8002638:	609a      	str	r2, [r3, #8]
 800263a:	60da      	str	r2, [r3, #12]
 800263c:	611a      	str	r2, [r3, #16]
 800263e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8002640:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002644:	f7ff ff14 	bl	8002470 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002648:	2002      	movs	r0, #2
 800264a:	f7ff fef9 	bl	8002440 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration  
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 800264e:	2338      	movs	r3, #56	; 0x38
 8002650:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002652:	2302      	movs	r3, #2
 8002654:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002656:	2303      	movs	r3, #3
 8002658:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800265a:	2300      	movs	r3, #0
 800265c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800265e:	2300      	movs	r3, #0
 8002660:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8002662:	2306      	movs	r3, #6
 8002664:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002666:	463b      	mov	r3, r7
 8002668:	4619      	mov	r1, r3
 800266a:	4813      	ldr	r0, [pc, #76]	; (80026b8 <MX_SPI3_Init+0x9c>)
 800266c:	f001 fae3 	bl	8003c36 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002670:	2300      	movs	r3, #0
 8002672:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002674:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002678:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800267a:	2300      	movs	r3, #0
 800267c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800267e:	2302      	movs	r3, #2
 8002680:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002682:	2301      	movs	r3, #1
 8002684:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002686:	f44f 7300 	mov.w	r3, #512	; 0x200
 800268a:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 800268c:	2308      	movs	r3, #8
 800268e:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002690:	2300      	movs	r3, #0
 8002692:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002694:	2300      	movs	r3, #0
 8002696:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8002698:	230a      	movs	r3, #10
 800269a:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 800269c:	f107 0318 	add.w	r3, r7, #24
 80026a0:	4619      	mov	r1, r3
 80026a2:	4806      	ldr	r0, [pc, #24]	; (80026bc <MX_SPI3_Init+0xa0>)
 80026a4:	f001 fc95 	bl	8003fd2 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 80026a8:	2100      	movs	r1, #0
 80026aa:	4804      	ldr	r0, [pc, #16]	; (80026bc <MX_SPI3_Init+0xa0>)
 80026ac:	f7ff feb5 	bl	800241a <LL_SPI_SetStandard>

}
 80026b0:	bf00      	nop
 80026b2:	3740      	adds	r7, #64	; 0x40
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40020400 	.word	0x40020400
 80026bc:	40003c00 	.word	0x40003c00

080026c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	607b      	str	r3, [r7, #4]
 80026ca:	4b10      	ldr	r3, [pc, #64]	; (800270c <HAL_MspInit+0x4c>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	4a0f      	ldr	r2, [pc, #60]	; (800270c <HAL_MspInit+0x4c>)
 80026d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026d4:	6453      	str	r3, [r2, #68]	; 0x44
 80026d6:	4b0d      	ldr	r3, [pc, #52]	; (800270c <HAL_MspInit+0x4c>)
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026de:	607b      	str	r3, [r7, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	603b      	str	r3, [r7, #0]
 80026e6:	4b09      	ldr	r3, [pc, #36]	; (800270c <HAL_MspInit+0x4c>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	4a08      	ldr	r2, [pc, #32]	; (800270c <HAL_MspInit+0x4c>)
 80026ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f0:	6413      	str	r3, [r2, #64]	; 0x40
 80026f2:	4b06      	ldr	r3, [pc, #24]	; (800270c <HAL_MspInit+0x4c>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fa:	603b      	str	r3, [r7, #0]
 80026fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	40023800 	.word	0x40023800

08002710 <LL_USART_IsActiveFlag_RXNE>:
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0320 	and.w	r3, r3, #32
 8002720:	2b20      	cmp	r3, #32
 8002722:	bf0c      	ite	eq
 8002724:	2301      	moveq	r3, #1
 8002726:	2300      	movne	r3, #0
 8002728:	b2db      	uxtb	r3, r3
}
 800272a:	4618      	mov	r0, r3
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <LL_USART_ClearFlag_RXNE>:
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f06f 0220 	mvn.w	r2, #32
 8002744:	601a      	str	r2, [r3, #0]
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <LL_USART_ReceiveData8>:
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	b2db      	uxtb	r3, r3
}
 8002760:	4618      	mov	r0, r3
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002770:	bf00      	nop
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800277a:	b480      	push	{r7}
 800277c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800277e:	e7fe      	b.n	800277e <HardFault_Handler+0x4>

08002780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002784:	e7fe      	b.n	8002784 <MemManage_Handler+0x4>

08002786 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002786:	b480      	push	{r7}
 8002788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800278a:	e7fe      	b.n	800278a <BusFault_Handler+0x4>

0800278c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002790:	e7fe      	b.n	8002790 <UsageFault_Handler+0x4>

08002792 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002792:	b480      	push	{r7}
 8002794:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027a4:	bf00      	nop
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027ae:	b480      	push	{r7}
 80027b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027b2:	bf00      	nop
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027c0:	f000 fbde 	bl	8002f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027c4:	bf00      	nop
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART6))
 80027cc:	480a      	ldr	r0, [pc, #40]	; (80027f8 <USART6_IRQHandler+0x30>)
 80027ce:	f7ff ff9f 	bl	8002710 <LL_USART_IsActiveFlag_RXNE>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00c      	beq.n	80027f2 <USART6_IRQHandler+0x2a>
	{
		LL_USART_ClearFlag_RXNE(USART6); // For HAL, it doens't needs to be clear like this
 80027d8:	4807      	ldr	r0, [pc, #28]	; (80027f8 <USART6_IRQHandler+0x30>)
 80027da:	f7ff ffac 	bl	8002736 <LL_USART_ClearFlag_RXNE>
		uart6_rx_data = LL_USART_ReceiveData8(USART6);
 80027de:	4806      	ldr	r0, [pc, #24]	; (80027f8 <USART6_IRQHandler+0x30>)
 80027e0:	f7ff ffb7 	bl	8002752 <LL_USART_ReceiveData8>
 80027e4:	4603      	mov	r3, r0
 80027e6:	461a      	mov	r2, r3
 80027e8:	4b04      	ldr	r3, [pc, #16]	; (80027fc <USART6_IRQHandler+0x34>)
 80027ea:	701a      	strb	r2, [r3, #0]
		uart6_rx_flag = 1;
 80027ec:	4b04      	ldr	r3, [pc, #16]	; (8002800 <USART6_IRQHandler+0x38>)
 80027ee:	2201      	movs	r2, #1
 80027f0:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80027f2:	bf00      	nop
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40011400 	.word	0x40011400
 80027fc:	20000203 	.word	0x20000203
 8002800:	20000202 	.word	0x20000202

08002804 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]
 8002814:	e00a      	b.n	800282c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002816:	f3af 8000 	nop.w
 800281a:	4601      	mov	r1, r0
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	1c5a      	adds	r2, r3, #1
 8002820:	60ba      	str	r2, [r7, #8]
 8002822:	b2ca      	uxtb	r2, r1
 8002824:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	3301      	adds	r3, #1
 800282a:	617b      	str	r3, [r7, #20]
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	429a      	cmp	r2, r3
 8002832:	dbf0      	blt.n	8002816 <_read+0x12>
	}

return len;
 8002834:	687b      	ldr	r3, [r7, #4]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <_close>:
	}
	return len;
}

int _close(int file)
{
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
	return -1;
 8002846:	f04f 33ff 	mov.w	r3, #4294967295
}
 800284a:	4618      	mov	r0, r3
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
 800285e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002866:	605a      	str	r2, [r3, #4]
	return 0;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <_isatty>:

int _isatty(int file)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
	return 1;
 800287e:	2301      	movs	r3, #1
}
 8002880:	4618      	mov	r0, r3
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
	return 0;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3714      	adds	r7, #20
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
	...

080028a8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80028b0:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <_sbrk+0x50>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d102      	bne.n	80028be <_sbrk+0x16>
		heap_end = &end;
 80028b8:	4b0f      	ldr	r3, [pc, #60]	; (80028f8 <_sbrk+0x50>)
 80028ba:	4a10      	ldr	r2, [pc, #64]	; (80028fc <_sbrk+0x54>)
 80028bc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80028be:	4b0e      	ldr	r3, [pc, #56]	; (80028f8 <_sbrk+0x50>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80028c4:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <_sbrk+0x50>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4413      	add	r3, r2
 80028cc:	466a      	mov	r2, sp
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d907      	bls.n	80028e2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80028d2:	f002 f91b 	bl	8004b0c <__errno>
 80028d6:	4602      	mov	r2, r0
 80028d8:	230c      	movs	r3, #12
 80028da:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80028dc:	f04f 33ff 	mov.w	r3, #4294967295
 80028e0:	e006      	b.n	80028f0 <_sbrk+0x48>
	}

	heap_end += incr;
 80028e2:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <_sbrk+0x50>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4413      	add	r3, r2
 80028ea:	4a03      	ldr	r2, [pc, #12]	; (80028f8 <_sbrk+0x50>)
 80028ec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80028ee:	68fb      	ldr	r3, [r7, #12]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	20000204 	.word	0x20000204
 80028fc:	20000310 	.word	0x20000310

08002900 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002904:	4b08      	ldr	r3, [pc, #32]	; (8002928 <SystemInit+0x28>)
 8002906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290a:	4a07      	ldr	r2, [pc, #28]	; (8002928 <SystemInit+0x28>)
 800290c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002910:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002914:	4b04      	ldr	r3, [pc, #16]	; (8002928 <SystemInit+0x28>)
 8002916:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800291a:	609a      	str	r2, [r3, #8]
#endif
}
 800291c:	bf00      	nop
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <LL_TIM_EnableARRPreload>:
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	601a      	str	r2, [r3, #0]
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <LL_TIM_OC_EnableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800294c:	b4b0      	push	{r4, r5, r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d01c      	beq.n	8002996 <LL_TIM_OC_EnableFast+0x4a>
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	2b04      	cmp	r3, #4
 8002960:	d017      	beq.n	8002992 <LL_TIM_OC_EnableFast+0x46>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	2b10      	cmp	r3, #16
 8002966:	d012      	beq.n	800298e <LL_TIM_OC_EnableFast+0x42>
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	2b40      	cmp	r3, #64	; 0x40
 800296c:	d00d      	beq.n	800298a <LL_TIM_OC_EnableFast+0x3e>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002974:	d007      	beq.n	8002986 <LL_TIM_OC_EnableFast+0x3a>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800297c:	d101      	bne.n	8002982 <LL_TIM_OC_EnableFast+0x36>
 800297e:	2305      	movs	r3, #5
 8002980:	e00a      	b.n	8002998 <LL_TIM_OC_EnableFast+0x4c>
 8002982:	2306      	movs	r3, #6
 8002984:	e008      	b.n	8002998 <LL_TIM_OC_EnableFast+0x4c>
 8002986:	2304      	movs	r3, #4
 8002988:	e006      	b.n	8002998 <LL_TIM_OC_EnableFast+0x4c>
 800298a:	2303      	movs	r3, #3
 800298c:	e004      	b.n	8002998 <LL_TIM_OC_EnableFast+0x4c>
 800298e:	2302      	movs	r3, #2
 8002990:	e002      	b.n	8002998 <LL_TIM_OC_EnableFast+0x4c>
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <LL_TIM_OC_EnableFast+0x4c>
 8002996:	2300      	movs	r3, #0
 8002998:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	3318      	adds	r3, #24
 800299e:	461a      	mov	r2, r3
 80029a0:	4629      	mov	r1, r5
 80029a2:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <LL_TIM_OC_EnableFast+0x7c>)
 80029a4:	5c5b      	ldrb	r3, [r3, r1]
 80029a6:	4413      	add	r3, r2
 80029a8:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80029aa:	6822      	ldr	r2, [r4, #0]
 80029ac:	4629      	mov	r1, r5
 80029ae:	4b07      	ldr	r3, [pc, #28]	; (80029cc <LL_TIM_OC_EnableFast+0x80>)
 80029b0:	5c5b      	ldrb	r3, [r3, r1]
 80029b2:	4619      	mov	r1, r3
 80029b4:	2304      	movs	r3, #4
 80029b6:	408b      	lsls	r3, r1
 80029b8:	4313      	orrs	r3, r2
 80029ba:	6023      	str	r3, [r4, #0]

}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bcb0      	pop	{r4, r5, r7}
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	08007e40 	.word	0x08007e40
 80029cc:	08007e48 	.word	0x08007e48

080029d0 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80029d0:	b4b0      	push	{r4, r5, r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d01c      	beq.n	8002a1a <LL_TIM_OC_EnablePreload+0x4a>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	d017      	beq.n	8002a16 <LL_TIM_OC_EnablePreload+0x46>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	2b10      	cmp	r3, #16
 80029ea:	d012      	beq.n	8002a12 <LL_TIM_OC_EnablePreload+0x42>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	2b40      	cmp	r3, #64	; 0x40
 80029f0:	d00d      	beq.n	8002a0e <LL_TIM_OC_EnablePreload+0x3e>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029f8:	d007      	beq.n	8002a0a <LL_TIM_OC_EnablePreload+0x3a>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a00:	d101      	bne.n	8002a06 <LL_TIM_OC_EnablePreload+0x36>
 8002a02:	2305      	movs	r3, #5
 8002a04:	e00a      	b.n	8002a1c <LL_TIM_OC_EnablePreload+0x4c>
 8002a06:	2306      	movs	r3, #6
 8002a08:	e008      	b.n	8002a1c <LL_TIM_OC_EnablePreload+0x4c>
 8002a0a:	2304      	movs	r3, #4
 8002a0c:	e006      	b.n	8002a1c <LL_TIM_OC_EnablePreload+0x4c>
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e004      	b.n	8002a1c <LL_TIM_OC_EnablePreload+0x4c>
 8002a12:	2302      	movs	r3, #2
 8002a14:	e002      	b.n	8002a1c <LL_TIM_OC_EnablePreload+0x4c>
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <LL_TIM_OC_EnablePreload+0x4c>
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	3318      	adds	r3, #24
 8002a22:	461a      	mov	r2, r3
 8002a24:	4629      	mov	r1, r5
 8002a26:	4b09      	ldr	r3, [pc, #36]	; (8002a4c <LL_TIM_OC_EnablePreload+0x7c>)
 8002a28:	5c5b      	ldrb	r3, [r3, r1]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002a2e:	6822      	ldr	r2, [r4, #0]
 8002a30:	4629      	mov	r1, r5
 8002a32:	4b07      	ldr	r3, [pc, #28]	; (8002a50 <LL_TIM_OC_EnablePreload+0x80>)
 8002a34:	5c5b      	ldrb	r3, [r3, r1]
 8002a36:	4619      	mov	r1, r3
 8002a38:	2308      	movs	r3, #8
 8002a3a:	408b      	lsls	r3, r1
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	6023      	str	r3, [r4, #0]
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bcb0      	pop	{r4, r5, r7}
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	08007e40 	.word	0x08007e40
 8002a50:	08007e48 	.word	0x08007e48

08002a54 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a66:	f023 0307 	bic.w	r3, r3, #7
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	609a      	str	r2, [r3, #8]
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
 8002a86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	605a      	str	r2, [r3, #4]
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	609a      	str	r2, [r3, #8]
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <LL_AHB1_GRP1_EnableClock>:
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002acc:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002ace:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ad0:	4907      	ldr	r1, [pc, #28]	; (8002af0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002ad8:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002ada:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
}
 8002ae4:	bf00      	nop
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	40023800 	.word	0x40023800

08002af4 <LL_APB1_GRP1_EnableClock>:
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002afc:	4b08      	ldr	r3, [pc, #32]	; (8002b20 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002afe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b00:	4907      	ldr	r1, [pc, #28]	; (8002b20 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002b08:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002b0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b12:	68fb      	ldr	r3, [r7, #12]
}
 8002b14:	bf00      	nop
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	40023800 	.word	0x40023800

08002b24 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b094      	sub	sp, #80	; 0x50
 8002b28:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002b2a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	605a      	str	r2, [r3, #4]
 8002b34:	609a      	str	r2, [r3, #8]
 8002b36:	60da      	str	r2, [r3, #12]
 8002b38:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002b3a:	f107 031c 	add.w	r3, r7, #28
 8002b3e:	2220      	movs	r2, #32
 8002b40:	2100      	movs	r1, #0
 8002b42:	4618      	mov	r0, r3
 8002b44:	f002 f80c 	bl	8004b60 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b48:	1d3b      	adds	r3, r7, #4
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	605a      	str	r2, [r3, #4]
 8002b50:	609a      	str	r2, [r3, #8]
 8002b52:	60da      	str	r2, [r3, #12]
 8002b54:	611a      	str	r2, [r3, #16]
 8002b56:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002b58:	2002      	movs	r0, #2
 8002b5a:	f7ff ffcb 	bl	8002af4 <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 1000-1;
 8002b5e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002b62:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002b64:	2300      	movs	r3, #0
 8002b66:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 21-1;
 8002b68:	2314      	movs	r3, #20
 8002b6a:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002b70:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b74:	4619      	mov	r1, r3
 8002b76:	4822      	ldr	r0, [pc, #136]	; (8002c00 <MX_TIM3_Init+0xdc>)
 8002b78:	f001 faf0 	bl	800415c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 8002b7c:	4820      	ldr	r0, [pc, #128]	; (8002c00 <MX_TIM3_Init+0xdc>)
 8002b7e:	f7ff fed5 	bl	800292c <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002b82:	2100      	movs	r1, #0
 8002b84:	481e      	ldr	r0, [pc, #120]	; (8002c00 <MX_TIM3_Init+0xdc>)
 8002b86:	f7ff ff65 	bl	8002a54 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8002b8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b8e:	481c      	ldr	r0, [pc, #112]	; (8002c00 <MX_TIM3_Init+0xdc>)
 8002b90:	f7ff ff1e 	bl	80029d0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002b94:	2360      	movs	r3, #96	; 0x60
 8002b96:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 10;
 8002ba0:	230a      	movs	r3, #10
 8002ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8002ba8:	f107 031c 	add.w	r3, r7, #28
 8002bac:	461a      	mov	r2, r3
 8002bae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002bb2:	4813      	ldr	r0, [pc, #76]	; (8002c00 <MX_TIM3_Init+0xdc>)
 8002bb4:	f001 fb6c 	bl	8004290 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8002bb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002bbc:	4810      	ldr	r0, [pc, #64]	; (8002c00 <MX_TIM3_Init+0xdc>)
 8002bbe:	f7ff fec5 	bl	800294c <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	480e      	ldr	r0, [pc, #56]	; (8002c00 <MX_TIM3_Init+0xdc>)
 8002bc6:	f7ff ff5a 	bl	8002a7e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002bca:	480d      	ldr	r0, [pc, #52]	; (8002c00 <MX_TIM3_Init+0xdc>)
 8002bcc:	f7ff ff6a 	bl	8002aa4 <LL_TIM_DisableMasterSlaveMode>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002bd0:	2002      	movs	r0, #2
 8002bd2:	f7ff ff77 	bl	8002ac4 <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration    
    PB1     ------> TIM3_CH4 
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002bda:	2302      	movs	r3, #2
 8002bdc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002bde:	2300      	movs	r3, #0
 8002be0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002be2:	2300      	movs	r3, #0
 8002be4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002be6:	2300      	movs	r3, #0
 8002be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8002bea:	2302      	movs	r3, #2
 8002bec:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bee:	1d3b      	adds	r3, r7, #4
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4804      	ldr	r0, [pc, #16]	; (8002c04 <MX_TIM3_Init+0xe0>)
 8002bf4:	f001 f81f 	bl	8003c36 <LL_GPIO_Init>

}
 8002bf8:	bf00      	nop
 8002bfa:	3750      	adds	r7, #80	; 0x50
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40000400 	.word	0x40000400
 8002c04:	40020400 	.word	0x40020400

08002c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c0c:	4b04      	ldr	r3, [pc, #16]	; (8002c20 <__NVIC_GetPriorityGrouping+0x18>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	0a1b      	lsrs	r3, r3, #8
 8002c12:	f003 0307 	and.w	r3, r3, #7
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	e000ed00 	.word	0xe000ed00

08002c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	db0b      	blt.n	8002c4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c36:	79fb      	ldrb	r3, [r7, #7]
 8002c38:	f003 021f 	and.w	r2, r3, #31
 8002c3c:	4907      	ldr	r1, [pc, #28]	; (8002c5c <__NVIC_EnableIRQ+0x38>)
 8002c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c42:	095b      	lsrs	r3, r3, #5
 8002c44:	2001      	movs	r0, #1
 8002c46:	fa00 f202 	lsl.w	r2, r0, r2
 8002c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	e000e100 	.word	0xe000e100

08002c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	6039      	str	r1, [r7, #0]
 8002c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	db0a      	blt.n	8002c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	490c      	ldr	r1, [pc, #48]	; (8002cac <__NVIC_SetPriority+0x4c>)
 8002c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7e:	0112      	lsls	r2, r2, #4
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	440b      	add	r3, r1
 8002c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c88:	e00a      	b.n	8002ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	4908      	ldr	r1, [pc, #32]	; (8002cb0 <__NVIC_SetPriority+0x50>)
 8002c90:	79fb      	ldrb	r3, [r7, #7]
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	3b04      	subs	r3, #4
 8002c98:	0112      	lsls	r2, r2, #4
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	761a      	strb	r2, [r3, #24]
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	e000e100 	.word	0xe000e100
 8002cb0:	e000ed00 	.word	0xe000ed00

08002cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b089      	sub	sp, #36	; 0x24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	f1c3 0307 	rsb	r3, r3, #7
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	bf28      	it	cs
 8002cd2:	2304      	movcs	r3, #4
 8002cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	3304      	adds	r3, #4
 8002cda:	2b06      	cmp	r3, #6
 8002cdc:	d902      	bls.n	8002ce4 <NVIC_EncodePriority+0x30>
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	3b03      	subs	r3, #3
 8002ce2:	e000      	b.n	8002ce6 <NVIC_EncodePriority+0x32>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	43da      	mvns	r2, r3
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	401a      	ands	r2, r3
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	fa01 f303 	lsl.w	r3, r1, r3
 8002d06:	43d9      	mvns	r1, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d0c:	4313      	orrs	r3, r2
         );
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3724      	adds	r7, #36	; 0x24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <LL_USART_Enable>:
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	60da      	str	r2, [r3, #12]
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <LL_USART_ConfigAsyncMode>:
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	615a      	str	r2, [r3, #20]
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
	...

08002d68 <LL_AHB1_GRP1_EnableClock>:
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002d70:	4b08      	ldr	r3, [pc, #32]	; (8002d94 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002d72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d74:	4907      	ldr	r1, [pc, #28]	; (8002d94 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002d7c:	4b05      	ldr	r3, [pc, #20]	; (8002d94 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002d7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4013      	ands	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d86:	68fb      	ldr	r3, [r7, #12]
}
 8002d88:	bf00      	nop
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	40023800 	.word	0x40023800

08002d98 <LL_APB2_GRP1_EnableClock>:
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002da0:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002da2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002da4:	4907      	ldr	r1, [pc, #28]	; (8002dc4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002dac:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002dae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4013      	ands	r3, r2
 8002db4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002db6:	68fb      	ldr	r3, [r7, #12]
}
 8002db8:	bf00      	nop
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	40023800 	.word	0x40023800

08002dc8 <MX_USART6_UART_Init>:
/* USER CODE END 0 */

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b08e      	sub	sp, #56	; 0x38
 8002dcc:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002dce:	f107 031c 	add.w	r3, r7, #28
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	605a      	str	r2, [r3, #4]
 8002dd8:	609a      	str	r2, [r3, #8]
 8002dda:	60da      	str	r2, [r3, #12]
 8002ddc:	611a      	str	r2, [r3, #16]
 8002dde:	615a      	str	r2, [r3, #20]
 8002de0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de2:	1d3b      	adds	r3, r7, #4
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	605a      	str	r2, [r3, #4]
 8002dea:	609a      	str	r2, [r3, #8]
 8002dec:	60da      	str	r2, [r3, #12]
 8002dee:	611a      	str	r2, [r3, #16]
 8002df0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8002df2:	2020      	movs	r0, #32
 8002df4:	f7ff ffd0 	bl	8002d98 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002df8:	2004      	movs	r0, #4
 8002dfa:	f7ff ffb5 	bl	8002d68 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration  
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002dfe:	23c0      	movs	r3, #192	; 0xc0
 8002e00:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002e02:	2302      	movs	r3, #2
 8002e04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002e06:	2303      	movs	r3, #3
 8002e08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002e12:	2308      	movs	r3, #8
 8002e14:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e16:	1d3b      	adds	r3, r7, #4
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4819      	ldr	r0, [pc, #100]	; (8002e80 <MX_USART6_UART_Init+0xb8>)
 8002e1c:	f000 ff0b 	bl	8003c36 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002e20:	f7ff fef2 	bl	8002c08 <__NVIC_GetPriorityGrouping>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2200      	movs	r2, #0
 8002e28:	2100      	movs	r1, #0
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff ff42 	bl	8002cb4 <NVIC_EncodePriority>
 8002e30:	4603      	mov	r3, r0
 8002e32:	4619      	mov	r1, r3
 8002e34:	2047      	movs	r0, #71	; 0x47
 8002e36:	f7ff ff13 	bl	8002c60 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8002e3a:	2047      	movs	r0, #71	; 0x47
 8002e3c:	f7ff fef2 	bl	8002c24 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 921600;
 8002e40:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 8002e44:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002e46:	2300      	movs	r3, #0
 8002e48:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002e52:	230c      	movs	r3, #12
 8002e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002e56:	2300      	movs	r3, #0
 8002e58:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 8002e5e:	f107 031c 	add.w	r3, r7, #28
 8002e62:	4619      	mov	r1, r3
 8002e64:	4807      	ldr	r0, [pc, #28]	; (8002e84 <MX_USART6_UART_Init+0xbc>)
 8002e66:	f001 fdd1 	bl	8004a0c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8002e6a:	4806      	ldr	r0, [pc, #24]	; (8002e84 <MX_USART6_UART_Init+0xbc>)
 8002e6c:	f7ff ff65 	bl	8002d3a <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8002e70:	4804      	ldr	r0, [pc, #16]	; (8002e84 <MX_USART6_UART_Init+0xbc>)
 8002e72:	f7ff ff52 	bl	8002d1a <LL_USART_Enable>

}
 8002e76:	bf00      	nop
 8002e78:	3738      	adds	r7, #56	; 0x38
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	40020800 	.word	0x40020800
 8002e84:	40011400 	.word	0x40011400

08002e88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002e88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ec0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002e8c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002e8e:	e003      	b.n	8002e98 <LoopCopyDataInit>

08002e90 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002e90:	4b0c      	ldr	r3, [pc, #48]	; (8002ec4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002e92:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002e94:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002e96:	3104      	adds	r1, #4

08002e98 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002e98:	480b      	ldr	r0, [pc, #44]	; (8002ec8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002e9a:	4b0c      	ldr	r3, [pc, #48]	; (8002ecc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002e9c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002e9e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ea0:	d3f6      	bcc.n	8002e90 <CopyDataInit>
  ldr  r2, =_sbss
 8002ea2:	4a0b      	ldr	r2, [pc, #44]	; (8002ed0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002ea4:	e002      	b.n	8002eac <LoopFillZerobss>

08002ea6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002ea6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002ea8:	f842 3b04 	str.w	r3, [r2], #4

08002eac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002eac:	4b09      	ldr	r3, [pc, #36]	; (8002ed4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002eae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002eb0:	d3f9      	bcc.n	8002ea6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002eb2:	f7ff fd25 	bl	8002900 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002eb6:	f001 fe2f 	bl	8004b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002eba:	f7ff f98b 	bl	80021d4 <main>
  bx  lr    
 8002ebe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ec0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002ec4:	08008148 	.word	0x08008148
  ldr  r0, =_sdata
 8002ec8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002ecc:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8002ed0:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8002ed4:	20000310 	.word	0x20000310

08002ed8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ed8:	e7fe      	b.n	8002ed8 <ADC_IRQHandler>
	...

08002edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ee0:	4b0e      	ldr	r3, [pc, #56]	; (8002f1c <HAL_Init+0x40>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a0d      	ldr	r2, [pc, #52]	; (8002f1c <HAL_Init+0x40>)
 8002ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002eec:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <HAL_Init+0x40>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a0a      	ldr	r2, [pc, #40]	; (8002f1c <HAL_Init+0x40>)
 8002ef2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ef6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ef8:	4b08      	ldr	r3, [pc, #32]	; (8002f1c <HAL_Init+0x40>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a07      	ldr	r2, [pc, #28]	; (8002f1c <HAL_Init+0x40>)
 8002efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f04:	2003      	movs	r0, #3
 8002f06:	f000 f92f 	bl	8003168 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	f000 f808 	bl	8002f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f10:	f7ff fbd6 	bl	80026c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40023c00 	.word	0x40023c00

08002f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f28:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <HAL_InitTick+0x54>)
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	4b12      	ldr	r3, [pc, #72]	; (8002f78 <HAL_InitTick+0x58>)
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	4619      	mov	r1, r3
 8002f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 f939 	bl	80031b6 <HAL_SYSTICK_Config>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e00e      	b.n	8002f6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2b0f      	cmp	r3, #15
 8002f52:	d80a      	bhi.n	8002f6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f54:	2200      	movs	r2, #0
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	f04f 30ff 	mov.w	r0, #4294967295
 8002f5c:	f000 f90f 	bl	800317e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f60:	4a06      	ldr	r2, [pc, #24]	; (8002f7c <HAL_InitTick+0x5c>)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
 8002f68:	e000      	b.n	8002f6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	20000000 	.word	0x20000000
 8002f78:	20000008 	.word	0x20000008
 8002f7c:	20000004 	.word	0x20000004

08002f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f84:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <HAL_IncTick+0x20>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <HAL_IncTick+0x24>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4413      	add	r3, r2
 8002f90:	4a04      	ldr	r2, [pc, #16]	; (8002fa4 <HAL_IncTick+0x24>)
 8002f92:	6013      	str	r3, [r2, #0]
}
 8002f94:	bf00      	nop
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	20000008 	.word	0x20000008
 8002fa4:	20000308 	.word	0x20000308

08002fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  return uwTick;
 8002fac:	4b03      	ldr	r3, [pc, #12]	; (8002fbc <HAL_GetTick+0x14>)
 8002fae:	681b      	ldr	r3, [r3, #0]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	20000308 	.word	0x20000308

08002fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fc8:	f7ff ffee 	bl	8002fa8 <HAL_GetTick>
 8002fcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd8:	d005      	beq.n	8002fe6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fda:	4b09      	ldr	r3, [pc, #36]	; (8003000 <HAL_Delay+0x40>)
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fe6:	bf00      	nop
 8002fe8:	f7ff ffde 	bl	8002fa8 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d8f7      	bhi.n	8002fe8 <HAL_Delay+0x28>
  {
  }
}
 8002ff8:	bf00      	nop
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	20000008 	.word	0x20000008

08003004 <__NVIC_SetPriorityGrouping>:
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003014:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <__NVIC_SetPriorityGrouping+0x44>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800301a:	68ba      	ldr	r2, [r7, #8]
 800301c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003020:	4013      	ands	r3, r2
 8003022:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800302c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003036:	4a04      	ldr	r2, [pc, #16]	; (8003048 <__NVIC_SetPriorityGrouping+0x44>)
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	60d3      	str	r3, [r2, #12]
}
 800303c:	bf00      	nop
 800303e:	3714      	adds	r7, #20
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	e000ed00 	.word	0xe000ed00

0800304c <__NVIC_GetPriorityGrouping>:
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003050:	4b04      	ldr	r3, [pc, #16]	; (8003064 <__NVIC_GetPriorityGrouping+0x18>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	0a1b      	lsrs	r3, r3, #8
 8003056:	f003 0307 	and.w	r3, r3, #7
}
 800305a:	4618      	mov	r0, r3
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	e000ed00 	.word	0xe000ed00

08003068 <__NVIC_SetPriority>:
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	4603      	mov	r3, r0
 8003070:	6039      	str	r1, [r7, #0]
 8003072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003078:	2b00      	cmp	r3, #0
 800307a:	db0a      	blt.n	8003092 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	b2da      	uxtb	r2, r3
 8003080:	490c      	ldr	r1, [pc, #48]	; (80030b4 <__NVIC_SetPriority+0x4c>)
 8003082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003086:	0112      	lsls	r2, r2, #4
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	440b      	add	r3, r1
 800308c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003090:	e00a      	b.n	80030a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	b2da      	uxtb	r2, r3
 8003096:	4908      	ldr	r1, [pc, #32]	; (80030b8 <__NVIC_SetPriority+0x50>)
 8003098:	79fb      	ldrb	r3, [r7, #7]
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	3b04      	subs	r3, #4
 80030a0:	0112      	lsls	r2, r2, #4
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	440b      	add	r3, r1
 80030a6:	761a      	strb	r2, [r3, #24]
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	e000e100 	.word	0xe000e100
 80030b8:	e000ed00 	.word	0xe000ed00

080030bc <NVIC_EncodePriority>:
{
 80030bc:	b480      	push	{r7}
 80030be:	b089      	sub	sp, #36	; 0x24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	f1c3 0307 	rsb	r3, r3, #7
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	bf28      	it	cs
 80030da:	2304      	movcs	r3, #4
 80030dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	3304      	adds	r3, #4
 80030e2:	2b06      	cmp	r3, #6
 80030e4:	d902      	bls.n	80030ec <NVIC_EncodePriority+0x30>
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	3b03      	subs	r3, #3
 80030ea:	e000      	b.n	80030ee <NVIC_EncodePriority+0x32>
 80030ec:	2300      	movs	r3, #0
 80030ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f0:	f04f 32ff 	mov.w	r2, #4294967295
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	43da      	mvns	r2, r3
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	401a      	ands	r2, r3
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003104:	f04f 31ff 	mov.w	r1, #4294967295
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	fa01 f303 	lsl.w	r3, r1, r3
 800310e:	43d9      	mvns	r1, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003114:	4313      	orrs	r3, r2
}
 8003116:	4618      	mov	r0, r3
 8003118:	3724      	adds	r7, #36	; 0x24
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
	...

08003124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3b01      	subs	r3, #1
 8003130:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003134:	d301      	bcc.n	800313a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003136:	2301      	movs	r3, #1
 8003138:	e00f      	b.n	800315a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800313a:	4a0a      	ldr	r2, [pc, #40]	; (8003164 <SysTick_Config+0x40>)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	3b01      	subs	r3, #1
 8003140:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003142:	210f      	movs	r1, #15
 8003144:	f04f 30ff 	mov.w	r0, #4294967295
 8003148:	f7ff ff8e 	bl	8003068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800314c:	4b05      	ldr	r3, [pc, #20]	; (8003164 <SysTick_Config+0x40>)
 800314e:	2200      	movs	r2, #0
 8003150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003152:	4b04      	ldr	r3, [pc, #16]	; (8003164 <SysTick_Config+0x40>)
 8003154:	2207      	movs	r2, #7
 8003156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	e000e010 	.word	0xe000e010

08003168 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7ff ff47 	bl	8003004 <__NVIC_SetPriorityGrouping>
}
 8003176:	bf00      	nop
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800317e:	b580      	push	{r7, lr}
 8003180:	b086      	sub	sp, #24
 8003182:	af00      	add	r7, sp, #0
 8003184:	4603      	mov	r3, r0
 8003186:	60b9      	str	r1, [r7, #8]
 8003188:	607a      	str	r2, [r7, #4]
 800318a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800318c:	2300      	movs	r3, #0
 800318e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003190:	f7ff ff5c 	bl	800304c <__NVIC_GetPriorityGrouping>
 8003194:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	68b9      	ldr	r1, [r7, #8]
 800319a:	6978      	ldr	r0, [r7, #20]
 800319c:	f7ff ff8e 	bl	80030bc <NVIC_EncodePriority>
 80031a0:	4602      	mov	r2, r0
 80031a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031a6:	4611      	mov	r1, r2
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff ff5d 	bl	8003068 <__NVIC_SetPriority>
}
 80031ae:	bf00      	nop
 80031b0:	3718      	adds	r7, #24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b082      	sub	sp, #8
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7ff ffb0 	bl	8003124 <SysTick_Config>
 80031c4:	4603      	mov	r3, r0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
	...

080031d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e25b      	b.n	800369a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d075      	beq.n	80032da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031ee:	4ba3      	ldr	r3, [pc, #652]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 030c 	and.w	r3, r3, #12
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d00c      	beq.n	8003214 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031fa:	4ba0      	ldr	r3, [pc, #640]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003202:	2b08      	cmp	r3, #8
 8003204:	d112      	bne.n	800322c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003206:	4b9d      	ldr	r3, [pc, #628]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800320e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003212:	d10b      	bne.n	800322c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003214:	4b99      	ldr	r3, [pc, #612]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d05b      	beq.n	80032d8 <HAL_RCC_OscConfig+0x108>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d157      	bne.n	80032d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e236      	b.n	800369a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003234:	d106      	bne.n	8003244 <HAL_RCC_OscConfig+0x74>
 8003236:	4b91      	ldr	r3, [pc, #580]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a90      	ldr	r2, [pc, #576]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 800323c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	e01d      	b.n	8003280 <HAL_RCC_OscConfig+0xb0>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800324c:	d10c      	bne.n	8003268 <HAL_RCC_OscConfig+0x98>
 800324e:	4b8b      	ldr	r3, [pc, #556]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a8a      	ldr	r2, [pc, #552]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 8003254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	4b88      	ldr	r3, [pc, #544]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a87      	ldr	r2, [pc, #540]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 8003260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	e00b      	b.n	8003280 <HAL_RCC_OscConfig+0xb0>
 8003268:	4b84      	ldr	r3, [pc, #528]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a83      	ldr	r2, [pc, #524]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 800326e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003272:	6013      	str	r3, [r2, #0]
 8003274:	4b81      	ldr	r3, [pc, #516]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a80      	ldr	r2, [pc, #512]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 800327a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800327e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d013      	beq.n	80032b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003288:	f7ff fe8e 	bl	8002fa8 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003290:	f7ff fe8a 	bl	8002fa8 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b64      	cmp	r3, #100	; 0x64
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e1fb      	b.n	800369a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032a2:	4b76      	ldr	r3, [pc, #472]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0f0      	beq.n	8003290 <HAL_RCC_OscConfig+0xc0>
 80032ae:	e014      	b.n	80032da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b0:	f7ff fe7a 	bl	8002fa8 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032b8:	f7ff fe76 	bl	8002fa8 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b64      	cmp	r3, #100	; 0x64
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e1e7      	b.n	800369a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ca:	4b6c      	ldr	r3, [pc, #432]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1f0      	bne.n	80032b8 <HAL_RCC_OscConfig+0xe8>
 80032d6:	e000      	b.n	80032da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d063      	beq.n	80033ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032e6:	4b65      	ldr	r3, [pc, #404]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 030c 	and.w	r3, r3, #12
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00b      	beq.n	800330a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032f2:	4b62      	ldr	r3, [pc, #392]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d11c      	bne.n	8003338 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032fe:	4b5f      	ldr	r3, [pc, #380]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d116      	bne.n	8003338 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800330a:	4b5c      	ldr	r3, [pc, #368]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d005      	beq.n	8003322 <HAL_RCC_OscConfig+0x152>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d001      	beq.n	8003322 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e1bb      	b.n	800369a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003322:	4b56      	ldr	r3, [pc, #344]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	4952      	ldr	r1, [pc, #328]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 8003332:	4313      	orrs	r3, r2
 8003334:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003336:	e03a      	b.n	80033ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d020      	beq.n	8003382 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003340:	4b4f      	ldr	r3, [pc, #316]	; (8003480 <HAL_RCC_OscConfig+0x2b0>)
 8003342:	2201      	movs	r2, #1
 8003344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003346:	f7ff fe2f 	bl	8002fa8 <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800334e:	f7ff fe2b 	bl	8002fa8 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e19c      	b.n	800369a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003360:	4b46      	ldr	r3, [pc, #280]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0f0      	beq.n	800334e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800336c:	4b43      	ldr	r3, [pc, #268]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	4940      	ldr	r1, [pc, #256]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 800337c:	4313      	orrs	r3, r2
 800337e:	600b      	str	r3, [r1, #0]
 8003380:	e015      	b.n	80033ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003382:	4b3f      	ldr	r3, [pc, #252]	; (8003480 <HAL_RCC_OscConfig+0x2b0>)
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003388:	f7ff fe0e 	bl	8002fa8 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003390:	f7ff fe0a 	bl	8002fa8 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e17b      	b.n	800369a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033a2:	4b36      	ldr	r3, [pc, #216]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1f0      	bne.n	8003390 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0308 	and.w	r3, r3, #8
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d030      	beq.n	800341c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d016      	beq.n	80033f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033c2:	4b30      	ldr	r3, [pc, #192]	; (8003484 <HAL_RCC_OscConfig+0x2b4>)
 80033c4:	2201      	movs	r2, #1
 80033c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c8:	f7ff fdee 	bl	8002fa8 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033d0:	f7ff fdea 	bl	8002fa8 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e15b      	b.n	800369a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033e2:	4b26      	ldr	r3, [pc, #152]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 80033e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0f0      	beq.n	80033d0 <HAL_RCC_OscConfig+0x200>
 80033ee:	e015      	b.n	800341c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033f0:	4b24      	ldr	r3, [pc, #144]	; (8003484 <HAL_RCC_OscConfig+0x2b4>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f6:	f7ff fdd7 	bl	8002fa8 <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033fc:	e008      	b.n	8003410 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033fe:	f7ff fdd3 	bl	8002fa8 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e144      	b.n	800369a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003410:	4b1a      	ldr	r3, [pc, #104]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 8003412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1f0      	bne.n	80033fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 80a0 	beq.w	800356a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800342a:	2300      	movs	r3, #0
 800342c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800342e:	4b13      	ldr	r3, [pc, #76]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10f      	bne.n	800345a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800343a:	2300      	movs	r3, #0
 800343c:	60bb      	str	r3, [r7, #8]
 800343e:	4b0f      	ldr	r3, [pc, #60]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	4a0e      	ldr	r2, [pc, #56]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 8003444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003448:	6413      	str	r3, [r2, #64]	; 0x40
 800344a:	4b0c      	ldr	r3, [pc, #48]	; (800347c <HAL_RCC_OscConfig+0x2ac>)
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003452:	60bb      	str	r3, [r7, #8]
 8003454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003456:	2301      	movs	r3, #1
 8003458:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800345a:	4b0b      	ldr	r3, [pc, #44]	; (8003488 <HAL_RCC_OscConfig+0x2b8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003462:	2b00      	cmp	r3, #0
 8003464:	d121      	bne.n	80034aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003466:	4b08      	ldr	r3, [pc, #32]	; (8003488 <HAL_RCC_OscConfig+0x2b8>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a07      	ldr	r2, [pc, #28]	; (8003488 <HAL_RCC_OscConfig+0x2b8>)
 800346c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003472:	f7ff fd99 	bl	8002fa8 <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003478:	e011      	b.n	800349e <HAL_RCC_OscConfig+0x2ce>
 800347a:	bf00      	nop
 800347c:	40023800 	.word	0x40023800
 8003480:	42470000 	.word	0x42470000
 8003484:	42470e80 	.word	0x42470e80
 8003488:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800348c:	f7ff fd8c 	bl	8002fa8 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e0fd      	b.n	800369a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349e:	4b81      	ldr	r3, [pc, #516]	; (80036a4 <HAL_RCC_OscConfig+0x4d4>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0f0      	beq.n	800348c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d106      	bne.n	80034c0 <HAL_RCC_OscConfig+0x2f0>
 80034b2:	4b7d      	ldr	r3, [pc, #500]	; (80036a8 <HAL_RCC_OscConfig+0x4d8>)
 80034b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b6:	4a7c      	ldr	r2, [pc, #496]	; (80036a8 <HAL_RCC_OscConfig+0x4d8>)
 80034b8:	f043 0301 	orr.w	r3, r3, #1
 80034bc:	6713      	str	r3, [r2, #112]	; 0x70
 80034be:	e01c      	b.n	80034fa <HAL_RCC_OscConfig+0x32a>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	2b05      	cmp	r3, #5
 80034c6:	d10c      	bne.n	80034e2 <HAL_RCC_OscConfig+0x312>
 80034c8:	4b77      	ldr	r3, [pc, #476]	; (80036a8 <HAL_RCC_OscConfig+0x4d8>)
 80034ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034cc:	4a76      	ldr	r2, [pc, #472]	; (80036a8 <HAL_RCC_OscConfig+0x4d8>)
 80034ce:	f043 0304 	orr.w	r3, r3, #4
 80034d2:	6713      	str	r3, [r2, #112]	; 0x70
 80034d4:	4b74      	ldr	r3, [pc, #464]	; (80036a8 <HAL_RCC_OscConfig+0x4d8>)
 80034d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d8:	4a73      	ldr	r2, [pc, #460]	; (80036a8 <HAL_RCC_OscConfig+0x4d8>)
 80034da:	f043 0301 	orr.w	r3, r3, #1
 80034de:	6713      	str	r3, [r2, #112]	; 0x70
 80034e0:	e00b      	b.n	80034fa <HAL_RCC_OscConfig+0x32a>
 80034e2:	4b71      	ldr	r3, [pc, #452]	; (80036a8 <HAL_RCC_OscConfig+0x4d8>)
 80034e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e6:	4a70      	ldr	r2, [pc, #448]	; (80036a8 <HAL_RCC_OscConfig+0x4d8>)
 80034e8:	f023 0301 	bic.w	r3, r3, #1
 80034ec:	6713      	str	r3, [r2, #112]	; 0x70
 80034ee:	4b6e      	ldr	r3, [pc, #440]	; (80036a8 <HAL_RCC_OscConfig+0x4d8>)
 80034f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f2:	4a6d      	ldr	r2, [pc, #436]	; (80036a8 <HAL_RCC_OscConfig+0x4d8>)
 80034f4:	f023 0304 	bic.w	r3, r3, #4
 80034f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d015      	beq.n	800352e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003502:	f7ff fd51 	bl	8002fa8 <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003508:	e00a      	b.n	8003520 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800350a:	f7ff fd4d 	bl	8002fa8 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	f241 3288 	movw	r2, #5000	; 0x1388
 8003518:	4293      	cmp	r3, r2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e0bc      	b.n	800369a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003520:	4b61      	ldr	r3, [pc, #388]	; (80036a8 <HAL_RCC_OscConfig+0x4d8>)
 8003522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0ee      	beq.n	800350a <HAL_RCC_OscConfig+0x33a>
 800352c:	e014      	b.n	8003558 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800352e:	f7ff fd3b 	bl	8002fa8 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003534:	e00a      	b.n	800354c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003536:	f7ff fd37 	bl	8002fa8 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	f241 3288 	movw	r2, #5000	; 0x1388
 8003544:	4293      	cmp	r3, r2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e0a6      	b.n	800369a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800354c:	4b56      	ldr	r3, [pc, #344]	; (80036a8 <HAL_RCC_OscConfig+0x4d8>)
 800354e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1ee      	bne.n	8003536 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003558:	7dfb      	ldrb	r3, [r7, #23]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d105      	bne.n	800356a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800355e:	4b52      	ldr	r3, [pc, #328]	; (80036a8 <HAL_RCC_OscConfig+0x4d8>)
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	4a51      	ldr	r2, [pc, #324]	; (80036a8 <HAL_RCC_OscConfig+0x4d8>)
 8003564:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003568:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 8092 	beq.w	8003698 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003574:	4b4c      	ldr	r3, [pc, #304]	; (80036a8 <HAL_RCC_OscConfig+0x4d8>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f003 030c 	and.w	r3, r3, #12
 800357c:	2b08      	cmp	r3, #8
 800357e:	d05c      	beq.n	800363a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	2b02      	cmp	r3, #2
 8003586:	d141      	bne.n	800360c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003588:	4b48      	ldr	r3, [pc, #288]	; (80036ac <HAL_RCC_OscConfig+0x4dc>)
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358e:	f7ff fd0b 	bl	8002fa8 <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003594:	e008      	b.n	80035a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003596:	f7ff fd07 	bl	8002fa8 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e078      	b.n	800369a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035a8:	4b3f      	ldr	r3, [pc, #252]	; (80036a8 <HAL_RCC_OscConfig+0x4d8>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1f0      	bne.n	8003596 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	69da      	ldr	r2, [r3, #28]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	431a      	orrs	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	019b      	lsls	r3, r3, #6
 80035c4:	431a      	orrs	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ca:	085b      	lsrs	r3, r3, #1
 80035cc:	3b01      	subs	r3, #1
 80035ce:	041b      	lsls	r3, r3, #16
 80035d0:	431a      	orrs	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d6:	061b      	lsls	r3, r3, #24
 80035d8:	4933      	ldr	r1, [pc, #204]	; (80036a8 <HAL_RCC_OscConfig+0x4d8>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035de:	4b33      	ldr	r3, [pc, #204]	; (80036ac <HAL_RCC_OscConfig+0x4dc>)
 80035e0:	2201      	movs	r2, #1
 80035e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e4:	f7ff fce0 	bl	8002fa8 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ec:	f7ff fcdc 	bl	8002fa8 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e04d      	b.n	800369a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035fe:	4b2a      	ldr	r3, [pc, #168]	; (80036a8 <HAL_RCC_OscConfig+0x4d8>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0f0      	beq.n	80035ec <HAL_RCC_OscConfig+0x41c>
 800360a:	e045      	b.n	8003698 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800360c:	4b27      	ldr	r3, [pc, #156]	; (80036ac <HAL_RCC_OscConfig+0x4dc>)
 800360e:	2200      	movs	r2, #0
 8003610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003612:	f7ff fcc9 	bl	8002fa8 <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800361a:	f7ff fcc5 	bl	8002fa8 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e036      	b.n	800369a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800362c:	4b1e      	ldr	r3, [pc, #120]	; (80036a8 <HAL_RCC_OscConfig+0x4d8>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1f0      	bne.n	800361a <HAL_RCC_OscConfig+0x44a>
 8003638:	e02e      	b.n	8003698 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d101      	bne.n	8003646 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e029      	b.n	800369a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003646:	4b18      	ldr	r3, [pc, #96]	; (80036a8 <HAL_RCC_OscConfig+0x4d8>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	429a      	cmp	r2, r3
 8003658:	d11c      	bne.n	8003694 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003664:	429a      	cmp	r2, r3
 8003666:	d115      	bne.n	8003694 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800366e:	4013      	ands	r3, r2
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003674:	4293      	cmp	r3, r2
 8003676:	d10d      	bne.n	8003694 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003682:	429a      	cmp	r2, r3
 8003684:	d106      	bne.n	8003694 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003690:	429a      	cmp	r2, r3
 8003692:	d001      	beq.n	8003698 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e000      	b.n	800369a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	40007000 	.word	0x40007000
 80036a8:	40023800 	.word	0x40023800
 80036ac:	42470060 	.word	0x42470060

080036b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e0cc      	b.n	800385e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036c4:	4b68      	ldr	r3, [pc, #416]	; (8003868 <HAL_RCC_ClockConfig+0x1b8>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 030f 	and.w	r3, r3, #15
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d90c      	bls.n	80036ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d2:	4b65      	ldr	r3, [pc, #404]	; (8003868 <HAL_RCC_ClockConfig+0x1b8>)
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036da:	4b63      	ldr	r3, [pc, #396]	; (8003868 <HAL_RCC_ClockConfig+0x1b8>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d001      	beq.n	80036ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e0b8      	b.n	800385e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d020      	beq.n	800373a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0304 	and.w	r3, r3, #4
 8003700:	2b00      	cmp	r3, #0
 8003702:	d005      	beq.n	8003710 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003704:	4b59      	ldr	r3, [pc, #356]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	4a58      	ldr	r2, [pc, #352]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800370e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0308 	and.w	r3, r3, #8
 8003718:	2b00      	cmp	r3, #0
 800371a:	d005      	beq.n	8003728 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800371c:	4b53      	ldr	r3, [pc, #332]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	4a52      	ldr	r2, [pc, #328]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003722:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003726:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003728:	4b50      	ldr	r3, [pc, #320]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	494d      	ldr	r1, [pc, #308]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003736:	4313      	orrs	r3, r2
 8003738:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d044      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d107      	bne.n	800375e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800374e:	4b47      	ldr	r3, [pc, #284]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d119      	bne.n	800378e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e07f      	b.n	800385e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2b02      	cmp	r3, #2
 8003764:	d003      	beq.n	800376e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800376a:	2b03      	cmp	r3, #3
 800376c:	d107      	bne.n	800377e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800376e:	4b3f      	ldr	r3, [pc, #252]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d109      	bne.n	800378e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e06f      	b.n	800385e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800377e:	4b3b      	ldr	r3, [pc, #236]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e067      	b.n	800385e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800378e:	4b37      	ldr	r3, [pc, #220]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f023 0203 	bic.w	r2, r3, #3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	4934      	ldr	r1, [pc, #208]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 800379c:	4313      	orrs	r3, r2
 800379e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037a0:	f7ff fc02 	bl	8002fa8 <HAL_GetTick>
 80037a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a6:	e00a      	b.n	80037be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a8:	f7ff fbfe 	bl	8002fa8 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e04f      	b.n	800385e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037be:	4b2b      	ldr	r3, [pc, #172]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 020c 	and.w	r2, r3, #12
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d1eb      	bne.n	80037a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037d0:	4b25      	ldr	r3, [pc, #148]	; (8003868 <HAL_RCC_ClockConfig+0x1b8>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 030f 	and.w	r3, r3, #15
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d20c      	bcs.n	80037f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037de:	4b22      	ldr	r3, [pc, #136]	; (8003868 <HAL_RCC_ClockConfig+0x1b8>)
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e6:	4b20      	ldr	r3, [pc, #128]	; (8003868 <HAL_RCC_ClockConfig+0x1b8>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d001      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e032      	b.n	800385e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	d008      	beq.n	8003816 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003804:	4b19      	ldr	r3, [pc, #100]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	4916      	ldr	r1, [pc, #88]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003812:	4313      	orrs	r3, r2
 8003814:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	2b00      	cmp	r3, #0
 8003820:	d009      	beq.n	8003836 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003822:	4b12      	ldr	r3, [pc, #72]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	490e      	ldr	r1, [pc, #56]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003832:	4313      	orrs	r3, r2
 8003834:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003836:	f000 f821 	bl	800387c <HAL_RCC_GetSysClockFreq>
 800383a:	4601      	mov	r1, r0
 800383c:	4b0b      	ldr	r3, [pc, #44]	; (800386c <HAL_RCC_ClockConfig+0x1bc>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	091b      	lsrs	r3, r3, #4
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	4a0a      	ldr	r2, [pc, #40]	; (8003870 <HAL_RCC_ClockConfig+0x1c0>)
 8003848:	5cd3      	ldrb	r3, [r2, r3]
 800384a:	fa21 f303 	lsr.w	r3, r1, r3
 800384e:	4a09      	ldr	r2, [pc, #36]	; (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 8003850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003852:	4b09      	ldr	r3, [pc, #36]	; (8003878 <HAL_RCC_ClockConfig+0x1c8>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f7ff fb62 	bl	8002f20 <HAL_InitTick>

  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	40023c00 	.word	0x40023c00
 800386c:	40023800 	.word	0x40023800
 8003870:	08007e28 	.word	0x08007e28
 8003874:	20000000 	.word	0x20000000
 8003878:	20000004 	.word	0x20000004

0800387c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800387c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003882:	2300      	movs	r3, #0
 8003884:	607b      	str	r3, [r7, #4]
 8003886:	2300      	movs	r3, #0
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	2300      	movs	r3, #0
 800388c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800388e:	2300      	movs	r3, #0
 8003890:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003892:	4b63      	ldr	r3, [pc, #396]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 030c 	and.w	r3, r3, #12
 800389a:	2b04      	cmp	r3, #4
 800389c:	d007      	beq.n	80038ae <HAL_RCC_GetSysClockFreq+0x32>
 800389e:	2b08      	cmp	r3, #8
 80038a0:	d008      	beq.n	80038b4 <HAL_RCC_GetSysClockFreq+0x38>
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f040 80b4 	bne.w	8003a10 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038a8:	4b5e      	ldr	r3, [pc, #376]	; (8003a24 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80038aa:	60bb      	str	r3, [r7, #8]
       break;
 80038ac:	e0b3      	b.n	8003a16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038ae:	4b5e      	ldr	r3, [pc, #376]	; (8003a28 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80038b0:	60bb      	str	r3, [r7, #8]
      break;
 80038b2:	e0b0      	b.n	8003a16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038b4:	4b5a      	ldr	r3, [pc, #360]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038bc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038be:	4b58      	ldr	r3, [pc, #352]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d04a      	beq.n	8003960 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ca:	4b55      	ldr	r3, [pc, #340]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	099b      	lsrs	r3, r3, #6
 80038d0:	f04f 0400 	mov.w	r4, #0
 80038d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80038d8:	f04f 0200 	mov.w	r2, #0
 80038dc:	ea03 0501 	and.w	r5, r3, r1
 80038e0:	ea04 0602 	and.w	r6, r4, r2
 80038e4:	4629      	mov	r1, r5
 80038e6:	4632      	mov	r2, r6
 80038e8:	f04f 0300 	mov.w	r3, #0
 80038ec:	f04f 0400 	mov.w	r4, #0
 80038f0:	0154      	lsls	r4, r2, #5
 80038f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80038f6:	014b      	lsls	r3, r1, #5
 80038f8:	4619      	mov	r1, r3
 80038fa:	4622      	mov	r2, r4
 80038fc:	1b49      	subs	r1, r1, r5
 80038fe:	eb62 0206 	sbc.w	r2, r2, r6
 8003902:	f04f 0300 	mov.w	r3, #0
 8003906:	f04f 0400 	mov.w	r4, #0
 800390a:	0194      	lsls	r4, r2, #6
 800390c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003910:	018b      	lsls	r3, r1, #6
 8003912:	1a5b      	subs	r3, r3, r1
 8003914:	eb64 0402 	sbc.w	r4, r4, r2
 8003918:	f04f 0100 	mov.w	r1, #0
 800391c:	f04f 0200 	mov.w	r2, #0
 8003920:	00e2      	lsls	r2, r4, #3
 8003922:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003926:	00d9      	lsls	r1, r3, #3
 8003928:	460b      	mov	r3, r1
 800392a:	4614      	mov	r4, r2
 800392c:	195b      	adds	r3, r3, r5
 800392e:	eb44 0406 	adc.w	r4, r4, r6
 8003932:	f04f 0100 	mov.w	r1, #0
 8003936:	f04f 0200 	mov.w	r2, #0
 800393a:	0262      	lsls	r2, r4, #9
 800393c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003940:	0259      	lsls	r1, r3, #9
 8003942:	460b      	mov	r3, r1
 8003944:	4614      	mov	r4, r2
 8003946:	4618      	mov	r0, r3
 8003948:	4621      	mov	r1, r4
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f04f 0400 	mov.w	r4, #0
 8003950:	461a      	mov	r2, r3
 8003952:	4623      	mov	r3, r4
 8003954:	f7fd f978 	bl	8000c48 <__aeabi_uldivmod>
 8003958:	4603      	mov	r3, r0
 800395a:	460c      	mov	r4, r1
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	e049      	b.n	80039f4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003960:	4b2f      	ldr	r3, [pc, #188]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	099b      	lsrs	r3, r3, #6
 8003966:	f04f 0400 	mov.w	r4, #0
 800396a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800396e:	f04f 0200 	mov.w	r2, #0
 8003972:	ea03 0501 	and.w	r5, r3, r1
 8003976:	ea04 0602 	and.w	r6, r4, r2
 800397a:	4629      	mov	r1, r5
 800397c:	4632      	mov	r2, r6
 800397e:	f04f 0300 	mov.w	r3, #0
 8003982:	f04f 0400 	mov.w	r4, #0
 8003986:	0154      	lsls	r4, r2, #5
 8003988:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800398c:	014b      	lsls	r3, r1, #5
 800398e:	4619      	mov	r1, r3
 8003990:	4622      	mov	r2, r4
 8003992:	1b49      	subs	r1, r1, r5
 8003994:	eb62 0206 	sbc.w	r2, r2, r6
 8003998:	f04f 0300 	mov.w	r3, #0
 800399c:	f04f 0400 	mov.w	r4, #0
 80039a0:	0194      	lsls	r4, r2, #6
 80039a2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80039a6:	018b      	lsls	r3, r1, #6
 80039a8:	1a5b      	subs	r3, r3, r1
 80039aa:	eb64 0402 	sbc.w	r4, r4, r2
 80039ae:	f04f 0100 	mov.w	r1, #0
 80039b2:	f04f 0200 	mov.w	r2, #0
 80039b6:	00e2      	lsls	r2, r4, #3
 80039b8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80039bc:	00d9      	lsls	r1, r3, #3
 80039be:	460b      	mov	r3, r1
 80039c0:	4614      	mov	r4, r2
 80039c2:	195b      	adds	r3, r3, r5
 80039c4:	eb44 0406 	adc.w	r4, r4, r6
 80039c8:	f04f 0100 	mov.w	r1, #0
 80039cc:	f04f 0200 	mov.w	r2, #0
 80039d0:	02a2      	lsls	r2, r4, #10
 80039d2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80039d6:	0299      	lsls	r1, r3, #10
 80039d8:	460b      	mov	r3, r1
 80039da:	4614      	mov	r4, r2
 80039dc:	4618      	mov	r0, r3
 80039de:	4621      	mov	r1, r4
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f04f 0400 	mov.w	r4, #0
 80039e6:	461a      	mov	r2, r3
 80039e8:	4623      	mov	r3, r4
 80039ea:	f7fd f92d 	bl	8000c48 <__aeabi_uldivmod>
 80039ee:	4603      	mov	r3, r0
 80039f0:	460c      	mov	r4, r1
 80039f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039f4:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	0c1b      	lsrs	r3, r3, #16
 80039fa:	f003 0303 	and.w	r3, r3, #3
 80039fe:	3301      	adds	r3, #1
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0c:	60bb      	str	r3, [r7, #8]
      break;
 8003a0e:	e002      	b.n	8003a16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a10:	4b04      	ldr	r3, [pc, #16]	; (8003a24 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003a12:	60bb      	str	r3, [r7, #8]
      break;
 8003a14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a16:	68bb      	ldr	r3, [r7, #8]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3714      	adds	r7, #20
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a20:	40023800 	.word	0x40023800
 8003a24:	00f42400 	.word	0x00f42400
 8003a28:	007a1200 	.word	0x007a1200

08003a2c <LL_GPIO_SetPinMode>:
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b089      	sub	sp, #36	; 0x24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	fa93 f3a3 	rbit	r3, r3
 8003a46:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	fab3 f383 	clz	r3, r3
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	2103      	movs	r1, #3
 8003a54:	fa01 f303 	lsl.w	r3, r1, r3
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	401a      	ands	r2, r3
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	fa93 f3a3 	rbit	r3, r3
 8003a66:	61bb      	str	r3, [r7, #24]
  return result;
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	fab3 f383 	clz	r3, r3
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	6879      	ldr	r1, [r7, #4]
 8003a74:	fa01 f303 	lsl.w	r3, r1, r3
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	601a      	str	r2, [r3, #0]
}
 8003a7e:	bf00      	nop
 8003a80:	3724      	adds	r7, #36	; 0x24
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <LL_GPIO_SetPinOutputType>:
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b085      	sub	sp, #20
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	60f8      	str	r0, [r7, #12]
 8003a92:	60b9      	str	r1, [r7, #8]
 8003a94:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	401a      	ands	r2, r3
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	fb01 f303 	mul.w	r3, r1, r3
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	605a      	str	r2, [r3, #4]
}
 8003aae:	bf00      	nop
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <LL_GPIO_SetPinSpeed>:
{
 8003aba:	b480      	push	{r7}
 8003abc:	b089      	sub	sp, #36	; 0x24
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	60f8      	str	r0, [r7, #12]
 8003ac2:	60b9      	str	r1, [r7, #8]
 8003ac4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	689a      	ldr	r2, [r3, #8]
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	fa93 f3a3 	rbit	r3, r3
 8003ad4:	613b      	str	r3, [r7, #16]
  return result;
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	fab3 f383 	clz	r3, r3
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	2103      	movs	r1, #3
 8003ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae6:	43db      	mvns	r3, r3
 8003ae8:	401a      	ands	r2, r3
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	fa93 f3a3 	rbit	r3, r3
 8003af4:	61bb      	str	r3, [r7, #24]
  return result;
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	fab3 f383 	clz	r3, r3
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	6879      	ldr	r1, [r7, #4]
 8003b02:	fa01 f303 	lsl.w	r3, r1, r3
 8003b06:	431a      	orrs	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	609a      	str	r2, [r3, #8]
}
 8003b0c:	bf00      	nop
 8003b0e:	3724      	adds	r7, #36	; 0x24
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <LL_GPIO_SetPinPull>:
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b089      	sub	sp, #36	; 0x24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	68da      	ldr	r2, [r3, #12]
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	fa93 f3a3 	rbit	r3, r3
 8003b32:	613b      	str	r3, [r7, #16]
  return result;
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	fab3 f383 	clz	r3, r3
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	2103      	movs	r1, #3
 8003b40:	fa01 f303 	lsl.w	r3, r1, r3
 8003b44:	43db      	mvns	r3, r3
 8003b46:	401a      	ands	r2, r3
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	fa93 f3a3 	rbit	r3, r3
 8003b52:	61bb      	str	r3, [r7, #24]
  return result;
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	fab3 f383 	clz	r3, r3
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	6879      	ldr	r1, [r7, #4]
 8003b60:	fa01 f303 	lsl.w	r3, r1, r3
 8003b64:	431a      	orrs	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	60da      	str	r2, [r3, #12]
}
 8003b6a:	bf00      	nop
 8003b6c:	3724      	adds	r7, #36	; 0x24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <LL_GPIO_SetAFPin_0_7>:
{
 8003b76:	b480      	push	{r7}
 8003b78:	b089      	sub	sp, #36	; 0x24
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	60f8      	str	r0, [r7, #12]
 8003b7e:	60b9      	str	r1, [r7, #8]
 8003b80:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6a1a      	ldr	r2, [r3, #32]
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	fa93 f3a3 	rbit	r3, r3
 8003b90:	613b      	str	r3, [r7, #16]
  return result;
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	fab3 f383 	clz	r3, r3
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	210f      	movs	r1, #15
 8003b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba2:	43db      	mvns	r3, r3
 8003ba4:	401a      	ands	r2, r3
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	fa93 f3a3 	rbit	r3, r3
 8003bb0:	61bb      	str	r3, [r7, #24]
  return result;
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	fab3 f383 	clz	r3, r3
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	6879      	ldr	r1, [r7, #4]
 8003bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	621a      	str	r2, [r3, #32]
}
 8003bc8:	bf00      	nop
 8003bca:	3724      	adds	r7, #36	; 0x24
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <LL_GPIO_SetAFPin_8_15>:
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b089      	sub	sp, #36	; 0x24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	0a1b      	lsrs	r3, r3, #8
 8003be8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	fa93 f3a3 	rbit	r3, r3
 8003bf0:	613b      	str	r3, [r7, #16]
  return result;
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	fab3 f383 	clz	r3, r3
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	210f      	movs	r1, #15
 8003bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8003c02:	43db      	mvns	r3, r3
 8003c04:	401a      	ands	r2, r3
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	0a1b      	lsrs	r3, r3, #8
 8003c0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	fa93 f3a3 	rbit	r3, r3
 8003c12:	61bb      	str	r3, [r7, #24]
  return result;
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	fab3 f383 	clz	r3, r3
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	6879      	ldr	r1, [r7, #4]
 8003c20:	fa01 f303 	lsl.w	r3, r1, r3
 8003c24:	431a      	orrs	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003c2a:	bf00      	nop
 8003c2c:	3724      	adds	r7, #36	; 0x24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b088      	sub	sp, #32
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	fa93 f3a3 	rbit	r3, r3
 8003c54:	613b      	str	r3, [r7, #16]
  return result;
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	fab3 f383 	clz	r3, r3
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003c60:	e050      	b.n	8003d04 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	2101      	movs	r1, #1
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6e:	4013      	ands	r3, r2
 8003c70:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d042      	beq.n	8003cfe <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d003      	beq.n	8003c88 <LL_GPIO_Init+0x52>
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d10d      	bne.n	8003ca4 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	69b9      	ldr	r1, [r7, #24]
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f7ff ff12 	bl	8003aba <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	69b9      	ldr	r1, [r7, #24]
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7ff fef3 	bl	8003a8a <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	69b9      	ldr	r1, [r7, #24]
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f7ff ff33 	bl	8003b18 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d11a      	bne.n	8003cf0 <LL_GPIO_Init+0xba>
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	fa93 f3a3 	rbit	r3, r3
 8003cc4:	60bb      	str	r3, [r7, #8]
  return result;
 8003cc6:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003cc8:	fab3 f383 	clz	r3, r3
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b07      	cmp	r3, #7
 8003cd0:	d807      	bhi.n	8003ce2 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	69b9      	ldr	r1, [r7, #24]
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7ff ff4b 	bl	8003b76 <LL_GPIO_SetAFPin_0_7>
 8003ce0:	e006      	b.n	8003cf0 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	69b9      	ldr	r1, [r7, #24]
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7ff ff72 	bl	8003bd4 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	69b9      	ldr	r1, [r7, #24]
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f7ff fe97 	bl	8003a2c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	3301      	adds	r3, #1
 8003d02:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1a7      	bne.n	8003c62 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3720      	adds	r7, #32
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003d20:	4b04      	ldr	r3, [pc, #16]	; (8003d34 <LL_RCC_GetSysClkSource+0x18>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f003 030c 	and.w	r3, r3, #12
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	40023800 	.word	0x40023800

08003d38 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003d3c:	4b04      	ldr	r3, [pc, #16]	; (8003d50 <LL_RCC_GetAHBPrescaler+0x18>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40023800 	.word	0x40023800

08003d54 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003d58:	4b04      	ldr	r3, [pc, #16]	; (8003d6c <LL_RCC_GetAPB1Prescaler+0x18>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	40023800 	.word	0x40023800

08003d70 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003d74:	4b04      	ldr	r3, [pc, #16]	; (8003d88 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	40023800 	.word	0x40023800

08003d8c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003d90:	4b04      	ldr	r3, [pc, #16]	; (8003da4 <LL_RCC_PLL_GetMainSource+0x18>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	40023800 	.word	0x40023800

08003da8 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003dac:	4b04      	ldr	r3, [pc, #16]	; (8003dc0 <LL_RCC_PLL_GetN+0x18>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	099b      	lsrs	r3, r3, #6
 8003db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	40023800 	.word	0x40023800

08003dc4 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003dc8:	4b04      	ldr	r3, [pc, #16]	; (8003ddc <LL_RCC_PLL_GetP+0x18>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	40023800 	.word	0x40023800

08003de0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003de4:	4b04      	ldr	r3, [pc, #16]	; (8003df8 <LL_RCC_PLL_GetDivider+0x18>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	40023800 	.word	0x40023800

08003dfc <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003e04:	f000 f820 	bl	8003e48 <RCC_GetSystemClockFreq>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 f83e 	bl	8003e94 <RCC_GetHCLKClockFreq>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 f84c 	bl	8003ec0 <RCC_GetPCLK1ClockFreq>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 f858 	bl	8003ee8 <RCC_GetPCLK2ClockFreq>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	60da      	str	r2, [r3, #12]
}
 8003e3e:	bf00      	nop
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
	...

08003e48 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003e52:	f7ff ff63 	bl	8003d1c <LL_RCC_GetSysClkSource>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b04      	cmp	r3, #4
 8003e5a:	d006      	beq.n	8003e6a <RCC_GetSystemClockFreq+0x22>
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d007      	beq.n	8003e70 <RCC_GetSystemClockFreq+0x28>
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10a      	bne.n	8003e7a <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003e64:	4b09      	ldr	r3, [pc, #36]	; (8003e8c <RCC_GetSystemClockFreq+0x44>)
 8003e66:	607b      	str	r3, [r7, #4]
      break;
 8003e68:	e00a      	b.n	8003e80 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003e6a:	4b09      	ldr	r3, [pc, #36]	; (8003e90 <RCC_GetSystemClockFreq+0x48>)
 8003e6c:	607b      	str	r3, [r7, #4]
      break;
 8003e6e:	e007      	b.n	8003e80 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003e70:	2008      	movs	r0, #8
 8003e72:	f000 f84d 	bl	8003f10 <RCC_PLL_GetFreqDomain_SYS>
 8003e76:	6078      	str	r0, [r7, #4]
      break;
 8003e78:	e002      	b.n	8003e80 <RCC_GetSystemClockFreq+0x38>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003e7a:	4b04      	ldr	r3, [pc, #16]	; (8003e8c <RCC_GetSystemClockFreq+0x44>)
 8003e7c:	607b      	str	r3, [r7, #4]
      break;
 8003e7e:	bf00      	nop
  }

  return frequency;
 8003e80:	687b      	ldr	r3, [r7, #4]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	00f42400 	.word	0x00f42400
 8003e90:	007a1200 	.word	0x007a1200

08003e94 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003e9c:	f7ff ff4c 	bl	8003d38 <LL_RCC_GetAHBPrescaler>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	091b      	lsrs	r3, r3, #4
 8003ea4:	f003 030f 	and.w	r3, r3, #15
 8003ea8:	4a04      	ldr	r2, [pc, #16]	; (8003ebc <RCC_GetHCLKClockFreq+0x28>)
 8003eaa:	5cd3      	ldrb	r3, [r2, r3]
 8003eac:	461a      	mov	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	40d3      	lsrs	r3, r2
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	08007e28 	.word	0x08007e28

08003ec0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003ec8:	f7ff ff44 	bl	8003d54 <LL_RCC_GetAPB1Prescaler>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	0a9b      	lsrs	r3, r3, #10
 8003ed0:	4a04      	ldr	r2, [pc, #16]	; (8003ee4 <RCC_GetPCLK1ClockFreq+0x24>)
 8003ed2:	5cd3      	ldrb	r3, [r2, r3]
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	40d3      	lsrs	r3, r2
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	08007e38 	.word	0x08007e38

08003ee8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003ef0:	f7ff ff3e 	bl	8003d70 <LL_RCC_GetAPB2Prescaler>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	0b5b      	lsrs	r3, r3, #13
 8003ef8:	4a04      	ldr	r2, [pc, #16]	; (8003f0c <RCC_GetPCLK2ClockFreq+0x24>)
 8003efa:	5cd3      	ldrb	r3, [r2, r3]
 8003efc:	461a      	mov	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	40d3      	lsrs	r3, r2
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	08007e38 	.word	0x08007e38

08003f10 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003f10:	b590      	push	{r4, r7, lr}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	617b      	str	r3, [r7, #20]
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	60fb      	str	r3, [r7, #12]
 8003f20:	2300      	movs	r3, #0
 8003f22:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003f24:	f7ff ff32 	bl	8003d8c <LL_RCC_PLL_GetMainSource>
 8003f28:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8003f30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f34:	d003      	beq.n	8003f3e <RCC_PLL_GetFreqDomain_SYS+0x2e>
 8003f36:	e005      	b.n	8003f44 <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003f38:	4b12      	ldr	r3, [pc, #72]	; (8003f84 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003f3a:	617b      	str	r3, [r7, #20]
      break;
 8003f3c:	e005      	b.n	8003f4a <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003f3e:	4b12      	ldr	r3, [pc, #72]	; (8003f88 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003f40:	617b      	str	r3, [r7, #20]
      break;
 8003f42:	e002      	b.n	8003f4a <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 8003f44:	4b0f      	ldr	r3, [pc, #60]	; (8003f84 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003f46:	617b      	str	r3, [r7, #20]
      break;
 8003f48:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d113      	bne.n	8003f78 <RCC_PLL_GetFreqDomain_SYS+0x68>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003f50:	f7ff ff46 	bl	8003de0 <LL_RCC_PLL_GetDivider>
 8003f54:	4602      	mov	r2, r0
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	fbb3 f4f2 	udiv	r4, r3, r2
 8003f5c:	f7ff ff24 	bl	8003da8 <LL_RCC_PLL_GetN>
 8003f60:	4603      	mov	r3, r0
 8003f62:	fb03 f404 	mul.w	r4, r3, r4
 8003f66:	f7ff ff2d 	bl	8003dc4 <LL_RCC_PLL_GetP>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	0c1b      	lsrs	r3, r3, #16
 8003f6e:	3301      	adds	r3, #1
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	fbb4 f3f3 	udiv	r3, r4, r3
 8003f76:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003f78:	693b      	ldr	r3, [r7, #16]
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	371c      	adds	r7, #28
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd90      	pop	{r4, r7, pc}
 8003f82:	bf00      	nop
 8003f84:	00f42400 	.word	0x00f42400
 8003f88:	007a1200 	.word	0x007a1200

08003f8c <LL_SPI_IsEnabled>:
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f9c:	2b40      	cmp	r3, #64	; 0x40
 8003f9e:	d101      	bne.n	8003fa4 <LL_SPI_IsEnabled+0x18>
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e000      	b.n	8003fa6 <LL_SPI_IsEnabled+0x1a>
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <LL_SPI_SetCRCPolynomial>:
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b083      	sub	sp, #12
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
 8003fba:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	611a      	str	r2, [r3, #16]
}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b084      	sub	sp, #16
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
 8003fda:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f7ff ffd3 	bl	8003f8c <LL_SPI_IsEnabled>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d139      	bne.n	8004060 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ff4:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	6811      	ldr	r1, [r2, #0]
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	6852      	ldr	r2, [r2, #4]
 8004000:	4311      	orrs	r1, r2
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	6892      	ldr	r2, [r2, #8]
 8004006:	4311      	orrs	r1, r2
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	68d2      	ldr	r2, [r2, #12]
 800400c:	4311      	orrs	r1, r2
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	6912      	ldr	r2, [r2, #16]
 8004012:	4311      	orrs	r1, r2
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	6952      	ldr	r2, [r2, #20]
 8004018:	4311      	orrs	r1, r2
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	6992      	ldr	r2, [r2, #24]
 800401e:	4311      	orrs	r1, r2
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	69d2      	ldr	r2, [r2, #28]
 8004024:	4311      	orrs	r1, r2
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	6a12      	ldr	r2, [r2, #32]
 800402a:	430a      	orrs	r2, r1
 800402c:	431a      	orrs	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f023 0204 	bic.w	r2, r3, #4
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	0c1b      	lsrs	r3, r3, #16
 8004040:	431a      	orrs	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800404e:	d105      	bne.n	800405c <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004054:	4619      	mov	r1, r3
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7ff ffab 	bl	8003fb2 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800405c:	2300      	movs	r3, #0
 800405e:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	69db      	ldr	r3, [r3, #28]
 8004064:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	61da      	str	r2, [r3, #28]
  return status;
 800406c:	7bfb      	ldrb	r3, [r7, #15]
}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <LL_TIM_SetPrescaler>:
{
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
 800407e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004086:	bf00      	nop
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <LL_TIM_SetAutoReload>:
{
 8004092:	b480      	push	{r7}
 8004094:	b083      	sub	sp, #12
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
 800409a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80040a2:	bf00      	nop
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <LL_TIM_SetRepetitionCounter>:
{
 80040ae:	b480      	push	{r7}
 80040b0:	b083      	sub	sp, #12
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
 80040b6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80040be:	bf00      	nop
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <LL_TIM_OC_SetCompareCH1>:
{
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
 80040d2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <LL_TIM_OC_SetCompareCH2>:
{
 80040e6:	b480      	push	{r7}
 80040e8:	b083      	sub	sp, #12
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
 80040ee:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80040f6:	bf00      	nop
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <LL_TIM_OC_SetCompareCH3>:
{
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
 800410a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004112:	bf00      	nop
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <LL_TIM_OC_SetCompareCH4>:
{
 800411e:	b480      	push	{r7}
 8004120:	b083      	sub	sp, #12
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
 8004126:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800412e:	bf00      	nop
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800413a:	b480      	push	{r7}
 800413c:	b083      	sub	sp, #12
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	f043 0201 	orr.w	r2, r3, #1
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	615a      	str	r2, [r3, #20]
}
 800414e:	bf00      	nop
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
	...

0800415c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a3d      	ldr	r2, [pc, #244]	; (8004264 <LL_TIM_Init+0x108>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d013      	beq.n	800419c <LL_TIM_Init+0x40>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800417a:	d00f      	beq.n	800419c <LL_TIM_Init+0x40>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a3a      	ldr	r2, [pc, #232]	; (8004268 <LL_TIM_Init+0x10c>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d00b      	beq.n	800419c <LL_TIM_Init+0x40>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a39      	ldr	r2, [pc, #228]	; (800426c <LL_TIM_Init+0x110>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d007      	beq.n	800419c <LL_TIM_Init+0x40>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a38      	ldr	r2, [pc, #224]	; (8004270 <LL_TIM_Init+0x114>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d003      	beq.n	800419c <LL_TIM_Init+0x40>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a37      	ldr	r2, [pc, #220]	; (8004274 <LL_TIM_Init+0x118>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d106      	bne.n	80041aa <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a2d      	ldr	r2, [pc, #180]	; (8004264 <LL_TIM_Init+0x108>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d02b      	beq.n	800420a <LL_TIM_Init+0xae>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b8:	d027      	beq.n	800420a <LL_TIM_Init+0xae>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a2a      	ldr	r2, [pc, #168]	; (8004268 <LL_TIM_Init+0x10c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d023      	beq.n	800420a <LL_TIM_Init+0xae>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a29      	ldr	r2, [pc, #164]	; (800426c <LL_TIM_Init+0x110>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d01f      	beq.n	800420a <LL_TIM_Init+0xae>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a28      	ldr	r2, [pc, #160]	; (8004270 <LL_TIM_Init+0x114>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d01b      	beq.n	800420a <LL_TIM_Init+0xae>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a27      	ldr	r2, [pc, #156]	; (8004274 <LL_TIM_Init+0x118>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d017      	beq.n	800420a <LL_TIM_Init+0xae>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a26      	ldr	r2, [pc, #152]	; (8004278 <LL_TIM_Init+0x11c>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d013      	beq.n	800420a <LL_TIM_Init+0xae>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a25      	ldr	r2, [pc, #148]	; (800427c <LL_TIM_Init+0x120>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d00f      	beq.n	800420a <LL_TIM_Init+0xae>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a24      	ldr	r2, [pc, #144]	; (8004280 <LL_TIM_Init+0x124>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d00b      	beq.n	800420a <LL_TIM_Init+0xae>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a23      	ldr	r2, [pc, #140]	; (8004284 <LL_TIM_Init+0x128>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d007      	beq.n	800420a <LL_TIM_Init+0xae>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a22      	ldr	r2, [pc, #136]	; (8004288 <LL_TIM_Init+0x12c>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d003      	beq.n	800420a <LL_TIM_Init+0xae>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a21      	ldr	r2, [pc, #132]	; (800428c <LL_TIM_Init+0x130>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d106      	bne.n	8004218 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	4313      	orrs	r3, r2
 8004216:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	4619      	mov	r1, r3
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f7ff ff34 	bl	8004092 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	4619      	mov	r1, r3
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f7ff ff20 	bl	8004076 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a0a      	ldr	r2, [pc, #40]	; (8004264 <LL_TIM_Init+0x108>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d003      	beq.n	8004246 <LL_TIM_Init+0xea>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a0c      	ldr	r2, [pc, #48]	; (8004274 <LL_TIM_Init+0x118>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d105      	bne.n	8004252 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	7c1b      	ldrb	r3, [r3, #16]
 800424a:	4619      	mov	r1, r3
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f7ff ff2e 	bl	80040ae <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7ff ff71 	bl	800413a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	40010000 	.word	0x40010000
 8004268:	40000400 	.word	0x40000400
 800426c:	40000800 	.word	0x40000800
 8004270:	40000c00 	.word	0x40000c00
 8004274:	40010400 	.word	0x40010400
 8004278:	40014000 	.word	0x40014000
 800427c:	40014400 	.word	0x40014400
 8004280:	40014800 	.word	0x40014800
 8004284:	40001800 	.word	0x40001800
 8004288:	40001c00 	.word	0x40001c00
 800428c:	40002000 	.word	0x40002000

08004290 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	2b10      	cmp	r3, #16
 80042a4:	d012      	beq.n	80042cc <LL_TIM_OC_Init+0x3c>
 80042a6:	2b10      	cmp	r3, #16
 80042a8:	d802      	bhi.n	80042b0 <LL_TIM_OC_Init+0x20>
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d007      	beq.n	80042be <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80042ae:	e022      	b.n	80042f6 <LL_TIM_OC_Init+0x66>
  switch (Channel)
 80042b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042b4:	d011      	beq.n	80042da <LL_TIM_OC_Init+0x4a>
 80042b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ba:	d015      	beq.n	80042e8 <LL_TIM_OC_Init+0x58>
      break;
 80042bc:	e01b      	b.n	80042f6 <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 f81d 	bl	8004300 <OC1Config>
 80042c6:	4603      	mov	r3, r0
 80042c8:	75fb      	strb	r3, [r7, #23]
      break;
 80042ca:	e014      	b.n	80042f6 <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80042cc:	6879      	ldr	r1, [r7, #4]
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f000 f882 	bl	80043d8 <OC2Config>
 80042d4:	4603      	mov	r3, r0
 80042d6:	75fb      	strb	r3, [r7, #23]
      break;
 80042d8:	e00d      	b.n	80042f6 <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80042da:	6879      	ldr	r1, [r7, #4]
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f000 f8eb 	bl	80044b8 <OC3Config>
 80042e2:	4603      	mov	r3, r0
 80042e4:	75fb      	strb	r3, [r7, #23]
      break;
 80042e6:	e006      	b.n	80042f6 <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80042e8:	6879      	ldr	r1, [r7, #4]
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 f954 	bl	8004598 <OC4Config>
 80042f0:	4603      	mov	r3, r0
 80042f2:	75fb      	strb	r3, [r7, #23]
      break;
 80042f4:	bf00      	nop
  }

  return result;
 80042f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3718      	adds	r7, #24
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	f023 0201 	bic.w	r2, r3, #1
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f023 0303 	bic.w	r3, r3, #3
 800432e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4313      	orrs	r3, r2
 800433c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f023 0202 	bic.w	r2, r3, #2
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	4313      	orrs	r3, r2
 800434a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	f023 0201 	bic.w	r2, r3, #1
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	4313      	orrs	r3, r2
 8004358:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a1c      	ldr	r2, [pc, #112]	; (80043d0 <OC1Config+0xd0>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d003      	beq.n	800436a <OC1Config+0x6a>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a1b      	ldr	r2, [pc, #108]	; (80043d4 <OC1Config+0xd4>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d11e      	bne.n	80043a8 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	f023 0208 	bic.w	r2, r3, #8
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4313      	orrs	r3, r2
 8004378:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f023 0204 	bic.w	r2, r3, #4
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4313      	orrs	r3, r2
 8004388:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	4313      	orrs	r3, r2
 8004396:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	4313      	orrs	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	4619      	mov	r1, r3
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7ff fe85 	bl	80040ca <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3718      	adds	r7, #24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	40010000 	.word	0x40010000
 80043d4:	40010400 	.word	0x40010400

080043d8 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	f023 0210 	bic.w	r2, r3, #16
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004406:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	021b      	lsls	r3, r3, #8
 8004414:	4313      	orrs	r3, r2
 8004416:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	f023 0220 	bic.w	r2, r3, #32
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	011b      	lsls	r3, r3, #4
 8004424:	4313      	orrs	r3, r2
 8004426:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f023 0210 	bic.w	r2, r3, #16
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	011b      	lsls	r3, r3, #4
 8004434:	4313      	orrs	r3, r2
 8004436:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a1d      	ldr	r2, [pc, #116]	; (80044b0 <OC2Config+0xd8>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d003      	beq.n	8004448 <OC2Config+0x70>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a1c      	ldr	r2, [pc, #112]	; (80044b4 <OC2Config+0xdc>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d11f      	bne.n	8004488 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	019b      	lsls	r3, r3, #6
 8004454:	4313      	orrs	r3, r2
 8004456:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	019b      	lsls	r3, r3, #6
 8004464:	4313      	orrs	r3, r2
 8004466:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4313      	orrs	r3, r2
 8004476:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	4313      	orrs	r3, r2
 8004486:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	4619      	mov	r1, r3
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7ff fe23 	bl	80040e6 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3718      	adds	r7, #24
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	40010000 	.word	0x40010000
 80044b4:	40010400 	.word	0x40010400

080044b8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f023 0303 	bic.w	r3, r3, #3
 80044e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	021b      	lsls	r3, r3, #8
 8004502:	4313      	orrs	r3, r2
 8004504:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	021b      	lsls	r3, r3, #8
 8004512:	4313      	orrs	r3, r2
 8004514:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a1d      	ldr	r2, [pc, #116]	; (8004590 <OC3Config+0xd8>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d003      	beq.n	8004526 <OC3Config+0x6e>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a1c      	ldr	r2, [pc, #112]	; (8004594 <OC3Config+0xdc>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d11f      	bne.n	8004566 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	029b      	lsls	r3, r3, #10
 8004532:	4313      	orrs	r3, r2
 8004534:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	029b      	lsls	r3, r3, #10
 8004542:	4313      	orrs	r3, r2
 8004544:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	011b      	lsls	r3, r3, #4
 8004552:	4313      	orrs	r3, r2
 8004554:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	69db      	ldr	r3, [r3, #28]
 8004560:	015b      	lsls	r3, r3, #5
 8004562:	4313      	orrs	r3, r2
 8004564:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	4619      	mov	r1, r3
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f7ff fdc2 	bl	8004102 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3718      	adds	r7, #24
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	40010000 	.word	0x40010000
 8004594:	40010400 	.word	0x40010400

08004598 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	69db      	ldr	r3, [r3, #28]
 80045be:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	021b      	lsls	r3, r3, #8
 80045d4:	4313      	orrs	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	031b      	lsls	r3, r3, #12
 80045e4:	4313      	orrs	r3, r2
 80045e6:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	031b      	lsls	r3, r3, #12
 80045f4:	4313      	orrs	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a11      	ldr	r2, [pc, #68]	; (8004640 <OC4Config+0xa8>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d003      	beq.n	8004608 <OC4Config+0x70>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a10      	ldr	r2, [pc, #64]	; (8004644 <OC4Config+0xac>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d107      	bne.n	8004618 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	019b      	lsls	r3, r3, #6
 8004614:	4313      	orrs	r3, r2
 8004616:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	4619      	mov	r1, r3
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7ff fd77 	bl	800411e <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3718      	adds	r7, #24
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	40010000 	.word	0x40010000
 8004644:	40010400 	.word	0x40010400

08004648 <LL_USART_IsEnabled>:
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004658:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800465c:	bf0c      	ite	eq
 800465e:	2301      	moveq	r3, #1
 8004660:	2300      	movne	r3, #0
 8004662:	b2db      	uxtb	r3, r3
}
 8004664:	4618      	mov	r0, r3
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <LL_USART_SetStopBitsLength>:
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	431a      	orrs	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	611a      	str	r2, [r3, #16]
}
 800468a:	bf00      	nop
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <LL_USART_SetHWFlowCtrl>:
{
 8004696:	b480      	push	{r7}
 8004698:	b083      	sub	sp, #12
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
 800469e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	431a      	orrs	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	615a      	str	r2, [r3, #20]
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <LL_USART_SetBaudRate>:
{
 80046bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046c0:	b085      	sub	sp, #20
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	60f8      	str	r0, [r7, #12]
 80046c6:	60b9      	str	r1, [r7, #8]
 80046c8:	607a      	str	r2, [r7, #4]
 80046ca:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046d2:	f040 80c1 	bne.w	8004858 <LL_USART_SetBaudRate+0x19c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	461d      	mov	r5, r3
 80046da:	f04f 0600 	mov.w	r6, #0
 80046de:	46a8      	mov	r8, r5
 80046e0:	46b1      	mov	r9, r6
 80046e2:	eb18 0308 	adds.w	r3, r8, r8
 80046e6:	eb49 0409 	adc.w	r4, r9, r9
 80046ea:	4698      	mov	r8, r3
 80046ec:	46a1      	mov	r9, r4
 80046ee:	eb18 0805 	adds.w	r8, r8, r5
 80046f2:	eb49 0906 	adc.w	r9, r9, r6
 80046f6:	f04f 0100 	mov.w	r1, #0
 80046fa:	f04f 0200 	mov.w	r2, #0
 80046fe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004702:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004706:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800470a:	4688      	mov	r8, r1
 800470c:	4691      	mov	r9, r2
 800470e:	eb18 0005 	adds.w	r0, r8, r5
 8004712:	eb49 0106 	adc.w	r1, r9, r6
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	461d      	mov	r5, r3
 800471a:	f04f 0600 	mov.w	r6, #0
 800471e:	196b      	adds	r3, r5, r5
 8004720:	eb46 0406 	adc.w	r4, r6, r6
 8004724:	461a      	mov	r2, r3
 8004726:	4623      	mov	r3, r4
 8004728:	f7fc fa8e 	bl	8000c48 <__aeabi_uldivmod>
 800472c:	4603      	mov	r3, r0
 800472e:	460c      	mov	r4, r1
 8004730:	461a      	mov	r2, r3
 8004732:	4bb5      	ldr	r3, [pc, #724]	; (8004a08 <LL_USART_SetBaudRate+0x34c>)
 8004734:	fba3 2302 	umull	r2, r3, r3, r2
 8004738:	095b      	lsrs	r3, r3, #5
 800473a:	b29b      	uxth	r3, r3
 800473c:	011b      	lsls	r3, r3, #4
 800473e:	fa1f f883 	uxth.w	r8, r3
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	461d      	mov	r5, r3
 8004746:	f04f 0600 	mov.w	r6, #0
 800474a:	46a9      	mov	r9, r5
 800474c:	46b2      	mov	sl, r6
 800474e:	eb19 0309 	adds.w	r3, r9, r9
 8004752:	eb4a 040a 	adc.w	r4, sl, sl
 8004756:	4699      	mov	r9, r3
 8004758:	46a2      	mov	sl, r4
 800475a:	eb19 0905 	adds.w	r9, r9, r5
 800475e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004762:	f04f 0100 	mov.w	r1, #0
 8004766:	f04f 0200 	mov.w	r2, #0
 800476a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800476e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004772:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004776:	4689      	mov	r9, r1
 8004778:	4692      	mov	sl, r2
 800477a:	eb19 0005 	adds.w	r0, r9, r5
 800477e:	eb4a 0106 	adc.w	r1, sl, r6
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	461d      	mov	r5, r3
 8004786:	f04f 0600 	mov.w	r6, #0
 800478a:	196b      	adds	r3, r5, r5
 800478c:	eb46 0406 	adc.w	r4, r6, r6
 8004790:	461a      	mov	r2, r3
 8004792:	4623      	mov	r3, r4
 8004794:	f7fc fa58 	bl	8000c48 <__aeabi_uldivmod>
 8004798:	4603      	mov	r3, r0
 800479a:	460c      	mov	r4, r1
 800479c:	461a      	mov	r2, r3
 800479e:	4b9a      	ldr	r3, [pc, #616]	; (8004a08 <LL_USART_SetBaudRate+0x34c>)
 80047a0:	fba3 1302 	umull	r1, r3, r3, r2
 80047a4:	095b      	lsrs	r3, r3, #5
 80047a6:	2164      	movs	r1, #100	; 0x64
 80047a8:	fb01 f303 	mul.w	r3, r1, r3
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	00db      	lsls	r3, r3, #3
 80047b0:	3332      	adds	r3, #50	; 0x32
 80047b2:	4a95      	ldr	r2, [pc, #596]	; (8004a08 <LL_USART_SetBaudRate+0x34c>)
 80047b4:	fba2 2303 	umull	r2, r3, r2, r3
 80047b8:	095b      	lsrs	r3, r3, #5
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	005b      	lsls	r3, r3, #1
 80047be:	b29b      	uxth	r3, r3
 80047c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	4443      	add	r3, r8
 80047c8:	fa1f f883 	uxth.w	r8, r3
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	461d      	mov	r5, r3
 80047d0:	f04f 0600 	mov.w	r6, #0
 80047d4:	46a9      	mov	r9, r5
 80047d6:	46b2      	mov	sl, r6
 80047d8:	eb19 0309 	adds.w	r3, r9, r9
 80047dc:	eb4a 040a 	adc.w	r4, sl, sl
 80047e0:	4699      	mov	r9, r3
 80047e2:	46a2      	mov	sl, r4
 80047e4:	eb19 0905 	adds.w	r9, r9, r5
 80047e8:	eb4a 0a06 	adc.w	sl, sl, r6
 80047ec:	f04f 0100 	mov.w	r1, #0
 80047f0:	f04f 0200 	mov.w	r2, #0
 80047f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80047fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004800:	4689      	mov	r9, r1
 8004802:	4692      	mov	sl, r2
 8004804:	eb19 0005 	adds.w	r0, r9, r5
 8004808:	eb4a 0106 	adc.w	r1, sl, r6
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	461d      	mov	r5, r3
 8004810:	f04f 0600 	mov.w	r6, #0
 8004814:	196b      	adds	r3, r5, r5
 8004816:	eb46 0406 	adc.w	r4, r6, r6
 800481a:	461a      	mov	r2, r3
 800481c:	4623      	mov	r3, r4
 800481e:	f7fc fa13 	bl	8000c48 <__aeabi_uldivmod>
 8004822:	4603      	mov	r3, r0
 8004824:	460c      	mov	r4, r1
 8004826:	461a      	mov	r2, r3
 8004828:	4b77      	ldr	r3, [pc, #476]	; (8004a08 <LL_USART_SetBaudRate+0x34c>)
 800482a:	fba3 1302 	umull	r1, r3, r3, r2
 800482e:	095b      	lsrs	r3, r3, #5
 8004830:	2164      	movs	r1, #100	; 0x64
 8004832:	fb01 f303 	mul.w	r3, r1, r3
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	00db      	lsls	r3, r3, #3
 800483a:	3332      	adds	r3, #50	; 0x32
 800483c:	4a72      	ldr	r2, [pc, #456]	; (8004a08 <LL_USART_SetBaudRate+0x34c>)
 800483e:	fba2 2303 	umull	r2, r3, r2, r3
 8004842:	095b      	lsrs	r3, r3, #5
 8004844:	b29b      	uxth	r3, r3
 8004846:	f003 0307 	and.w	r3, r3, #7
 800484a:	b29b      	uxth	r3, r3
 800484c:	4443      	add	r3, r8
 800484e:	b29b      	uxth	r3, r3
 8004850:	461a      	mov	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	609a      	str	r2, [r3, #8]
}
 8004856:	e0d2      	b.n	80049fe <LL_USART_SetBaudRate+0x342>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	469a      	mov	sl, r3
 800485c:	f04f 0b00 	mov.w	fp, #0
 8004860:	46d0      	mov	r8, sl
 8004862:	46d9      	mov	r9, fp
 8004864:	eb18 0308 	adds.w	r3, r8, r8
 8004868:	eb49 0409 	adc.w	r4, r9, r9
 800486c:	4698      	mov	r8, r3
 800486e:	46a1      	mov	r9, r4
 8004870:	eb18 080a 	adds.w	r8, r8, sl
 8004874:	eb49 090b 	adc.w	r9, r9, fp
 8004878:	f04f 0100 	mov.w	r1, #0
 800487c:	f04f 0200 	mov.w	r2, #0
 8004880:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004884:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004888:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800488c:	4688      	mov	r8, r1
 800488e:	4691      	mov	r9, r2
 8004890:	eb1a 0508 	adds.w	r5, sl, r8
 8004894:	eb4b 0609 	adc.w	r6, fp, r9
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	4619      	mov	r1, r3
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	f04f 0400 	mov.w	r4, #0
 80048a8:	0094      	lsls	r4, r2, #2
 80048aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80048ae:	008b      	lsls	r3, r1, #2
 80048b0:	461a      	mov	r2, r3
 80048b2:	4623      	mov	r3, r4
 80048b4:	4628      	mov	r0, r5
 80048b6:	4631      	mov	r1, r6
 80048b8:	f7fc f9c6 	bl	8000c48 <__aeabi_uldivmod>
 80048bc:	4603      	mov	r3, r0
 80048be:	460c      	mov	r4, r1
 80048c0:	461a      	mov	r2, r3
 80048c2:	4b51      	ldr	r3, [pc, #324]	; (8004a08 <LL_USART_SetBaudRate+0x34c>)
 80048c4:	fba3 2302 	umull	r2, r3, r3, r2
 80048c8:	095b      	lsrs	r3, r3, #5
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	011b      	lsls	r3, r3, #4
 80048ce:	fa1f f883 	uxth.w	r8, r3
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	469b      	mov	fp, r3
 80048d6:	f04f 0c00 	mov.w	ip, #0
 80048da:	46d9      	mov	r9, fp
 80048dc:	46e2      	mov	sl, ip
 80048de:	eb19 0309 	adds.w	r3, r9, r9
 80048e2:	eb4a 040a 	adc.w	r4, sl, sl
 80048e6:	4699      	mov	r9, r3
 80048e8:	46a2      	mov	sl, r4
 80048ea:	eb19 090b 	adds.w	r9, r9, fp
 80048ee:	eb4a 0a0c 	adc.w	sl, sl, ip
 80048f2:	f04f 0100 	mov.w	r1, #0
 80048f6:	f04f 0200 	mov.w	r2, #0
 80048fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004902:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004906:	4689      	mov	r9, r1
 8004908:	4692      	mov	sl, r2
 800490a:	eb1b 0509 	adds.w	r5, fp, r9
 800490e:	eb4c 060a 	adc.w	r6, ip, sl
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	4619      	mov	r1, r3
 8004916:	f04f 0200 	mov.w	r2, #0
 800491a:	f04f 0300 	mov.w	r3, #0
 800491e:	f04f 0400 	mov.w	r4, #0
 8004922:	0094      	lsls	r4, r2, #2
 8004924:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004928:	008b      	lsls	r3, r1, #2
 800492a:	461a      	mov	r2, r3
 800492c:	4623      	mov	r3, r4
 800492e:	4628      	mov	r0, r5
 8004930:	4631      	mov	r1, r6
 8004932:	f7fc f989 	bl	8000c48 <__aeabi_uldivmod>
 8004936:	4603      	mov	r3, r0
 8004938:	460c      	mov	r4, r1
 800493a:	461a      	mov	r2, r3
 800493c:	4b32      	ldr	r3, [pc, #200]	; (8004a08 <LL_USART_SetBaudRate+0x34c>)
 800493e:	fba3 1302 	umull	r1, r3, r3, r2
 8004942:	095b      	lsrs	r3, r3, #5
 8004944:	2164      	movs	r1, #100	; 0x64
 8004946:	fb01 f303 	mul.w	r3, r1, r3
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	011b      	lsls	r3, r3, #4
 800494e:	3332      	adds	r3, #50	; 0x32
 8004950:	4a2d      	ldr	r2, [pc, #180]	; (8004a08 <LL_USART_SetBaudRate+0x34c>)
 8004952:	fba2 2303 	umull	r2, r3, r2, r3
 8004956:	095b      	lsrs	r3, r3, #5
 8004958:	b29b      	uxth	r3, r3
 800495a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800495e:	b29b      	uxth	r3, r3
 8004960:	4443      	add	r3, r8
 8004962:	fa1f f883 	uxth.w	r8, r3
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	469b      	mov	fp, r3
 800496a:	f04f 0c00 	mov.w	ip, #0
 800496e:	46d9      	mov	r9, fp
 8004970:	46e2      	mov	sl, ip
 8004972:	eb19 0309 	adds.w	r3, r9, r9
 8004976:	eb4a 040a 	adc.w	r4, sl, sl
 800497a:	4699      	mov	r9, r3
 800497c:	46a2      	mov	sl, r4
 800497e:	eb19 090b 	adds.w	r9, r9, fp
 8004982:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004986:	f04f 0100 	mov.w	r1, #0
 800498a:	f04f 0200 	mov.w	r2, #0
 800498e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004992:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004996:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800499a:	4689      	mov	r9, r1
 800499c:	4692      	mov	sl, r2
 800499e:	eb1b 0509 	adds.w	r5, fp, r9
 80049a2:	eb4c 060a 	adc.w	r6, ip, sl
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	4619      	mov	r1, r3
 80049aa:	f04f 0200 	mov.w	r2, #0
 80049ae:	f04f 0300 	mov.w	r3, #0
 80049b2:	f04f 0400 	mov.w	r4, #0
 80049b6:	0094      	lsls	r4, r2, #2
 80049b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80049bc:	008b      	lsls	r3, r1, #2
 80049be:	461a      	mov	r2, r3
 80049c0:	4623      	mov	r3, r4
 80049c2:	4628      	mov	r0, r5
 80049c4:	4631      	mov	r1, r6
 80049c6:	f7fc f93f 	bl	8000c48 <__aeabi_uldivmod>
 80049ca:	4603      	mov	r3, r0
 80049cc:	460c      	mov	r4, r1
 80049ce:	461a      	mov	r2, r3
 80049d0:	4b0d      	ldr	r3, [pc, #52]	; (8004a08 <LL_USART_SetBaudRate+0x34c>)
 80049d2:	fba3 1302 	umull	r1, r3, r3, r2
 80049d6:	095b      	lsrs	r3, r3, #5
 80049d8:	2164      	movs	r1, #100	; 0x64
 80049da:	fb01 f303 	mul.w	r3, r1, r3
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	011b      	lsls	r3, r3, #4
 80049e2:	3332      	adds	r3, #50	; 0x32
 80049e4:	4a08      	ldr	r2, [pc, #32]	; (8004a08 <LL_USART_SetBaudRate+0x34c>)
 80049e6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ea:	095b      	lsrs	r3, r3, #5
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	f003 030f 	and.w	r3, r3, #15
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	4443      	add	r3, r8
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	461a      	mov	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	609a      	str	r2, [r3, #8]
}
 80049fe:	bf00      	nop
 8004a00:	3714      	adds	r7, #20
 8004a02:	46bd      	mov	sp, r7
 8004a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a08:	51eb851f 	.word	0x51eb851f

08004a0c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b088      	sub	sp, #32
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7ff fe12 	bl	8004648 <LL_USART_IsEnabled>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d15e      	bne.n	8004ae8 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004a32:	f023 030c 	bic.w	r3, r3, #12
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	6851      	ldr	r1, [r2, #4]
 8004a3a:	683a      	ldr	r2, [r7, #0]
 8004a3c:	68d2      	ldr	r2, [r2, #12]
 8004a3e:	4311      	orrs	r1, r2
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	6912      	ldr	r2, [r2, #16]
 8004a44:	4311      	orrs	r1, r2
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	6992      	ldr	r2, [r2, #24]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	4619      	mov	r1, r3
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f7ff fe09 	bl	8004670 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	4619      	mov	r1, r3
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f7ff fe16 	bl	8004696 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004a6a:	f107 0308 	add.w	r3, r7, #8
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7ff f9c4 	bl	8003dfc <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a1f      	ldr	r2, [pc, #124]	; (8004af4 <LL_USART_Init+0xe8>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d102      	bne.n	8004a82 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	61bb      	str	r3, [r7, #24]
 8004a80:	e021      	b.n	8004ac6 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a1c      	ldr	r2, [pc, #112]	; (8004af8 <LL_USART_Init+0xec>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d102      	bne.n	8004a90 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	61bb      	str	r3, [r7, #24]
 8004a8e:	e01a      	b.n	8004ac6 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a1a      	ldr	r2, [pc, #104]	; (8004afc <LL_USART_Init+0xf0>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d102      	bne.n	8004a9e <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	61bb      	str	r3, [r7, #24]
 8004a9c:	e013      	b.n	8004ac6 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a17      	ldr	r2, [pc, #92]	; (8004b00 <LL_USART_Init+0xf4>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d102      	bne.n	8004aac <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	61bb      	str	r3, [r7, #24]
 8004aaa:	e00c      	b.n	8004ac6 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a15      	ldr	r2, [pc, #84]	; (8004b04 <LL_USART_Init+0xf8>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d102      	bne.n	8004aba <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	61bb      	str	r3, [r7, #24]
 8004ab8:	e005      	b.n	8004ac6 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a12      	ldr	r2, [pc, #72]	; (8004b08 <LL_USART_Init+0xfc>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d101      	bne.n	8004ac6 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00d      	beq.n	8004ae8 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d009      	beq.n	8004ae8 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	699a      	ldr	r2, [r3, #24]
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	69b9      	ldr	r1, [r7, #24]
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7ff fdea 	bl	80046bc <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004ae8:	7ffb      	ldrb	r3, [r7, #31]
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3720      	adds	r7, #32
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	40011000 	.word	0x40011000
 8004af8:	40004400 	.word	0x40004400
 8004afc:	40004800 	.word	0x40004800
 8004b00:	40011400 	.word	0x40011400
 8004b04:	40004c00 	.word	0x40004c00
 8004b08:	40005000 	.word	0x40005000

08004b0c <__errno>:
 8004b0c:	4b01      	ldr	r3, [pc, #4]	; (8004b14 <__errno+0x8>)
 8004b0e:	6818      	ldr	r0, [r3, #0]
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	2000000c 	.word	0x2000000c

08004b18 <__libc_init_array>:
 8004b18:	b570      	push	{r4, r5, r6, lr}
 8004b1a:	4e0d      	ldr	r6, [pc, #52]	; (8004b50 <__libc_init_array+0x38>)
 8004b1c:	4c0d      	ldr	r4, [pc, #52]	; (8004b54 <__libc_init_array+0x3c>)
 8004b1e:	1ba4      	subs	r4, r4, r6
 8004b20:	10a4      	asrs	r4, r4, #2
 8004b22:	2500      	movs	r5, #0
 8004b24:	42a5      	cmp	r5, r4
 8004b26:	d109      	bne.n	8004b3c <__libc_init_array+0x24>
 8004b28:	4e0b      	ldr	r6, [pc, #44]	; (8004b58 <__libc_init_array+0x40>)
 8004b2a:	4c0c      	ldr	r4, [pc, #48]	; (8004b5c <__libc_init_array+0x44>)
 8004b2c:	f003 f8b0 	bl	8007c90 <_init>
 8004b30:	1ba4      	subs	r4, r4, r6
 8004b32:	10a4      	asrs	r4, r4, #2
 8004b34:	2500      	movs	r5, #0
 8004b36:	42a5      	cmp	r5, r4
 8004b38:	d105      	bne.n	8004b46 <__libc_init_array+0x2e>
 8004b3a:	bd70      	pop	{r4, r5, r6, pc}
 8004b3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b40:	4798      	blx	r3
 8004b42:	3501      	adds	r5, #1
 8004b44:	e7ee      	b.n	8004b24 <__libc_init_array+0xc>
 8004b46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b4a:	4798      	blx	r3
 8004b4c:	3501      	adds	r5, #1
 8004b4e:	e7f2      	b.n	8004b36 <__libc_init_array+0x1e>
 8004b50:	08008140 	.word	0x08008140
 8004b54:	08008140 	.word	0x08008140
 8004b58:	08008140 	.word	0x08008140
 8004b5c:	08008144 	.word	0x08008144

08004b60 <memset>:
 8004b60:	4402      	add	r2, r0
 8004b62:	4603      	mov	r3, r0
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d100      	bne.n	8004b6a <memset+0xa>
 8004b68:	4770      	bx	lr
 8004b6a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b6e:	e7f9      	b.n	8004b64 <memset+0x4>

08004b70 <__cvt>:
 8004b70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b74:	ec55 4b10 	vmov	r4, r5, d0
 8004b78:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004b7a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004b7e:	2d00      	cmp	r5, #0
 8004b80:	460e      	mov	r6, r1
 8004b82:	4691      	mov	r9, r2
 8004b84:	4619      	mov	r1, r3
 8004b86:	bfb8      	it	lt
 8004b88:	4622      	movlt	r2, r4
 8004b8a:	462b      	mov	r3, r5
 8004b8c:	f027 0720 	bic.w	r7, r7, #32
 8004b90:	bfbb      	ittet	lt
 8004b92:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004b96:	461d      	movlt	r5, r3
 8004b98:	2300      	movge	r3, #0
 8004b9a:	232d      	movlt	r3, #45	; 0x2d
 8004b9c:	bfb8      	it	lt
 8004b9e:	4614      	movlt	r4, r2
 8004ba0:	2f46      	cmp	r7, #70	; 0x46
 8004ba2:	700b      	strb	r3, [r1, #0]
 8004ba4:	d004      	beq.n	8004bb0 <__cvt+0x40>
 8004ba6:	2f45      	cmp	r7, #69	; 0x45
 8004ba8:	d100      	bne.n	8004bac <__cvt+0x3c>
 8004baa:	3601      	adds	r6, #1
 8004bac:	2102      	movs	r1, #2
 8004bae:	e000      	b.n	8004bb2 <__cvt+0x42>
 8004bb0:	2103      	movs	r1, #3
 8004bb2:	ab03      	add	r3, sp, #12
 8004bb4:	9301      	str	r3, [sp, #4]
 8004bb6:	ab02      	add	r3, sp, #8
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	4632      	mov	r2, r6
 8004bbc:	4653      	mov	r3, sl
 8004bbe:	ec45 4b10 	vmov	d0, r4, r5
 8004bc2:	f000 fdf9 	bl	80057b8 <_dtoa_r>
 8004bc6:	2f47      	cmp	r7, #71	; 0x47
 8004bc8:	4680      	mov	r8, r0
 8004bca:	d102      	bne.n	8004bd2 <__cvt+0x62>
 8004bcc:	f019 0f01 	tst.w	r9, #1
 8004bd0:	d026      	beq.n	8004c20 <__cvt+0xb0>
 8004bd2:	2f46      	cmp	r7, #70	; 0x46
 8004bd4:	eb08 0906 	add.w	r9, r8, r6
 8004bd8:	d111      	bne.n	8004bfe <__cvt+0x8e>
 8004bda:	f898 3000 	ldrb.w	r3, [r8]
 8004bde:	2b30      	cmp	r3, #48	; 0x30
 8004be0:	d10a      	bne.n	8004bf8 <__cvt+0x88>
 8004be2:	2200      	movs	r2, #0
 8004be4:	2300      	movs	r3, #0
 8004be6:	4620      	mov	r0, r4
 8004be8:	4629      	mov	r1, r5
 8004bea:	f7fb ff6d 	bl	8000ac8 <__aeabi_dcmpeq>
 8004bee:	b918      	cbnz	r0, 8004bf8 <__cvt+0x88>
 8004bf0:	f1c6 0601 	rsb	r6, r6, #1
 8004bf4:	f8ca 6000 	str.w	r6, [sl]
 8004bf8:	f8da 3000 	ldr.w	r3, [sl]
 8004bfc:	4499      	add	r9, r3
 8004bfe:	2200      	movs	r2, #0
 8004c00:	2300      	movs	r3, #0
 8004c02:	4620      	mov	r0, r4
 8004c04:	4629      	mov	r1, r5
 8004c06:	f7fb ff5f 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c0a:	b938      	cbnz	r0, 8004c1c <__cvt+0xac>
 8004c0c:	2230      	movs	r2, #48	; 0x30
 8004c0e:	9b03      	ldr	r3, [sp, #12]
 8004c10:	454b      	cmp	r3, r9
 8004c12:	d205      	bcs.n	8004c20 <__cvt+0xb0>
 8004c14:	1c59      	adds	r1, r3, #1
 8004c16:	9103      	str	r1, [sp, #12]
 8004c18:	701a      	strb	r2, [r3, #0]
 8004c1a:	e7f8      	b.n	8004c0e <__cvt+0x9e>
 8004c1c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004c20:	9b03      	ldr	r3, [sp, #12]
 8004c22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c24:	eba3 0308 	sub.w	r3, r3, r8
 8004c28:	4640      	mov	r0, r8
 8004c2a:	6013      	str	r3, [r2, #0]
 8004c2c:	b004      	add	sp, #16
 8004c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004c32 <__exponent>:
 8004c32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c34:	2900      	cmp	r1, #0
 8004c36:	4604      	mov	r4, r0
 8004c38:	bfba      	itte	lt
 8004c3a:	4249      	neglt	r1, r1
 8004c3c:	232d      	movlt	r3, #45	; 0x2d
 8004c3e:	232b      	movge	r3, #43	; 0x2b
 8004c40:	2909      	cmp	r1, #9
 8004c42:	f804 2b02 	strb.w	r2, [r4], #2
 8004c46:	7043      	strb	r3, [r0, #1]
 8004c48:	dd20      	ble.n	8004c8c <__exponent+0x5a>
 8004c4a:	f10d 0307 	add.w	r3, sp, #7
 8004c4e:	461f      	mov	r7, r3
 8004c50:	260a      	movs	r6, #10
 8004c52:	fb91 f5f6 	sdiv	r5, r1, r6
 8004c56:	fb06 1115 	mls	r1, r6, r5, r1
 8004c5a:	3130      	adds	r1, #48	; 0x30
 8004c5c:	2d09      	cmp	r5, #9
 8004c5e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004c62:	f103 32ff 	add.w	r2, r3, #4294967295
 8004c66:	4629      	mov	r1, r5
 8004c68:	dc09      	bgt.n	8004c7e <__exponent+0x4c>
 8004c6a:	3130      	adds	r1, #48	; 0x30
 8004c6c:	3b02      	subs	r3, #2
 8004c6e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004c72:	42bb      	cmp	r3, r7
 8004c74:	4622      	mov	r2, r4
 8004c76:	d304      	bcc.n	8004c82 <__exponent+0x50>
 8004c78:	1a10      	subs	r0, r2, r0
 8004c7a:	b003      	add	sp, #12
 8004c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c7e:	4613      	mov	r3, r2
 8004c80:	e7e7      	b.n	8004c52 <__exponent+0x20>
 8004c82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c86:	f804 2b01 	strb.w	r2, [r4], #1
 8004c8a:	e7f2      	b.n	8004c72 <__exponent+0x40>
 8004c8c:	2330      	movs	r3, #48	; 0x30
 8004c8e:	4419      	add	r1, r3
 8004c90:	7083      	strb	r3, [r0, #2]
 8004c92:	1d02      	adds	r2, r0, #4
 8004c94:	70c1      	strb	r1, [r0, #3]
 8004c96:	e7ef      	b.n	8004c78 <__exponent+0x46>

08004c98 <_printf_float>:
 8004c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c9c:	b08d      	sub	sp, #52	; 0x34
 8004c9e:	460c      	mov	r4, r1
 8004ca0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004ca4:	4616      	mov	r6, r2
 8004ca6:	461f      	mov	r7, r3
 8004ca8:	4605      	mov	r5, r0
 8004caa:	f001 fcb7 	bl	800661c <_localeconv_r>
 8004cae:	6803      	ldr	r3, [r0, #0]
 8004cb0:	9304      	str	r3, [sp, #16]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7fb fa8c 	bl	80001d0 <strlen>
 8004cb8:	2300      	movs	r3, #0
 8004cba:	930a      	str	r3, [sp, #40]	; 0x28
 8004cbc:	f8d8 3000 	ldr.w	r3, [r8]
 8004cc0:	9005      	str	r0, [sp, #20]
 8004cc2:	3307      	adds	r3, #7
 8004cc4:	f023 0307 	bic.w	r3, r3, #7
 8004cc8:	f103 0208 	add.w	r2, r3, #8
 8004ccc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004cd0:	f8d4 b000 	ldr.w	fp, [r4]
 8004cd4:	f8c8 2000 	str.w	r2, [r8]
 8004cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cdc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004ce0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004ce4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004ce8:	9307      	str	r3, [sp, #28]
 8004cea:	f8cd 8018 	str.w	r8, [sp, #24]
 8004cee:	f04f 32ff 	mov.w	r2, #4294967295
 8004cf2:	4ba7      	ldr	r3, [pc, #668]	; (8004f90 <_printf_float+0x2f8>)
 8004cf4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004cf8:	f7fb ff18 	bl	8000b2c <__aeabi_dcmpun>
 8004cfc:	bb70      	cbnz	r0, 8004d5c <_printf_float+0xc4>
 8004cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8004d02:	4ba3      	ldr	r3, [pc, #652]	; (8004f90 <_printf_float+0x2f8>)
 8004d04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d08:	f7fb fef2 	bl	8000af0 <__aeabi_dcmple>
 8004d0c:	bb30      	cbnz	r0, 8004d5c <_printf_float+0xc4>
 8004d0e:	2200      	movs	r2, #0
 8004d10:	2300      	movs	r3, #0
 8004d12:	4640      	mov	r0, r8
 8004d14:	4649      	mov	r1, r9
 8004d16:	f7fb fee1 	bl	8000adc <__aeabi_dcmplt>
 8004d1a:	b110      	cbz	r0, 8004d22 <_printf_float+0x8a>
 8004d1c:	232d      	movs	r3, #45	; 0x2d
 8004d1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d22:	4a9c      	ldr	r2, [pc, #624]	; (8004f94 <_printf_float+0x2fc>)
 8004d24:	4b9c      	ldr	r3, [pc, #624]	; (8004f98 <_printf_float+0x300>)
 8004d26:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004d2a:	bf8c      	ite	hi
 8004d2c:	4690      	movhi	r8, r2
 8004d2e:	4698      	movls	r8, r3
 8004d30:	2303      	movs	r3, #3
 8004d32:	f02b 0204 	bic.w	r2, fp, #4
 8004d36:	6123      	str	r3, [r4, #16]
 8004d38:	6022      	str	r2, [r4, #0]
 8004d3a:	f04f 0900 	mov.w	r9, #0
 8004d3e:	9700      	str	r7, [sp, #0]
 8004d40:	4633      	mov	r3, r6
 8004d42:	aa0b      	add	r2, sp, #44	; 0x2c
 8004d44:	4621      	mov	r1, r4
 8004d46:	4628      	mov	r0, r5
 8004d48:	f000 f9e6 	bl	8005118 <_printf_common>
 8004d4c:	3001      	adds	r0, #1
 8004d4e:	f040 808d 	bne.w	8004e6c <_printf_float+0x1d4>
 8004d52:	f04f 30ff 	mov.w	r0, #4294967295
 8004d56:	b00d      	add	sp, #52	; 0x34
 8004d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d5c:	4642      	mov	r2, r8
 8004d5e:	464b      	mov	r3, r9
 8004d60:	4640      	mov	r0, r8
 8004d62:	4649      	mov	r1, r9
 8004d64:	f7fb fee2 	bl	8000b2c <__aeabi_dcmpun>
 8004d68:	b110      	cbz	r0, 8004d70 <_printf_float+0xd8>
 8004d6a:	4a8c      	ldr	r2, [pc, #560]	; (8004f9c <_printf_float+0x304>)
 8004d6c:	4b8c      	ldr	r3, [pc, #560]	; (8004fa0 <_printf_float+0x308>)
 8004d6e:	e7da      	b.n	8004d26 <_printf_float+0x8e>
 8004d70:	6861      	ldr	r1, [r4, #4]
 8004d72:	1c4b      	adds	r3, r1, #1
 8004d74:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004d78:	a80a      	add	r0, sp, #40	; 0x28
 8004d7a:	d13e      	bne.n	8004dfa <_printf_float+0x162>
 8004d7c:	2306      	movs	r3, #6
 8004d7e:	6063      	str	r3, [r4, #4]
 8004d80:	2300      	movs	r3, #0
 8004d82:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004d86:	ab09      	add	r3, sp, #36	; 0x24
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	ec49 8b10 	vmov	d0, r8, r9
 8004d8e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004d92:	6022      	str	r2, [r4, #0]
 8004d94:	f8cd a004 	str.w	sl, [sp, #4]
 8004d98:	6861      	ldr	r1, [r4, #4]
 8004d9a:	4628      	mov	r0, r5
 8004d9c:	f7ff fee8 	bl	8004b70 <__cvt>
 8004da0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004da4:	2b47      	cmp	r3, #71	; 0x47
 8004da6:	4680      	mov	r8, r0
 8004da8:	d109      	bne.n	8004dbe <_printf_float+0x126>
 8004daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dac:	1cd8      	adds	r0, r3, #3
 8004dae:	db02      	blt.n	8004db6 <_printf_float+0x11e>
 8004db0:	6862      	ldr	r2, [r4, #4]
 8004db2:	4293      	cmp	r3, r2
 8004db4:	dd47      	ble.n	8004e46 <_printf_float+0x1ae>
 8004db6:	f1aa 0a02 	sub.w	sl, sl, #2
 8004dba:	fa5f fa8a 	uxtb.w	sl, sl
 8004dbe:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004dc2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004dc4:	d824      	bhi.n	8004e10 <_printf_float+0x178>
 8004dc6:	3901      	subs	r1, #1
 8004dc8:	4652      	mov	r2, sl
 8004dca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004dce:	9109      	str	r1, [sp, #36]	; 0x24
 8004dd0:	f7ff ff2f 	bl	8004c32 <__exponent>
 8004dd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004dd6:	1813      	adds	r3, r2, r0
 8004dd8:	2a01      	cmp	r2, #1
 8004dda:	4681      	mov	r9, r0
 8004ddc:	6123      	str	r3, [r4, #16]
 8004dde:	dc02      	bgt.n	8004de6 <_printf_float+0x14e>
 8004de0:	6822      	ldr	r2, [r4, #0]
 8004de2:	07d1      	lsls	r1, r2, #31
 8004de4:	d501      	bpl.n	8004dea <_printf_float+0x152>
 8004de6:	3301      	adds	r3, #1
 8004de8:	6123      	str	r3, [r4, #16]
 8004dea:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d0a5      	beq.n	8004d3e <_printf_float+0xa6>
 8004df2:	232d      	movs	r3, #45	; 0x2d
 8004df4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004df8:	e7a1      	b.n	8004d3e <_printf_float+0xa6>
 8004dfa:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004dfe:	f000 8177 	beq.w	80050f0 <_printf_float+0x458>
 8004e02:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004e06:	d1bb      	bne.n	8004d80 <_printf_float+0xe8>
 8004e08:	2900      	cmp	r1, #0
 8004e0a:	d1b9      	bne.n	8004d80 <_printf_float+0xe8>
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e7b6      	b.n	8004d7e <_printf_float+0xe6>
 8004e10:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004e14:	d119      	bne.n	8004e4a <_printf_float+0x1b2>
 8004e16:	2900      	cmp	r1, #0
 8004e18:	6863      	ldr	r3, [r4, #4]
 8004e1a:	dd0c      	ble.n	8004e36 <_printf_float+0x19e>
 8004e1c:	6121      	str	r1, [r4, #16]
 8004e1e:	b913      	cbnz	r3, 8004e26 <_printf_float+0x18e>
 8004e20:	6822      	ldr	r2, [r4, #0]
 8004e22:	07d2      	lsls	r2, r2, #31
 8004e24:	d502      	bpl.n	8004e2c <_printf_float+0x194>
 8004e26:	3301      	adds	r3, #1
 8004e28:	440b      	add	r3, r1
 8004e2a:	6123      	str	r3, [r4, #16]
 8004e2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e2e:	65a3      	str	r3, [r4, #88]	; 0x58
 8004e30:	f04f 0900 	mov.w	r9, #0
 8004e34:	e7d9      	b.n	8004dea <_printf_float+0x152>
 8004e36:	b913      	cbnz	r3, 8004e3e <_printf_float+0x1a6>
 8004e38:	6822      	ldr	r2, [r4, #0]
 8004e3a:	07d0      	lsls	r0, r2, #31
 8004e3c:	d501      	bpl.n	8004e42 <_printf_float+0x1aa>
 8004e3e:	3302      	adds	r3, #2
 8004e40:	e7f3      	b.n	8004e2a <_printf_float+0x192>
 8004e42:	2301      	movs	r3, #1
 8004e44:	e7f1      	b.n	8004e2a <_printf_float+0x192>
 8004e46:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004e4a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	db05      	blt.n	8004e5e <_printf_float+0x1c6>
 8004e52:	6822      	ldr	r2, [r4, #0]
 8004e54:	6123      	str	r3, [r4, #16]
 8004e56:	07d1      	lsls	r1, r2, #31
 8004e58:	d5e8      	bpl.n	8004e2c <_printf_float+0x194>
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	e7e5      	b.n	8004e2a <_printf_float+0x192>
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	bfd4      	ite	le
 8004e62:	f1c3 0302 	rsble	r3, r3, #2
 8004e66:	2301      	movgt	r3, #1
 8004e68:	4413      	add	r3, r2
 8004e6a:	e7de      	b.n	8004e2a <_printf_float+0x192>
 8004e6c:	6823      	ldr	r3, [r4, #0]
 8004e6e:	055a      	lsls	r2, r3, #21
 8004e70:	d407      	bmi.n	8004e82 <_printf_float+0x1ea>
 8004e72:	6923      	ldr	r3, [r4, #16]
 8004e74:	4642      	mov	r2, r8
 8004e76:	4631      	mov	r1, r6
 8004e78:	4628      	mov	r0, r5
 8004e7a:	47b8      	blx	r7
 8004e7c:	3001      	adds	r0, #1
 8004e7e:	d12b      	bne.n	8004ed8 <_printf_float+0x240>
 8004e80:	e767      	b.n	8004d52 <_printf_float+0xba>
 8004e82:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004e86:	f240 80dc 	bls.w	8005042 <_printf_float+0x3aa>
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e92:	f7fb fe19 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e96:	2800      	cmp	r0, #0
 8004e98:	d033      	beq.n	8004f02 <_printf_float+0x26a>
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	4a41      	ldr	r2, [pc, #260]	; (8004fa4 <_printf_float+0x30c>)
 8004e9e:	4631      	mov	r1, r6
 8004ea0:	4628      	mov	r0, r5
 8004ea2:	47b8      	blx	r7
 8004ea4:	3001      	adds	r0, #1
 8004ea6:	f43f af54 	beq.w	8004d52 <_printf_float+0xba>
 8004eaa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	db02      	blt.n	8004eb8 <_printf_float+0x220>
 8004eb2:	6823      	ldr	r3, [r4, #0]
 8004eb4:	07d8      	lsls	r0, r3, #31
 8004eb6:	d50f      	bpl.n	8004ed8 <_printf_float+0x240>
 8004eb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ebc:	4631      	mov	r1, r6
 8004ebe:	4628      	mov	r0, r5
 8004ec0:	47b8      	blx	r7
 8004ec2:	3001      	adds	r0, #1
 8004ec4:	f43f af45 	beq.w	8004d52 <_printf_float+0xba>
 8004ec8:	f04f 0800 	mov.w	r8, #0
 8004ecc:	f104 091a 	add.w	r9, r4, #26
 8004ed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	4543      	cmp	r3, r8
 8004ed6:	dc09      	bgt.n	8004eec <_printf_float+0x254>
 8004ed8:	6823      	ldr	r3, [r4, #0]
 8004eda:	079b      	lsls	r3, r3, #30
 8004edc:	f100 8103 	bmi.w	80050e6 <_printf_float+0x44e>
 8004ee0:	68e0      	ldr	r0, [r4, #12]
 8004ee2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ee4:	4298      	cmp	r0, r3
 8004ee6:	bfb8      	it	lt
 8004ee8:	4618      	movlt	r0, r3
 8004eea:	e734      	b.n	8004d56 <_printf_float+0xbe>
 8004eec:	2301      	movs	r3, #1
 8004eee:	464a      	mov	r2, r9
 8004ef0:	4631      	mov	r1, r6
 8004ef2:	4628      	mov	r0, r5
 8004ef4:	47b8      	blx	r7
 8004ef6:	3001      	adds	r0, #1
 8004ef8:	f43f af2b 	beq.w	8004d52 <_printf_float+0xba>
 8004efc:	f108 0801 	add.w	r8, r8, #1
 8004f00:	e7e6      	b.n	8004ed0 <_printf_float+0x238>
 8004f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	dc2b      	bgt.n	8004f60 <_printf_float+0x2c8>
 8004f08:	2301      	movs	r3, #1
 8004f0a:	4a26      	ldr	r2, [pc, #152]	; (8004fa4 <_printf_float+0x30c>)
 8004f0c:	4631      	mov	r1, r6
 8004f0e:	4628      	mov	r0, r5
 8004f10:	47b8      	blx	r7
 8004f12:	3001      	adds	r0, #1
 8004f14:	f43f af1d 	beq.w	8004d52 <_printf_float+0xba>
 8004f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f1a:	b923      	cbnz	r3, 8004f26 <_printf_float+0x28e>
 8004f1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f1e:	b913      	cbnz	r3, 8004f26 <_printf_float+0x28e>
 8004f20:	6823      	ldr	r3, [r4, #0]
 8004f22:	07d9      	lsls	r1, r3, #31
 8004f24:	d5d8      	bpl.n	8004ed8 <_printf_float+0x240>
 8004f26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f2a:	4631      	mov	r1, r6
 8004f2c:	4628      	mov	r0, r5
 8004f2e:	47b8      	blx	r7
 8004f30:	3001      	adds	r0, #1
 8004f32:	f43f af0e 	beq.w	8004d52 <_printf_float+0xba>
 8004f36:	f04f 0900 	mov.w	r9, #0
 8004f3a:	f104 0a1a 	add.w	sl, r4, #26
 8004f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f40:	425b      	negs	r3, r3
 8004f42:	454b      	cmp	r3, r9
 8004f44:	dc01      	bgt.n	8004f4a <_printf_float+0x2b2>
 8004f46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f48:	e794      	b.n	8004e74 <_printf_float+0x1dc>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	4652      	mov	r2, sl
 8004f4e:	4631      	mov	r1, r6
 8004f50:	4628      	mov	r0, r5
 8004f52:	47b8      	blx	r7
 8004f54:	3001      	adds	r0, #1
 8004f56:	f43f aefc 	beq.w	8004d52 <_printf_float+0xba>
 8004f5a:	f109 0901 	add.w	r9, r9, #1
 8004f5e:	e7ee      	b.n	8004f3e <_printf_float+0x2a6>
 8004f60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f64:	429a      	cmp	r2, r3
 8004f66:	bfa8      	it	ge
 8004f68:	461a      	movge	r2, r3
 8004f6a:	2a00      	cmp	r2, #0
 8004f6c:	4691      	mov	r9, r2
 8004f6e:	dd07      	ble.n	8004f80 <_printf_float+0x2e8>
 8004f70:	4613      	mov	r3, r2
 8004f72:	4631      	mov	r1, r6
 8004f74:	4642      	mov	r2, r8
 8004f76:	4628      	mov	r0, r5
 8004f78:	47b8      	blx	r7
 8004f7a:	3001      	adds	r0, #1
 8004f7c:	f43f aee9 	beq.w	8004d52 <_printf_float+0xba>
 8004f80:	f104 031a 	add.w	r3, r4, #26
 8004f84:	f04f 0b00 	mov.w	fp, #0
 8004f88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f8c:	9306      	str	r3, [sp, #24]
 8004f8e:	e015      	b.n	8004fbc <_printf_float+0x324>
 8004f90:	7fefffff 	.word	0x7fefffff
 8004f94:	08007e58 	.word	0x08007e58
 8004f98:	08007e54 	.word	0x08007e54
 8004f9c:	08007e60 	.word	0x08007e60
 8004fa0:	08007e5c 	.word	0x08007e5c
 8004fa4:	08007e64 	.word	0x08007e64
 8004fa8:	2301      	movs	r3, #1
 8004faa:	9a06      	ldr	r2, [sp, #24]
 8004fac:	4631      	mov	r1, r6
 8004fae:	4628      	mov	r0, r5
 8004fb0:	47b8      	blx	r7
 8004fb2:	3001      	adds	r0, #1
 8004fb4:	f43f aecd 	beq.w	8004d52 <_printf_float+0xba>
 8004fb8:	f10b 0b01 	add.w	fp, fp, #1
 8004fbc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004fc0:	ebaa 0309 	sub.w	r3, sl, r9
 8004fc4:	455b      	cmp	r3, fp
 8004fc6:	dcef      	bgt.n	8004fa8 <_printf_float+0x310>
 8004fc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	44d0      	add	r8, sl
 8004fd0:	db15      	blt.n	8004ffe <_printf_float+0x366>
 8004fd2:	6823      	ldr	r3, [r4, #0]
 8004fd4:	07da      	lsls	r2, r3, #31
 8004fd6:	d412      	bmi.n	8004ffe <_printf_float+0x366>
 8004fd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fda:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004fdc:	eba3 020a 	sub.w	r2, r3, sl
 8004fe0:	eba3 0a01 	sub.w	sl, r3, r1
 8004fe4:	4592      	cmp	sl, r2
 8004fe6:	bfa8      	it	ge
 8004fe8:	4692      	movge	sl, r2
 8004fea:	f1ba 0f00 	cmp.w	sl, #0
 8004fee:	dc0e      	bgt.n	800500e <_printf_float+0x376>
 8004ff0:	f04f 0800 	mov.w	r8, #0
 8004ff4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004ff8:	f104 091a 	add.w	r9, r4, #26
 8004ffc:	e019      	b.n	8005032 <_printf_float+0x39a>
 8004ffe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005002:	4631      	mov	r1, r6
 8005004:	4628      	mov	r0, r5
 8005006:	47b8      	blx	r7
 8005008:	3001      	adds	r0, #1
 800500a:	d1e5      	bne.n	8004fd8 <_printf_float+0x340>
 800500c:	e6a1      	b.n	8004d52 <_printf_float+0xba>
 800500e:	4653      	mov	r3, sl
 8005010:	4642      	mov	r2, r8
 8005012:	4631      	mov	r1, r6
 8005014:	4628      	mov	r0, r5
 8005016:	47b8      	blx	r7
 8005018:	3001      	adds	r0, #1
 800501a:	d1e9      	bne.n	8004ff0 <_printf_float+0x358>
 800501c:	e699      	b.n	8004d52 <_printf_float+0xba>
 800501e:	2301      	movs	r3, #1
 8005020:	464a      	mov	r2, r9
 8005022:	4631      	mov	r1, r6
 8005024:	4628      	mov	r0, r5
 8005026:	47b8      	blx	r7
 8005028:	3001      	adds	r0, #1
 800502a:	f43f ae92 	beq.w	8004d52 <_printf_float+0xba>
 800502e:	f108 0801 	add.w	r8, r8, #1
 8005032:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005036:	1a9b      	subs	r3, r3, r2
 8005038:	eba3 030a 	sub.w	r3, r3, sl
 800503c:	4543      	cmp	r3, r8
 800503e:	dcee      	bgt.n	800501e <_printf_float+0x386>
 8005040:	e74a      	b.n	8004ed8 <_printf_float+0x240>
 8005042:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005044:	2a01      	cmp	r2, #1
 8005046:	dc01      	bgt.n	800504c <_printf_float+0x3b4>
 8005048:	07db      	lsls	r3, r3, #31
 800504a:	d53a      	bpl.n	80050c2 <_printf_float+0x42a>
 800504c:	2301      	movs	r3, #1
 800504e:	4642      	mov	r2, r8
 8005050:	4631      	mov	r1, r6
 8005052:	4628      	mov	r0, r5
 8005054:	47b8      	blx	r7
 8005056:	3001      	adds	r0, #1
 8005058:	f43f ae7b 	beq.w	8004d52 <_printf_float+0xba>
 800505c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005060:	4631      	mov	r1, r6
 8005062:	4628      	mov	r0, r5
 8005064:	47b8      	blx	r7
 8005066:	3001      	adds	r0, #1
 8005068:	f108 0801 	add.w	r8, r8, #1
 800506c:	f43f ae71 	beq.w	8004d52 <_printf_float+0xba>
 8005070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005072:	2200      	movs	r2, #0
 8005074:	f103 3aff 	add.w	sl, r3, #4294967295
 8005078:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800507c:	2300      	movs	r3, #0
 800507e:	f7fb fd23 	bl	8000ac8 <__aeabi_dcmpeq>
 8005082:	b9c8      	cbnz	r0, 80050b8 <_printf_float+0x420>
 8005084:	4653      	mov	r3, sl
 8005086:	4642      	mov	r2, r8
 8005088:	4631      	mov	r1, r6
 800508a:	4628      	mov	r0, r5
 800508c:	47b8      	blx	r7
 800508e:	3001      	adds	r0, #1
 8005090:	d10e      	bne.n	80050b0 <_printf_float+0x418>
 8005092:	e65e      	b.n	8004d52 <_printf_float+0xba>
 8005094:	2301      	movs	r3, #1
 8005096:	4652      	mov	r2, sl
 8005098:	4631      	mov	r1, r6
 800509a:	4628      	mov	r0, r5
 800509c:	47b8      	blx	r7
 800509e:	3001      	adds	r0, #1
 80050a0:	f43f ae57 	beq.w	8004d52 <_printf_float+0xba>
 80050a4:	f108 0801 	add.w	r8, r8, #1
 80050a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050aa:	3b01      	subs	r3, #1
 80050ac:	4543      	cmp	r3, r8
 80050ae:	dcf1      	bgt.n	8005094 <_printf_float+0x3fc>
 80050b0:	464b      	mov	r3, r9
 80050b2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80050b6:	e6de      	b.n	8004e76 <_printf_float+0x1de>
 80050b8:	f04f 0800 	mov.w	r8, #0
 80050bc:	f104 0a1a 	add.w	sl, r4, #26
 80050c0:	e7f2      	b.n	80050a8 <_printf_float+0x410>
 80050c2:	2301      	movs	r3, #1
 80050c4:	e7df      	b.n	8005086 <_printf_float+0x3ee>
 80050c6:	2301      	movs	r3, #1
 80050c8:	464a      	mov	r2, r9
 80050ca:	4631      	mov	r1, r6
 80050cc:	4628      	mov	r0, r5
 80050ce:	47b8      	blx	r7
 80050d0:	3001      	adds	r0, #1
 80050d2:	f43f ae3e 	beq.w	8004d52 <_printf_float+0xba>
 80050d6:	f108 0801 	add.w	r8, r8, #1
 80050da:	68e3      	ldr	r3, [r4, #12]
 80050dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80050de:	1a9b      	subs	r3, r3, r2
 80050e0:	4543      	cmp	r3, r8
 80050e2:	dcf0      	bgt.n	80050c6 <_printf_float+0x42e>
 80050e4:	e6fc      	b.n	8004ee0 <_printf_float+0x248>
 80050e6:	f04f 0800 	mov.w	r8, #0
 80050ea:	f104 0919 	add.w	r9, r4, #25
 80050ee:	e7f4      	b.n	80050da <_printf_float+0x442>
 80050f0:	2900      	cmp	r1, #0
 80050f2:	f43f ae8b 	beq.w	8004e0c <_printf_float+0x174>
 80050f6:	2300      	movs	r3, #0
 80050f8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80050fc:	ab09      	add	r3, sp, #36	; 0x24
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	ec49 8b10 	vmov	d0, r8, r9
 8005104:	6022      	str	r2, [r4, #0]
 8005106:	f8cd a004 	str.w	sl, [sp, #4]
 800510a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800510e:	4628      	mov	r0, r5
 8005110:	f7ff fd2e 	bl	8004b70 <__cvt>
 8005114:	4680      	mov	r8, r0
 8005116:	e648      	b.n	8004daa <_printf_float+0x112>

08005118 <_printf_common>:
 8005118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800511c:	4691      	mov	r9, r2
 800511e:	461f      	mov	r7, r3
 8005120:	688a      	ldr	r2, [r1, #8]
 8005122:	690b      	ldr	r3, [r1, #16]
 8005124:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005128:	4293      	cmp	r3, r2
 800512a:	bfb8      	it	lt
 800512c:	4613      	movlt	r3, r2
 800512e:	f8c9 3000 	str.w	r3, [r9]
 8005132:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005136:	4606      	mov	r6, r0
 8005138:	460c      	mov	r4, r1
 800513a:	b112      	cbz	r2, 8005142 <_printf_common+0x2a>
 800513c:	3301      	adds	r3, #1
 800513e:	f8c9 3000 	str.w	r3, [r9]
 8005142:	6823      	ldr	r3, [r4, #0]
 8005144:	0699      	lsls	r1, r3, #26
 8005146:	bf42      	ittt	mi
 8005148:	f8d9 3000 	ldrmi.w	r3, [r9]
 800514c:	3302      	addmi	r3, #2
 800514e:	f8c9 3000 	strmi.w	r3, [r9]
 8005152:	6825      	ldr	r5, [r4, #0]
 8005154:	f015 0506 	ands.w	r5, r5, #6
 8005158:	d107      	bne.n	800516a <_printf_common+0x52>
 800515a:	f104 0a19 	add.w	sl, r4, #25
 800515e:	68e3      	ldr	r3, [r4, #12]
 8005160:	f8d9 2000 	ldr.w	r2, [r9]
 8005164:	1a9b      	subs	r3, r3, r2
 8005166:	42ab      	cmp	r3, r5
 8005168:	dc28      	bgt.n	80051bc <_printf_common+0xa4>
 800516a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800516e:	6822      	ldr	r2, [r4, #0]
 8005170:	3300      	adds	r3, #0
 8005172:	bf18      	it	ne
 8005174:	2301      	movne	r3, #1
 8005176:	0692      	lsls	r2, r2, #26
 8005178:	d42d      	bmi.n	80051d6 <_printf_common+0xbe>
 800517a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800517e:	4639      	mov	r1, r7
 8005180:	4630      	mov	r0, r6
 8005182:	47c0      	blx	r8
 8005184:	3001      	adds	r0, #1
 8005186:	d020      	beq.n	80051ca <_printf_common+0xb2>
 8005188:	6823      	ldr	r3, [r4, #0]
 800518a:	68e5      	ldr	r5, [r4, #12]
 800518c:	f8d9 2000 	ldr.w	r2, [r9]
 8005190:	f003 0306 	and.w	r3, r3, #6
 8005194:	2b04      	cmp	r3, #4
 8005196:	bf08      	it	eq
 8005198:	1aad      	subeq	r5, r5, r2
 800519a:	68a3      	ldr	r3, [r4, #8]
 800519c:	6922      	ldr	r2, [r4, #16]
 800519e:	bf0c      	ite	eq
 80051a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051a4:	2500      	movne	r5, #0
 80051a6:	4293      	cmp	r3, r2
 80051a8:	bfc4      	itt	gt
 80051aa:	1a9b      	subgt	r3, r3, r2
 80051ac:	18ed      	addgt	r5, r5, r3
 80051ae:	f04f 0900 	mov.w	r9, #0
 80051b2:	341a      	adds	r4, #26
 80051b4:	454d      	cmp	r5, r9
 80051b6:	d11a      	bne.n	80051ee <_printf_common+0xd6>
 80051b8:	2000      	movs	r0, #0
 80051ba:	e008      	b.n	80051ce <_printf_common+0xb6>
 80051bc:	2301      	movs	r3, #1
 80051be:	4652      	mov	r2, sl
 80051c0:	4639      	mov	r1, r7
 80051c2:	4630      	mov	r0, r6
 80051c4:	47c0      	blx	r8
 80051c6:	3001      	adds	r0, #1
 80051c8:	d103      	bne.n	80051d2 <_printf_common+0xba>
 80051ca:	f04f 30ff 	mov.w	r0, #4294967295
 80051ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051d2:	3501      	adds	r5, #1
 80051d4:	e7c3      	b.n	800515e <_printf_common+0x46>
 80051d6:	18e1      	adds	r1, r4, r3
 80051d8:	1c5a      	adds	r2, r3, #1
 80051da:	2030      	movs	r0, #48	; 0x30
 80051dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051e0:	4422      	add	r2, r4
 80051e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051ea:	3302      	adds	r3, #2
 80051ec:	e7c5      	b.n	800517a <_printf_common+0x62>
 80051ee:	2301      	movs	r3, #1
 80051f0:	4622      	mov	r2, r4
 80051f2:	4639      	mov	r1, r7
 80051f4:	4630      	mov	r0, r6
 80051f6:	47c0      	blx	r8
 80051f8:	3001      	adds	r0, #1
 80051fa:	d0e6      	beq.n	80051ca <_printf_common+0xb2>
 80051fc:	f109 0901 	add.w	r9, r9, #1
 8005200:	e7d8      	b.n	80051b4 <_printf_common+0x9c>
	...

08005204 <_printf_i>:
 8005204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005208:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800520c:	460c      	mov	r4, r1
 800520e:	7e09      	ldrb	r1, [r1, #24]
 8005210:	b085      	sub	sp, #20
 8005212:	296e      	cmp	r1, #110	; 0x6e
 8005214:	4617      	mov	r7, r2
 8005216:	4606      	mov	r6, r0
 8005218:	4698      	mov	r8, r3
 800521a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800521c:	f000 80b3 	beq.w	8005386 <_printf_i+0x182>
 8005220:	d822      	bhi.n	8005268 <_printf_i+0x64>
 8005222:	2963      	cmp	r1, #99	; 0x63
 8005224:	d036      	beq.n	8005294 <_printf_i+0x90>
 8005226:	d80a      	bhi.n	800523e <_printf_i+0x3a>
 8005228:	2900      	cmp	r1, #0
 800522a:	f000 80b9 	beq.w	80053a0 <_printf_i+0x19c>
 800522e:	2958      	cmp	r1, #88	; 0x58
 8005230:	f000 8083 	beq.w	800533a <_printf_i+0x136>
 8005234:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005238:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800523c:	e032      	b.n	80052a4 <_printf_i+0xa0>
 800523e:	2964      	cmp	r1, #100	; 0x64
 8005240:	d001      	beq.n	8005246 <_printf_i+0x42>
 8005242:	2969      	cmp	r1, #105	; 0x69
 8005244:	d1f6      	bne.n	8005234 <_printf_i+0x30>
 8005246:	6820      	ldr	r0, [r4, #0]
 8005248:	6813      	ldr	r3, [r2, #0]
 800524a:	0605      	lsls	r5, r0, #24
 800524c:	f103 0104 	add.w	r1, r3, #4
 8005250:	d52a      	bpl.n	80052a8 <_printf_i+0xa4>
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6011      	str	r1, [r2, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	da03      	bge.n	8005262 <_printf_i+0x5e>
 800525a:	222d      	movs	r2, #45	; 0x2d
 800525c:	425b      	negs	r3, r3
 800525e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005262:	486f      	ldr	r0, [pc, #444]	; (8005420 <_printf_i+0x21c>)
 8005264:	220a      	movs	r2, #10
 8005266:	e039      	b.n	80052dc <_printf_i+0xd8>
 8005268:	2973      	cmp	r1, #115	; 0x73
 800526a:	f000 809d 	beq.w	80053a8 <_printf_i+0x1a4>
 800526e:	d808      	bhi.n	8005282 <_printf_i+0x7e>
 8005270:	296f      	cmp	r1, #111	; 0x6f
 8005272:	d020      	beq.n	80052b6 <_printf_i+0xb2>
 8005274:	2970      	cmp	r1, #112	; 0x70
 8005276:	d1dd      	bne.n	8005234 <_printf_i+0x30>
 8005278:	6823      	ldr	r3, [r4, #0]
 800527a:	f043 0320 	orr.w	r3, r3, #32
 800527e:	6023      	str	r3, [r4, #0]
 8005280:	e003      	b.n	800528a <_printf_i+0x86>
 8005282:	2975      	cmp	r1, #117	; 0x75
 8005284:	d017      	beq.n	80052b6 <_printf_i+0xb2>
 8005286:	2978      	cmp	r1, #120	; 0x78
 8005288:	d1d4      	bne.n	8005234 <_printf_i+0x30>
 800528a:	2378      	movs	r3, #120	; 0x78
 800528c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005290:	4864      	ldr	r0, [pc, #400]	; (8005424 <_printf_i+0x220>)
 8005292:	e055      	b.n	8005340 <_printf_i+0x13c>
 8005294:	6813      	ldr	r3, [r2, #0]
 8005296:	1d19      	adds	r1, r3, #4
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	6011      	str	r1, [r2, #0]
 800529c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052a4:	2301      	movs	r3, #1
 80052a6:	e08c      	b.n	80053c2 <_printf_i+0x1be>
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6011      	str	r1, [r2, #0]
 80052ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 80052b0:	bf18      	it	ne
 80052b2:	b21b      	sxthne	r3, r3
 80052b4:	e7cf      	b.n	8005256 <_printf_i+0x52>
 80052b6:	6813      	ldr	r3, [r2, #0]
 80052b8:	6825      	ldr	r5, [r4, #0]
 80052ba:	1d18      	adds	r0, r3, #4
 80052bc:	6010      	str	r0, [r2, #0]
 80052be:	0628      	lsls	r0, r5, #24
 80052c0:	d501      	bpl.n	80052c6 <_printf_i+0xc2>
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	e002      	b.n	80052cc <_printf_i+0xc8>
 80052c6:	0668      	lsls	r0, r5, #25
 80052c8:	d5fb      	bpl.n	80052c2 <_printf_i+0xbe>
 80052ca:	881b      	ldrh	r3, [r3, #0]
 80052cc:	4854      	ldr	r0, [pc, #336]	; (8005420 <_printf_i+0x21c>)
 80052ce:	296f      	cmp	r1, #111	; 0x6f
 80052d0:	bf14      	ite	ne
 80052d2:	220a      	movne	r2, #10
 80052d4:	2208      	moveq	r2, #8
 80052d6:	2100      	movs	r1, #0
 80052d8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052dc:	6865      	ldr	r5, [r4, #4]
 80052de:	60a5      	str	r5, [r4, #8]
 80052e0:	2d00      	cmp	r5, #0
 80052e2:	f2c0 8095 	blt.w	8005410 <_printf_i+0x20c>
 80052e6:	6821      	ldr	r1, [r4, #0]
 80052e8:	f021 0104 	bic.w	r1, r1, #4
 80052ec:	6021      	str	r1, [r4, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d13d      	bne.n	800536e <_printf_i+0x16a>
 80052f2:	2d00      	cmp	r5, #0
 80052f4:	f040 808e 	bne.w	8005414 <_printf_i+0x210>
 80052f8:	4665      	mov	r5, ip
 80052fa:	2a08      	cmp	r2, #8
 80052fc:	d10b      	bne.n	8005316 <_printf_i+0x112>
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	07db      	lsls	r3, r3, #31
 8005302:	d508      	bpl.n	8005316 <_printf_i+0x112>
 8005304:	6923      	ldr	r3, [r4, #16]
 8005306:	6862      	ldr	r2, [r4, #4]
 8005308:	429a      	cmp	r2, r3
 800530a:	bfde      	ittt	le
 800530c:	2330      	movle	r3, #48	; 0x30
 800530e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005312:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005316:	ebac 0305 	sub.w	r3, ip, r5
 800531a:	6123      	str	r3, [r4, #16]
 800531c:	f8cd 8000 	str.w	r8, [sp]
 8005320:	463b      	mov	r3, r7
 8005322:	aa03      	add	r2, sp, #12
 8005324:	4621      	mov	r1, r4
 8005326:	4630      	mov	r0, r6
 8005328:	f7ff fef6 	bl	8005118 <_printf_common>
 800532c:	3001      	adds	r0, #1
 800532e:	d14d      	bne.n	80053cc <_printf_i+0x1c8>
 8005330:	f04f 30ff 	mov.w	r0, #4294967295
 8005334:	b005      	add	sp, #20
 8005336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800533a:	4839      	ldr	r0, [pc, #228]	; (8005420 <_printf_i+0x21c>)
 800533c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005340:	6813      	ldr	r3, [r2, #0]
 8005342:	6821      	ldr	r1, [r4, #0]
 8005344:	1d1d      	adds	r5, r3, #4
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6015      	str	r5, [r2, #0]
 800534a:	060a      	lsls	r2, r1, #24
 800534c:	d50b      	bpl.n	8005366 <_printf_i+0x162>
 800534e:	07ca      	lsls	r2, r1, #31
 8005350:	bf44      	itt	mi
 8005352:	f041 0120 	orrmi.w	r1, r1, #32
 8005356:	6021      	strmi	r1, [r4, #0]
 8005358:	b91b      	cbnz	r3, 8005362 <_printf_i+0x15e>
 800535a:	6822      	ldr	r2, [r4, #0]
 800535c:	f022 0220 	bic.w	r2, r2, #32
 8005360:	6022      	str	r2, [r4, #0]
 8005362:	2210      	movs	r2, #16
 8005364:	e7b7      	b.n	80052d6 <_printf_i+0xd2>
 8005366:	064d      	lsls	r5, r1, #25
 8005368:	bf48      	it	mi
 800536a:	b29b      	uxthmi	r3, r3
 800536c:	e7ef      	b.n	800534e <_printf_i+0x14a>
 800536e:	4665      	mov	r5, ip
 8005370:	fbb3 f1f2 	udiv	r1, r3, r2
 8005374:	fb02 3311 	mls	r3, r2, r1, r3
 8005378:	5cc3      	ldrb	r3, [r0, r3]
 800537a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800537e:	460b      	mov	r3, r1
 8005380:	2900      	cmp	r1, #0
 8005382:	d1f5      	bne.n	8005370 <_printf_i+0x16c>
 8005384:	e7b9      	b.n	80052fa <_printf_i+0xf6>
 8005386:	6813      	ldr	r3, [r2, #0]
 8005388:	6825      	ldr	r5, [r4, #0]
 800538a:	6961      	ldr	r1, [r4, #20]
 800538c:	1d18      	adds	r0, r3, #4
 800538e:	6010      	str	r0, [r2, #0]
 8005390:	0628      	lsls	r0, r5, #24
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	d501      	bpl.n	800539a <_printf_i+0x196>
 8005396:	6019      	str	r1, [r3, #0]
 8005398:	e002      	b.n	80053a0 <_printf_i+0x19c>
 800539a:	066a      	lsls	r2, r5, #25
 800539c:	d5fb      	bpl.n	8005396 <_printf_i+0x192>
 800539e:	8019      	strh	r1, [r3, #0]
 80053a0:	2300      	movs	r3, #0
 80053a2:	6123      	str	r3, [r4, #16]
 80053a4:	4665      	mov	r5, ip
 80053a6:	e7b9      	b.n	800531c <_printf_i+0x118>
 80053a8:	6813      	ldr	r3, [r2, #0]
 80053aa:	1d19      	adds	r1, r3, #4
 80053ac:	6011      	str	r1, [r2, #0]
 80053ae:	681d      	ldr	r5, [r3, #0]
 80053b0:	6862      	ldr	r2, [r4, #4]
 80053b2:	2100      	movs	r1, #0
 80053b4:	4628      	mov	r0, r5
 80053b6:	f7fa ff13 	bl	80001e0 <memchr>
 80053ba:	b108      	cbz	r0, 80053c0 <_printf_i+0x1bc>
 80053bc:	1b40      	subs	r0, r0, r5
 80053be:	6060      	str	r0, [r4, #4]
 80053c0:	6863      	ldr	r3, [r4, #4]
 80053c2:	6123      	str	r3, [r4, #16]
 80053c4:	2300      	movs	r3, #0
 80053c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053ca:	e7a7      	b.n	800531c <_printf_i+0x118>
 80053cc:	6923      	ldr	r3, [r4, #16]
 80053ce:	462a      	mov	r2, r5
 80053d0:	4639      	mov	r1, r7
 80053d2:	4630      	mov	r0, r6
 80053d4:	47c0      	blx	r8
 80053d6:	3001      	adds	r0, #1
 80053d8:	d0aa      	beq.n	8005330 <_printf_i+0x12c>
 80053da:	6823      	ldr	r3, [r4, #0]
 80053dc:	079b      	lsls	r3, r3, #30
 80053de:	d413      	bmi.n	8005408 <_printf_i+0x204>
 80053e0:	68e0      	ldr	r0, [r4, #12]
 80053e2:	9b03      	ldr	r3, [sp, #12]
 80053e4:	4298      	cmp	r0, r3
 80053e6:	bfb8      	it	lt
 80053e8:	4618      	movlt	r0, r3
 80053ea:	e7a3      	b.n	8005334 <_printf_i+0x130>
 80053ec:	2301      	movs	r3, #1
 80053ee:	464a      	mov	r2, r9
 80053f0:	4639      	mov	r1, r7
 80053f2:	4630      	mov	r0, r6
 80053f4:	47c0      	blx	r8
 80053f6:	3001      	adds	r0, #1
 80053f8:	d09a      	beq.n	8005330 <_printf_i+0x12c>
 80053fa:	3501      	adds	r5, #1
 80053fc:	68e3      	ldr	r3, [r4, #12]
 80053fe:	9a03      	ldr	r2, [sp, #12]
 8005400:	1a9b      	subs	r3, r3, r2
 8005402:	42ab      	cmp	r3, r5
 8005404:	dcf2      	bgt.n	80053ec <_printf_i+0x1e8>
 8005406:	e7eb      	b.n	80053e0 <_printf_i+0x1dc>
 8005408:	2500      	movs	r5, #0
 800540a:	f104 0919 	add.w	r9, r4, #25
 800540e:	e7f5      	b.n	80053fc <_printf_i+0x1f8>
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1ac      	bne.n	800536e <_printf_i+0x16a>
 8005414:	7803      	ldrb	r3, [r0, #0]
 8005416:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800541a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800541e:	e76c      	b.n	80052fa <_printf_i+0xf6>
 8005420:	08007e66 	.word	0x08007e66
 8005424:	08007e77 	.word	0x08007e77

08005428 <iprintf>:
 8005428:	b40f      	push	{r0, r1, r2, r3}
 800542a:	4b0a      	ldr	r3, [pc, #40]	; (8005454 <iprintf+0x2c>)
 800542c:	b513      	push	{r0, r1, r4, lr}
 800542e:	681c      	ldr	r4, [r3, #0]
 8005430:	b124      	cbz	r4, 800543c <iprintf+0x14>
 8005432:	69a3      	ldr	r3, [r4, #24]
 8005434:	b913      	cbnz	r3, 800543c <iprintf+0x14>
 8005436:	4620      	mov	r0, r4
 8005438:	f001 f866 	bl	8006508 <__sinit>
 800543c:	ab05      	add	r3, sp, #20
 800543e:	9a04      	ldr	r2, [sp, #16]
 8005440:	68a1      	ldr	r1, [r4, #8]
 8005442:	9301      	str	r3, [sp, #4]
 8005444:	4620      	mov	r0, r4
 8005446:	f001 fd29 	bl	8006e9c <_vfiprintf_r>
 800544a:	b002      	add	sp, #8
 800544c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005450:	b004      	add	sp, #16
 8005452:	4770      	bx	lr
 8005454:	2000000c 	.word	0x2000000c

08005458 <_puts_r>:
 8005458:	b570      	push	{r4, r5, r6, lr}
 800545a:	460e      	mov	r6, r1
 800545c:	4605      	mov	r5, r0
 800545e:	b118      	cbz	r0, 8005468 <_puts_r+0x10>
 8005460:	6983      	ldr	r3, [r0, #24]
 8005462:	b90b      	cbnz	r3, 8005468 <_puts_r+0x10>
 8005464:	f001 f850 	bl	8006508 <__sinit>
 8005468:	69ab      	ldr	r3, [r5, #24]
 800546a:	68ac      	ldr	r4, [r5, #8]
 800546c:	b913      	cbnz	r3, 8005474 <_puts_r+0x1c>
 800546e:	4628      	mov	r0, r5
 8005470:	f001 f84a 	bl	8006508 <__sinit>
 8005474:	4b23      	ldr	r3, [pc, #140]	; (8005504 <_puts_r+0xac>)
 8005476:	429c      	cmp	r4, r3
 8005478:	d117      	bne.n	80054aa <_puts_r+0x52>
 800547a:	686c      	ldr	r4, [r5, #4]
 800547c:	89a3      	ldrh	r3, [r4, #12]
 800547e:	071b      	lsls	r3, r3, #28
 8005480:	d51d      	bpl.n	80054be <_puts_r+0x66>
 8005482:	6923      	ldr	r3, [r4, #16]
 8005484:	b1db      	cbz	r3, 80054be <_puts_r+0x66>
 8005486:	3e01      	subs	r6, #1
 8005488:	68a3      	ldr	r3, [r4, #8]
 800548a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800548e:	3b01      	subs	r3, #1
 8005490:	60a3      	str	r3, [r4, #8]
 8005492:	b9e9      	cbnz	r1, 80054d0 <_puts_r+0x78>
 8005494:	2b00      	cmp	r3, #0
 8005496:	da2e      	bge.n	80054f6 <_puts_r+0x9e>
 8005498:	4622      	mov	r2, r4
 800549a:	210a      	movs	r1, #10
 800549c:	4628      	mov	r0, r5
 800549e:	f000 f83f 	bl	8005520 <__swbuf_r>
 80054a2:	3001      	adds	r0, #1
 80054a4:	d011      	beq.n	80054ca <_puts_r+0x72>
 80054a6:	200a      	movs	r0, #10
 80054a8:	e011      	b.n	80054ce <_puts_r+0x76>
 80054aa:	4b17      	ldr	r3, [pc, #92]	; (8005508 <_puts_r+0xb0>)
 80054ac:	429c      	cmp	r4, r3
 80054ae:	d101      	bne.n	80054b4 <_puts_r+0x5c>
 80054b0:	68ac      	ldr	r4, [r5, #8]
 80054b2:	e7e3      	b.n	800547c <_puts_r+0x24>
 80054b4:	4b15      	ldr	r3, [pc, #84]	; (800550c <_puts_r+0xb4>)
 80054b6:	429c      	cmp	r4, r3
 80054b8:	bf08      	it	eq
 80054ba:	68ec      	ldreq	r4, [r5, #12]
 80054bc:	e7de      	b.n	800547c <_puts_r+0x24>
 80054be:	4621      	mov	r1, r4
 80054c0:	4628      	mov	r0, r5
 80054c2:	f000 f87f 	bl	80055c4 <__swsetup_r>
 80054c6:	2800      	cmp	r0, #0
 80054c8:	d0dd      	beq.n	8005486 <_puts_r+0x2e>
 80054ca:	f04f 30ff 	mov.w	r0, #4294967295
 80054ce:	bd70      	pop	{r4, r5, r6, pc}
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	da04      	bge.n	80054de <_puts_r+0x86>
 80054d4:	69a2      	ldr	r2, [r4, #24]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	dc06      	bgt.n	80054e8 <_puts_r+0x90>
 80054da:	290a      	cmp	r1, #10
 80054dc:	d004      	beq.n	80054e8 <_puts_r+0x90>
 80054de:	6823      	ldr	r3, [r4, #0]
 80054e0:	1c5a      	adds	r2, r3, #1
 80054e2:	6022      	str	r2, [r4, #0]
 80054e4:	7019      	strb	r1, [r3, #0]
 80054e6:	e7cf      	b.n	8005488 <_puts_r+0x30>
 80054e8:	4622      	mov	r2, r4
 80054ea:	4628      	mov	r0, r5
 80054ec:	f000 f818 	bl	8005520 <__swbuf_r>
 80054f0:	3001      	adds	r0, #1
 80054f2:	d1c9      	bne.n	8005488 <_puts_r+0x30>
 80054f4:	e7e9      	b.n	80054ca <_puts_r+0x72>
 80054f6:	6823      	ldr	r3, [r4, #0]
 80054f8:	200a      	movs	r0, #10
 80054fa:	1c5a      	adds	r2, r3, #1
 80054fc:	6022      	str	r2, [r4, #0]
 80054fe:	7018      	strb	r0, [r3, #0]
 8005500:	e7e5      	b.n	80054ce <_puts_r+0x76>
 8005502:	bf00      	nop
 8005504:	08007eb8 	.word	0x08007eb8
 8005508:	08007ed8 	.word	0x08007ed8
 800550c:	08007e98 	.word	0x08007e98

08005510 <puts>:
 8005510:	4b02      	ldr	r3, [pc, #8]	; (800551c <puts+0xc>)
 8005512:	4601      	mov	r1, r0
 8005514:	6818      	ldr	r0, [r3, #0]
 8005516:	f7ff bf9f 	b.w	8005458 <_puts_r>
 800551a:	bf00      	nop
 800551c:	2000000c 	.word	0x2000000c

08005520 <__swbuf_r>:
 8005520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005522:	460e      	mov	r6, r1
 8005524:	4614      	mov	r4, r2
 8005526:	4605      	mov	r5, r0
 8005528:	b118      	cbz	r0, 8005532 <__swbuf_r+0x12>
 800552a:	6983      	ldr	r3, [r0, #24]
 800552c:	b90b      	cbnz	r3, 8005532 <__swbuf_r+0x12>
 800552e:	f000 ffeb 	bl	8006508 <__sinit>
 8005532:	4b21      	ldr	r3, [pc, #132]	; (80055b8 <__swbuf_r+0x98>)
 8005534:	429c      	cmp	r4, r3
 8005536:	d12a      	bne.n	800558e <__swbuf_r+0x6e>
 8005538:	686c      	ldr	r4, [r5, #4]
 800553a:	69a3      	ldr	r3, [r4, #24]
 800553c:	60a3      	str	r3, [r4, #8]
 800553e:	89a3      	ldrh	r3, [r4, #12]
 8005540:	071a      	lsls	r2, r3, #28
 8005542:	d52e      	bpl.n	80055a2 <__swbuf_r+0x82>
 8005544:	6923      	ldr	r3, [r4, #16]
 8005546:	b363      	cbz	r3, 80055a2 <__swbuf_r+0x82>
 8005548:	6923      	ldr	r3, [r4, #16]
 800554a:	6820      	ldr	r0, [r4, #0]
 800554c:	1ac0      	subs	r0, r0, r3
 800554e:	6963      	ldr	r3, [r4, #20]
 8005550:	b2f6      	uxtb	r6, r6
 8005552:	4283      	cmp	r3, r0
 8005554:	4637      	mov	r7, r6
 8005556:	dc04      	bgt.n	8005562 <__swbuf_r+0x42>
 8005558:	4621      	mov	r1, r4
 800555a:	4628      	mov	r0, r5
 800555c:	f000 ff6a 	bl	8006434 <_fflush_r>
 8005560:	bb28      	cbnz	r0, 80055ae <__swbuf_r+0x8e>
 8005562:	68a3      	ldr	r3, [r4, #8]
 8005564:	3b01      	subs	r3, #1
 8005566:	60a3      	str	r3, [r4, #8]
 8005568:	6823      	ldr	r3, [r4, #0]
 800556a:	1c5a      	adds	r2, r3, #1
 800556c:	6022      	str	r2, [r4, #0]
 800556e:	701e      	strb	r6, [r3, #0]
 8005570:	6963      	ldr	r3, [r4, #20]
 8005572:	3001      	adds	r0, #1
 8005574:	4283      	cmp	r3, r0
 8005576:	d004      	beq.n	8005582 <__swbuf_r+0x62>
 8005578:	89a3      	ldrh	r3, [r4, #12]
 800557a:	07db      	lsls	r3, r3, #31
 800557c:	d519      	bpl.n	80055b2 <__swbuf_r+0x92>
 800557e:	2e0a      	cmp	r6, #10
 8005580:	d117      	bne.n	80055b2 <__swbuf_r+0x92>
 8005582:	4621      	mov	r1, r4
 8005584:	4628      	mov	r0, r5
 8005586:	f000 ff55 	bl	8006434 <_fflush_r>
 800558a:	b190      	cbz	r0, 80055b2 <__swbuf_r+0x92>
 800558c:	e00f      	b.n	80055ae <__swbuf_r+0x8e>
 800558e:	4b0b      	ldr	r3, [pc, #44]	; (80055bc <__swbuf_r+0x9c>)
 8005590:	429c      	cmp	r4, r3
 8005592:	d101      	bne.n	8005598 <__swbuf_r+0x78>
 8005594:	68ac      	ldr	r4, [r5, #8]
 8005596:	e7d0      	b.n	800553a <__swbuf_r+0x1a>
 8005598:	4b09      	ldr	r3, [pc, #36]	; (80055c0 <__swbuf_r+0xa0>)
 800559a:	429c      	cmp	r4, r3
 800559c:	bf08      	it	eq
 800559e:	68ec      	ldreq	r4, [r5, #12]
 80055a0:	e7cb      	b.n	800553a <__swbuf_r+0x1a>
 80055a2:	4621      	mov	r1, r4
 80055a4:	4628      	mov	r0, r5
 80055a6:	f000 f80d 	bl	80055c4 <__swsetup_r>
 80055aa:	2800      	cmp	r0, #0
 80055ac:	d0cc      	beq.n	8005548 <__swbuf_r+0x28>
 80055ae:	f04f 37ff 	mov.w	r7, #4294967295
 80055b2:	4638      	mov	r0, r7
 80055b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055b6:	bf00      	nop
 80055b8:	08007eb8 	.word	0x08007eb8
 80055bc:	08007ed8 	.word	0x08007ed8
 80055c0:	08007e98 	.word	0x08007e98

080055c4 <__swsetup_r>:
 80055c4:	4b32      	ldr	r3, [pc, #200]	; (8005690 <__swsetup_r+0xcc>)
 80055c6:	b570      	push	{r4, r5, r6, lr}
 80055c8:	681d      	ldr	r5, [r3, #0]
 80055ca:	4606      	mov	r6, r0
 80055cc:	460c      	mov	r4, r1
 80055ce:	b125      	cbz	r5, 80055da <__swsetup_r+0x16>
 80055d0:	69ab      	ldr	r3, [r5, #24]
 80055d2:	b913      	cbnz	r3, 80055da <__swsetup_r+0x16>
 80055d4:	4628      	mov	r0, r5
 80055d6:	f000 ff97 	bl	8006508 <__sinit>
 80055da:	4b2e      	ldr	r3, [pc, #184]	; (8005694 <__swsetup_r+0xd0>)
 80055dc:	429c      	cmp	r4, r3
 80055de:	d10f      	bne.n	8005600 <__swsetup_r+0x3c>
 80055e0:	686c      	ldr	r4, [r5, #4]
 80055e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	0715      	lsls	r5, r2, #28
 80055ea:	d42c      	bmi.n	8005646 <__swsetup_r+0x82>
 80055ec:	06d0      	lsls	r0, r2, #27
 80055ee:	d411      	bmi.n	8005614 <__swsetup_r+0x50>
 80055f0:	2209      	movs	r2, #9
 80055f2:	6032      	str	r2, [r6, #0]
 80055f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055f8:	81a3      	strh	r3, [r4, #12]
 80055fa:	f04f 30ff 	mov.w	r0, #4294967295
 80055fe:	e03e      	b.n	800567e <__swsetup_r+0xba>
 8005600:	4b25      	ldr	r3, [pc, #148]	; (8005698 <__swsetup_r+0xd4>)
 8005602:	429c      	cmp	r4, r3
 8005604:	d101      	bne.n	800560a <__swsetup_r+0x46>
 8005606:	68ac      	ldr	r4, [r5, #8]
 8005608:	e7eb      	b.n	80055e2 <__swsetup_r+0x1e>
 800560a:	4b24      	ldr	r3, [pc, #144]	; (800569c <__swsetup_r+0xd8>)
 800560c:	429c      	cmp	r4, r3
 800560e:	bf08      	it	eq
 8005610:	68ec      	ldreq	r4, [r5, #12]
 8005612:	e7e6      	b.n	80055e2 <__swsetup_r+0x1e>
 8005614:	0751      	lsls	r1, r2, #29
 8005616:	d512      	bpl.n	800563e <__swsetup_r+0x7a>
 8005618:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800561a:	b141      	cbz	r1, 800562e <__swsetup_r+0x6a>
 800561c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005620:	4299      	cmp	r1, r3
 8005622:	d002      	beq.n	800562a <__swsetup_r+0x66>
 8005624:	4630      	mov	r0, r6
 8005626:	f001 fb67 	bl	8006cf8 <_free_r>
 800562a:	2300      	movs	r3, #0
 800562c:	6363      	str	r3, [r4, #52]	; 0x34
 800562e:	89a3      	ldrh	r3, [r4, #12]
 8005630:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005634:	81a3      	strh	r3, [r4, #12]
 8005636:	2300      	movs	r3, #0
 8005638:	6063      	str	r3, [r4, #4]
 800563a:	6923      	ldr	r3, [r4, #16]
 800563c:	6023      	str	r3, [r4, #0]
 800563e:	89a3      	ldrh	r3, [r4, #12]
 8005640:	f043 0308 	orr.w	r3, r3, #8
 8005644:	81a3      	strh	r3, [r4, #12]
 8005646:	6923      	ldr	r3, [r4, #16]
 8005648:	b94b      	cbnz	r3, 800565e <__swsetup_r+0x9a>
 800564a:	89a3      	ldrh	r3, [r4, #12]
 800564c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005654:	d003      	beq.n	800565e <__swsetup_r+0x9a>
 8005656:	4621      	mov	r1, r4
 8005658:	4630      	mov	r0, r6
 800565a:	f001 f811 	bl	8006680 <__smakebuf_r>
 800565e:	89a2      	ldrh	r2, [r4, #12]
 8005660:	f012 0301 	ands.w	r3, r2, #1
 8005664:	d00c      	beq.n	8005680 <__swsetup_r+0xbc>
 8005666:	2300      	movs	r3, #0
 8005668:	60a3      	str	r3, [r4, #8]
 800566a:	6963      	ldr	r3, [r4, #20]
 800566c:	425b      	negs	r3, r3
 800566e:	61a3      	str	r3, [r4, #24]
 8005670:	6923      	ldr	r3, [r4, #16]
 8005672:	b953      	cbnz	r3, 800568a <__swsetup_r+0xc6>
 8005674:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005678:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800567c:	d1ba      	bne.n	80055f4 <__swsetup_r+0x30>
 800567e:	bd70      	pop	{r4, r5, r6, pc}
 8005680:	0792      	lsls	r2, r2, #30
 8005682:	bf58      	it	pl
 8005684:	6963      	ldrpl	r3, [r4, #20]
 8005686:	60a3      	str	r3, [r4, #8]
 8005688:	e7f2      	b.n	8005670 <__swsetup_r+0xac>
 800568a:	2000      	movs	r0, #0
 800568c:	e7f7      	b.n	800567e <__swsetup_r+0xba>
 800568e:	bf00      	nop
 8005690:	2000000c 	.word	0x2000000c
 8005694:	08007eb8 	.word	0x08007eb8
 8005698:	08007ed8 	.word	0x08007ed8
 800569c:	08007e98 	.word	0x08007e98

080056a0 <quorem>:
 80056a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056a4:	6903      	ldr	r3, [r0, #16]
 80056a6:	690c      	ldr	r4, [r1, #16]
 80056a8:	42a3      	cmp	r3, r4
 80056aa:	4680      	mov	r8, r0
 80056ac:	f2c0 8082 	blt.w	80057b4 <quorem+0x114>
 80056b0:	3c01      	subs	r4, #1
 80056b2:	f101 0714 	add.w	r7, r1, #20
 80056b6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80056ba:	f100 0614 	add.w	r6, r0, #20
 80056be:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80056c2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80056c6:	eb06 030c 	add.w	r3, r6, ip
 80056ca:	3501      	adds	r5, #1
 80056cc:	eb07 090c 	add.w	r9, r7, ip
 80056d0:	9301      	str	r3, [sp, #4]
 80056d2:	fbb0 f5f5 	udiv	r5, r0, r5
 80056d6:	b395      	cbz	r5, 800573e <quorem+0x9e>
 80056d8:	f04f 0a00 	mov.w	sl, #0
 80056dc:	4638      	mov	r0, r7
 80056de:	46b6      	mov	lr, r6
 80056e0:	46d3      	mov	fp, sl
 80056e2:	f850 2b04 	ldr.w	r2, [r0], #4
 80056e6:	b293      	uxth	r3, r2
 80056e8:	fb05 a303 	mla	r3, r5, r3, sl
 80056ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	ebab 0303 	sub.w	r3, fp, r3
 80056f6:	0c12      	lsrs	r2, r2, #16
 80056f8:	f8de b000 	ldr.w	fp, [lr]
 80056fc:	fb05 a202 	mla	r2, r5, r2, sl
 8005700:	fa13 f38b 	uxtah	r3, r3, fp
 8005704:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005708:	fa1f fb82 	uxth.w	fp, r2
 800570c:	f8de 2000 	ldr.w	r2, [lr]
 8005710:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005714:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005718:	b29b      	uxth	r3, r3
 800571a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800571e:	4581      	cmp	r9, r0
 8005720:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005724:	f84e 3b04 	str.w	r3, [lr], #4
 8005728:	d2db      	bcs.n	80056e2 <quorem+0x42>
 800572a:	f856 300c 	ldr.w	r3, [r6, ip]
 800572e:	b933      	cbnz	r3, 800573e <quorem+0x9e>
 8005730:	9b01      	ldr	r3, [sp, #4]
 8005732:	3b04      	subs	r3, #4
 8005734:	429e      	cmp	r6, r3
 8005736:	461a      	mov	r2, r3
 8005738:	d330      	bcc.n	800579c <quorem+0xfc>
 800573a:	f8c8 4010 	str.w	r4, [r8, #16]
 800573e:	4640      	mov	r0, r8
 8005740:	f001 fa06 	bl	8006b50 <__mcmp>
 8005744:	2800      	cmp	r0, #0
 8005746:	db25      	blt.n	8005794 <quorem+0xf4>
 8005748:	3501      	adds	r5, #1
 800574a:	4630      	mov	r0, r6
 800574c:	f04f 0c00 	mov.w	ip, #0
 8005750:	f857 2b04 	ldr.w	r2, [r7], #4
 8005754:	f8d0 e000 	ldr.w	lr, [r0]
 8005758:	b293      	uxth	r3, r2
 800575a:	ebac 0303 	sub.w	r3, ip, r3
 800575e:	0c12      	lsrs	r2, r2, #16
 8005760:	fa13 f38e 	uxtah	r3, r3, lr
 8005764:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005768:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800576c:	b29b      	uxth	r3, r3
 800576e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005772:	45b9      	cmp	r9, r7
 8005774:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005778:	f840 3b04 	str.w	r3, [r0], #4
 800577c:	d2e8      	bcs.n	8005750 <quorem+0xb0>
 800577e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005782:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005786:	b92a      	cbnz	r2, 8005794 <quorem+0xf4>
 8005788:	3b04      	subs	r3, #4
 800578a:	429e      	cmp	r6, r3
 800578c:	461a      	mov	r2, r3
 800578e:	d30b      	bcc.n	80057a8 <quorem+0x108>
 8005790:	f8c8 4010 	str.w	r4, [r8, #16]
 8005794:	4628      	mov	r0, r5
 8005796:	b003      	add	sp, #12
 8005798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800579c:	6812      	ldr	r2, [r2, #0]
 800579e:	3b04      	subs	r3, #4
 80057a0:	2a00      	cmp	r2, #0
 80057a2:	d1ca      	bne.n	800573a <quorem+0x9a>
 80057a4:	3c01      	subs	r4, #1
 80057a6:	e7c5      	b.n	8005734 <quorem+0x94>
 80057a8:	6812      	ldr	r2, [r2, #0]
 80057aa:	3b04      	subs	r3, #4
 80057ac:	2a00      	cmp	r2, #0
 80057ae:	d1ef      	bne.n	8005790 <quorem+0xf0>
 80057b0:	3c01      	subs	r4, #1
 80057b2:	e7ea      	b.n	800578a <quorem+0xea>
 80057b4:	2000      	movs	r0, #0
 80057b6:	e7ee      	b.n	8005796 <quorem+0xf6>

080057b8 <_dtoa_r>:
 80057b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057bc:	ec57 6b10 	vmov	r6, r7, d0
 80057c0:	b097      	sub	sp, #92	; 0x5c
 80057c2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80057c4:	9106      	str	r1, [sp, #24]
 80057c6:	4604      	mov	r4, r0
 80057c8:	920b      	str	r2, [sp, #44]	; 0x2c
 80057ca:	9312      	str	r3, [sp, #72]	; 0x48
 80057cc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80057d0:	e9cd 6700 	strd	r6, r7, [sp]
 80057d4:	b93d      	cbnz	r5, 80057e6 <_dtoa_r+0x2e>
 80057d6:	2010      	movs	r0, #16
 80057d8:	f000 ff92 	bl	8006700 <malloc>
 80057dc:	6260      	str	r0, [r4, #36]	; 0x24
 80057de:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80057e2:	6005      	str	r5, [r0, #0]
 80057e4:	60c5      	str	r5, [r0, #12]
 80057e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057e8:	6819      	ldr	r1, [r3, #0]
 80057ea:	b151      	cbz	r1, 8005802 <_dtoa_r+0x4a>
 80057ec:	685a      	ldr	r2, [r3, #4]
 80057ee:	604a      	str	r2, [r1, #4]
 80057f0:	2301      	movs	r3, #1
 80057f2:	4093      	lsls	r3, r2
 80057f4:	608b      	str	r3, [r1, #8]
 80057f6:	4620      	mov	r0, r4
 80057f8:	f000 ffc9 	bl	800678e <_Bfree>
 80057fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057fe:	2200      	movs	r2, #0
 8005800:	601a      	str	r2, [r3, #0]
 8005802:	1e3b      	subs	r3, r7, #0
 8005804:	bfbb      	ittet	lt
 8005806:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800580a:	9301      	strlt	r3, [sp, #4]
 800580c:	2300      	movge	r3, #0
 800580e:	2201      	movlt	r2, #1
 8005810:	bfac      	ite	ge
 8005812:	f8c8 3000 	strge.w	r3, [r8]
 8005816:	f8c8 2000 	strlt.w	r2, [r8]
 800581a:	4baf      	ldr	r3, [pc, #700]	; (8005ad8 <_dtoa_r+0x320>)
 800581c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005820:	ea33 0308 	bics.w	r3, r3, r8
 8005824:	d114      	bne.n	8005850 <_dtoa_r+0x98>
 8005826:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005828:	f242 730f 	movw	r3, #9999	; 0x270f
 800582c:	6013      	str	r3, [r2, #0]
 800582e:	9b00      	ldr	r3, [sp, #0]
 8005830:	b923      	cbnz	r3, 800583c <_dtoa_r+0x84>
 8005832:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005836:	2800      	cmp	r0, #0
 8005838:	f000 8542 	beq.w	80062c0 <_dtoa_r+0xb08>
 800583c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800583e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8005aec <_dtoa_r+0x334>
 8005842:	2b00      	cmp	r3, #0
 8005844:	f000 8544 	beq.w	80062d0 <_dtoa_r+0xb18>
 8005848:	f10b 0303 	add.w	r3, fp, #3
 800584c:	f000 bd3e 	b.w	80062cc <_dtoa_r+0xb14>
 8005850:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005854:	2200      	movs	r2, #0
 8005856:	2300      	movs	r3, #0
 8005858:	4630      	mov	r0, r6
 800585a:	4639      	mov	r1, r7
 800585c:	f7fb f934 	bl	8000ac8 <__aeabi_dcmpeq>
 8005860:	4681      	mov	r9, r0
 8005862:	b168      	cbz	r0, 8005880 <_dtoa_r+0xc8>
 8005864:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005866:	2301      	movs	r3, #1
 8005868:	6013      	str	r3, [r2, #0]
 800586a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800586c:	2b00      	cmp	r3, #0
 800586e:	f000 8524 	beq.w	80062ba <_dtoa_r+0xb02>
 8005872:	4b9a      	ldr	r3, [pc, #616]	; (8005adc <_dtoa_r+0x324>)
 8005874:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005876:	f103 3bff 	add.w	fp, r3, #4294967295
 800587a:	6013      	str	r3, [r2, #0]
 800587c:	f000 bd28 	b.w	80062d0 <_dtoa_r+0xb18>
 8005880:	aa14      	add	r2, sp, #80	; 0x50
 8005882:	a915      	add	r1, sp, #84	; 0x54
 8005884:	ec47 6b10 	vmov	d0, r6, r7
 8005888:	4620      	mov	r0, r4
 800588a:	f001 f9d8 	bl	8006c3e <__d2b>
 800588e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005892:	9004      	str	r0, [sp, #16]
 8005894:	2d00      	cmp	r5, #0
 8005896:	d07c      	beq.n	8005992 <_dtoa_r+0x1da>
 8005898:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800589c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80058a0:	46b2      	mov	sl, r6
 80058a2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80058a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80058aa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80058ae:	2200      	movs	r2, #0
 80058b0:	4b8b      	ldr	r3, [pc, #556]	; (8005ae0 <_dtoa_r+0x328>)
 80058b2:	4650      	mov	r0, sl
 80058b4:	4659      	mov	r1, fp
 80058b6:	f7fa fce7 	bl	8000288 <__aeabi_dsub>
 80058ba:	a381      	add	r3, pc, #516	; (adr r3, 8005ac0 <_dtoa_r+0x308>)
 80058bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c0:	f7fa fe9a 	bl	80005f8 <__aeabi_dmul>
 80058c4:	a380      	add	r3, pc, #512	; (adr r3, 8005ac8 <_dtoa_r+0x310>)
 80058c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ca:	f7fa fcdf 	bl	800028c <__adddf3>
 80058ce:	4606      	mov	r6, r0
 80058d0:	4628      	mov	r0, r5
 80058d2:	460f      	mov	r7, r1
 80058d4:	f7fa fe26 	bl	8000524 <__aeabi_i2d>
 80058d8:	a37d      	add	r3, pc, #500	; (adr r3, 8005ad0 <_dtoa_r+0x318>)
 80058da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058de:	f7fa fe8b 	bl	80005f8 <__aeabi_dmul>
 80058e2:	4602      	mov	r2, r0
 80058e4:	460b      	mov	r3, r1
 80058e6:	4630      	mov	r0, r6
 80058e8:	4639      	mov	r1, r7
 80058ea:	f7fa fccf 	bl	800028c <__adddf3>
 80058ee:	4606      	mov	r6, r0
 80058f0:	460f      	mov	r7, r1
 80058f2:	f7fb f931 	bl	8000b58 <__aeabi_d2iz>
 80058f6:	2200      	movs	r2, #0
 80058f8:	4682      	mov	sl, r0
 80058fa:	2300      	movs	r3, #0
 80058fc:	4630      	mov	r0, r6
 80058fe:	4639      	mov	r1, r7
 8005900:	f7fb f8ec 	bl	8000adc <__aeabi_dcmplt>
 8005904:	b148      	cbz	r0, 800591a <_dtoa_r+0x162>
 8005906:	4650      	mov	r0, sl
 8005908:	f7fa fe0c 	bl	8000524 <__aeabi_i2d>
 800590c:	4632      	mov	r2, r6
 800590e:	463b      	mov	r3, r7
 8005910:	f7fb f8da 	bl	8000ac8 <__aeabi_dcmpeq>
 8005914:	b908      	cbnz	r0, 800591a <_dtoa_r+0x162>
 8005916:	f10a 3aff 	add.w	sl, sl, #4294967295
 800591a:	f1ba 0f16 	cmp.w	sl, #22
 800591e:	d859      	bhi.n	80059d4 <_dtoa_r+0x21c>
 8005920:	4970      	ldr	r1, [pc, #448]	; (8005ae4 <_dtoa_r+0x32c>)
 8005922:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005926:	e9dd 2300 	ldrd	r2, r3, [sp]
 800592a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800592e:	f7fb f8f3 	bl	8000b18 <__aeabi_dcmpgt>
 8005932:	2800      	cmp	r0, #0
 8005934:	d050      	beq.n	80059d8 <_dtoa_r+0x220>
 8005936:	f10a 3aff 	add.w	sl, sl, #4294967295
 800593a:	2300      	movs	r3, #0
 800593c:	930f      	str	r3, [sp, #60]	; 0x3c
 800593e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005940:	1b5d      	subs	r5, r3, r5
 8005942:	f1b5 0801 	subs.w	r8, r5, #1
 8005946:	bf49      	itett	mi
 8005948:	f1c5 0301 	rsbmi	r3, r5, #1
 800594c:	2300      	movpl	r3, #0
 800594e:	9305      	strmi	r3, [sp, #20]
 8005950:	f04f 0800 	movmi.w	r8, #0
 8005954:	bf58      	it	pl
 8005956:	9305      	strpl	r3, [sp, #20]
 8005958:	f1ba 0f00 	cmp.w	sl, #0
 800595c:	db3e      	blt.n	80059dc <_dtoa_r+0x224>
 800595e:	2300      	movs	r3, #0
 8005960:	44d0      	add	r8, sl
 8005962:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005966:	9307      	str	r3, [sp, #28]
 8005968:	9b06      	ldr	r3, [sp, #24]
 800596a:	2b09      	cmp	r3, #9
 800596c:	f200 8090 	bhi.w	8005a90 <_dtoa_r+0x2d8>
 8005970:	2b05      	cmp	r3, #5
 8005972:	bfc4      	itt	gt
 8005974:	3b04      	subgt	r3, #4
 8005976:	9306      	strgt	r3, [sp, #24]
 8005978:	9b06      	ldr	r3, [sp, #24]
 800597a:	f1a3 0302 	sub.w	r3, r3, #2
 800597e:	bfcc      	ite	gt
 8005980:	2500      	movgt	r5, #0
 8005982:	2501      	movle	r5, #1
 8005984:	2b03      	cmp	r3, #3
 8005986:	f200 808f 	bhi.w	8005aa8 <_dtoa_r+0x2f0>
 800598a:	e8df f003 	tbb	[pc, r3]
 800598e:	7f7d      	.short	0x7f7d
 8005990:	7131      	.short	0x7131
 8005992:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005996:	441d      	add	r5, r3
 8005998:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800599c:	2820      	cmp	r0, #32
 800599e:	dd13      	ble.n	80059c8 <_dtoa_r+0x210>
 80059a0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80059a4:	9b00      	ldr	r3, [sp, #0]
 80059a6:	fa08 f800 	lsl.w	r8, r8, r0
 80059aa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80059ae:	fa23 f000 	lsr.w	r0, r3, r0
 80059b2:	ea48 0000 	orr.w	r0, r8, r0
 80059b6:	f7fa fda5 	bl	8000504 <__aeabi_ui2d>
 80059ba:	2301      	movs	r3, #1
 80059bc:	4682      	mov	sl, r0
 80059be:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80059c2:	3d01      	subs	r5, #1
 80059c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80059c6:	e772      	b.n	80058ae <_dtoa_r+0xf6>
 80059c8:	9b00      	ldr	r3, [sp, #0]
 80059ca:	f1c0 0020 	rsb	r0, r0, #32
 80059ce:	fa03 f000 	lsl.w	r0, r3, r0
 80059d2:	e7f0      	b.n	80059b6 <_dtoa_r+0x1fe>
 80059d4:	2301      	movs	r3, #1
 80059d6:	e7b1      	b.n	800593c <_dtoa_r+0x184>
 80059d8:	900f      	str	r0, [sp, #60]	; 0x3c
 80059da:	e7b0      	b.n	800593e <_dtoa_r+0x186>
 80059dc:	9b05      	ldr	r3, [sp, #20]
 80059de:	eba3 030a 	sub.w	r3, r3, sl
 80059e2:	9305      	str	r3, [sp, #20]
 80059e4:	f1ca 0300 	rsb	r3, sl, #0
 80059e8:	9307      	str	r3, [sp, #28]
 80059ea:	2300      	movs	r3, #0
 80059ec:	930e      	str	r3, [sp, #56]	; 0x38
 80059ee:	e7bb      	b.n	8005968 <_dtoa_r+0x1b0>
 80059f0:	2301      	movs	r3, #1
 80059f2:	930a      	str	r3, [sp, #40]	; 0x28
 80059f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	dd59      	ble.n	8005aae <_dtoa_r+0x2f6>
 80059fa:	9302      	str	r3, [sp, #8]
 80059fc:	4699      	mov	r9, r3
 80059fe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005a00:	2200      	movs	r2, #0
 8005a02:	6072      	str	r2, [r6, #4]
 8005a04:	2204      	movs	r2, #4
 8005a06:	f102 0014 	add.w	r0, r2, #20
 8005a0a:	4298      	cmp	r0, r3
 8005a0c:	6871      	ldr	r1, [r6, #4]
 8005a0e:	d953      	bls.n	8005ab8 <_dtoa_r+0x300>
 8005a10:	4620      	mov	r0, r4
 8005a12:	f000 fe88 	bl	8006726 <_Balloc>
 8005a16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a18:	6030      	str	r0, [r6, #0]
 8005a1a:	f1b9 0f0e 	cmp.w	r9, #14
 8005a1e:	f8d3 b000 	ldr.w	fp, [r3]
 8005a22:	f200 80e6 	bhi.w	8005bf2 <_dtoa_r+0x43a>
 8005a26:	2d00      	cmp	r5, #0
 8005a28:	f000 80e3 	beq.w	8005bf2 <_dtoa_r+0x43a>
 8005a2c:	ed9d 7b00 	vldr	d7, [sp]
 8005a30:	f1ba 0f00 	cmp.w	sl, #0
 8005a34:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005a38:	dd74      	ble.n	8005b24 <_dtoa_r+0x36c>
 8005a3a:	4a2a      	ldr	r2, [pc, #168]	; (8005ae4 <_dtoa_r+0x32c>)
 8005a3c:	f00a 030f 	and.w	r3, sl, #15
 8005a40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005a44:	ed93 7b00 	vldr	d7, [r3]
 8005a48:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005a4c:	06f0      	lsls	r0, r6, #27
 8005a4e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005a52:	d565      	bpl.n	8005b20 <_dtoa_r+0x368>
 8005a54:	4b24      	ldr	r3, [pc, #144]	; (8005ae8 <_dtoa_r+0x330>)
 8005a56:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005a5a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005a5e:	f7fa fef5 	bl	800084c <__aeabi_ddiv>
 8005a62:	e9cd 0100 	strd	r0, r1, [sp]
 8005a66:	f006 060f 	and.w	r6, r6, #15
 8005a6a:	2503      	movs	r5, #3
 8005a6c:	4f1e      	ldr	r7, [pc, #120]	; (8005ae8 <_dtoa_r+0x330>)
 8005a6e:	e04c      	b.n	8005b0a <_dtoa_r+0x352>
 8005a70:	2301      	movs	r3, #1
 8005a72:	930a      	str	r3, [sp, #40]	; 0x28
 8005a74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a76:	4453      	add	r3, sl
 8005a78:	f103 0901 	add.w	r9, r3, #1
 8005a7c:	9302      	str	r3, [sp, #8]
 8005a7e:	464b      	mov	r3, r9
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	bfb8      	it	lt
 8005a84:	2301      	movlt	r3, #1
 8005a86:	e7ba      	b.n	80059fe <_dtoa_r+0x246>
 8005a88:	2300      	movs	r3, #0
 8005a8a:	e7b2      	b.n	80059f2 <_dtoa_r+0x23a>
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	e7f0      	b.n	8005a72 <_dtoa_r+0x2ba>
 8005a90:	2501      	movs	r5, #1
 8005a92:	2300      	movs	r3, #0
 8005a94:	9306      	str	r3, [sp, #24]
 8005a96:	950a      	str	r5, [sp, #40]	; 0x28
 8005a98:	f04f 33ff 	mov.w	r3, #4294967295
 8005a9c:	9302      	str	r3, [sp, #8]
 8005a9e:	4699      	mov	r9, r3
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	2312      	movs	r3, #18
 8005aa4:	920b      	str	r2, [sp, #44]	; 0x2c
 8005aa6:	e7aa      	b.n	80059fe <_dtoa_r+0x246>
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	930a      	str	r3, [sp, #40]	; 0x28
 8005aac:	e7f4      	b.n	8005a98 <_dtoa_r+0x2e0>
 8005aae:	2301      	movs	r3, #1
 8005ab0:	9302      	str	r3, [sp, #8]
 8005ab2:	4699      	mov	r9, r3
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	e7f5      	b.n	8005aa4 <_dtoa_r+0x2ec>
 8005ab8:	3101      	adds	r1, #1
 8005aba:	6071      	str	r1, [r6, #4]
 8005abc:	0052      	lsls	r2, r2, #1
 8005abe:	e7a2      	b.n	8005a06 <_dtoa_r+0x24e>
 8005ac0:	636f4361 	.word	0x636f4361
 8005ac4:	3fd287a7 	.word	0x3fd287a7
 8005ac8:	8b60c8b3 	.word	0x8b60c8b3
 8005acc:	3fc68a28 	.word	0x3fc68a28
 8005ad0:	509f79fb 	.word	0x509f79fb
 8005ad4:	3fd34413 	.word	0x3fd34413
 8005ad8:	7ff00000 	.word	0x7ff00000
 8005adc:	08007e65 	.word	0x08007e65
 8005ae0:	3ff80000 	.word	0x3ff80000
 8005ae4:	08007f20 	.word	0x08007f20
 8005ae8:	08007ef8 	.word	0x08007ef8
 8005aec:	08007e91 	.word	0x08007e91
 8005af0:	07f1      	lsls	r1, r6, #31
 8005af2:	d508      	bpl.n	8005b06 <_dtoa_r+0x34e>
 8005af4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005af8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005afc:	f7fa fd7c 	bl	80005f8 <__aeabi_dmul>
 8005b00:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005b04:	3501      	adds	r5, #1
 8005b06:	1076      	asrs	r6, r6, #1
 8005b08:	3708      	adds	r7, #8
 8005b0a:	2e00      	cmp	r6, #0
 8005b0c:	d1f0      	bne.n	8005af0 <_dtoa_r+0x338>
 8005b0e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005b12:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b16:	f7fa fe99 	bl	800084c <__aeabi_ddiv>
 8005b1a:	e9cd 0100 	strd	r0, r1, [sp]
 8005b1e:	e01a      	b.n	8005b56 <_dtoa_r+0x39e>
 8005b20:	2502      	movs	r5, #2
 8005b22:	e7a3      	b.n	8005a6c <_dtoa_r+0x2b4>
 8005b24:	f000 80a0 	beq.w	8005c68 <_dtoa_r+0x4b0>
 8005b28:	f1ca 0600 	rsb	r6, sl, #0
 8005b2c:	4b9f      	ldr	r3, [pc, #636]	; (8005dac <_dtoa_r+0x5f4>)
 8005b2e:	4fa0      	ldr	r7, [pc, #640]	; (8005db0 <_dtoa_r+0x5f8>)
 8005b30:	f006 020f 	and.w	r2, r6, #15
 8005b34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b40:	f7fa fd5a 	bl	80005f8 <__aeabi_dmul>
 8005b44:	e9cd 0100 	strd	r0, r1, [sp]
 8005b48:	1136      	asrs	r6, r6, #4
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	2502      	movs	r5, #2
 8005b4e:	2e00      	cmp	r6, #0
 8005b50:	d17f      	bne.n	8005c52 <_dtoa_r+0x49a>
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1e1      	bne.n	8005b1a <_dtoa_r+0x362>
 8005b56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f000 8087 	beq.w	8005c6c <_dtoa_r+0x4b4>
 8005b5e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005b62:	2200      	movs	r2, #0
 8005b64:	4b93      	ldr	r3, [pc, #588]	; (8005db4 <_dtoa_r+0x5fc>)
 8005b66:	4630      	mov	r0, r6
 8005b68:	4639      	mov	r1, r7
 8005b6a:	f7fa ffb7 	bl	8000adc <__aeabi_dcmplt>
 8005b6e:	2800      	cmp	r0, #0
 8005b70:	d07c      	beq.n	8005c6c <_dtoa_r+0x4b4>
 8005b72:	f1b9 0f00 	cmp.w	r9, #0
 8005b76:	d079      	beq.n	8005c6c <_dtoa_r+0x4b4>
 8005b78:	9b02      	ldr	r3, [sp, #8]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	dd35      	ble.n	8005bea <_dtoa_r+0x432>
 8005b7e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005b82:	9308      	str	r3, [sp, #32]
 8005b84:	4639      	mov	r1, r7
 8005b86:	2200      	movs	r2, #0
 8005b88:	4b8b      	ldr	r3, [pc, #556]	; (8005db8 <_dtoa_r+0x600>)
 8005b8a:	4630      	mov	r0, r6
 8005b8c:	f7fa fd34 	bl	80005f8 <__aeabi_dmul>
 8005b90:	e9cd 0100 	strd	r0, r1, [sp]
 8005b94:	9f02      	ldr	r7, [sp, #8]
 8005b96:	3501      	adds	r5, #1
 8005b98:	4628      	mov	r0, r5
 8005b9a:	f7fa fcc3 	bl	8000524 <__aeabi_i2d>
 8005b9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ba2:	f7fa fd29 	bl	80005f8 <__aeabi_dmul>
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	4b84      	ldr	r3, [pc, #528]	; (8005dbc <_dtoa_r+0x604>)
 8005baa:	f7fa fb6f 	bl	800028c <__adddf3>
 8005bae:	4605      	mov	r5, r0
 8005bb0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005bb4:	2f00      	cmp	r7, #0
 8005bb6:	d15d      	bne.n	8005c74 <_dtoa_r+0x4bc>
 8005bb8:	2200      	movs	r2, #0
 8005bba:	4b81      	ldr	r3, [pc, #516]	; (8005dc0 <_dtoa_r+0x608>)
 8005bbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005bc0:	f7fa fb62 	bl	8000288 <__aeabi_dsub>
 8005bc4:	462a      	mov	r2, r5
 8005bc6:	4633      	mov	r3, r6
 8005bc8:	e9cd 0100 	strd	r0, r1, [sp]
 8005bcc:	f7fa ffa4 	bl	8000b18 <__aeabi_dcmpgt>
 8005bd0:	2800      	cmp	r0, #0
 8005bd2:	f040 8288 	bne.w	80060e6 <_dtoa_r+0x92e>
 8005bd6:	462a      	mov	r2, r5
 8005bd8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005bdc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005be0:	f7fa ff7c 	bl	8000adc <__aeabi_dcmplt>
 8005be4:	2800      	cmp	r0, #0
 8005be6:	f040 827c 	bne.w	80060e2 <_dtoa_r+0x92a>
 8005bea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005bee:	e9cd 2300 	strd	r2, r3, [sp]
 8005bf2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f2c0 8150 	blt.w	8005e9a <_dtoa_r+0x6e2>
 8005bfa:	f1ba 0f0e 	cmp.w	sl, #14
 8005bfe:	f300 814c 	bgt.w	8005e9a <_dtoa_r+0x6e2>
 8005c02:	4b6a      	ldr	r3, [pc, #424]	; (8005dac <_dtoa_r+0x5f4>)
 8005c04:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005c08:	ed93 7b00 	vldr	d7, [r3]
 8005c0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005c14:	f280 80d8 	bge.w	8005dc8 <_dtoa_r+0x610>
 8005c18:	f1b9 0f00 	cmp.w	r9, #0
 8005c1c:	f300 80d4 	bgt.w	8005dc8 <_dtoa_r+0x610>
 8005c20:	f040 825e 	bne.w	80060e0 <_dtoa_r+0x928>
 8005c24:	2200      	movs	r2, #0
 8005c26:	4b66      	ldr	r3, [pc, #408]	; (8005dc0 <_dtoa_r+0x608>)
 8005c28:	ec51 0b17 	vmov	r0, r1, d7
 8005c2c:	f7fa fce4 	bl	80005f8 <__aeabi_dmul>
 8005c30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c34:	f7fa ff66 	bl	8000b04 <__aeabi_dcmpge>
 8005c38:	464f      	mov	r7, r9
 8005c3a:	464e      	mov	r6, r9
 8005c3c:	2800      	cmp	r0, #0
 8005c3e:	f040 8234 	bne.w	80060aa <_dtoa_r+0x8f2>
 8005c42:	2331      	movs	r3, #49	; 0x31
 8005c44:	f10b 0501 	add.w	r5, fp, #1
 8005c48:	f88b 3000 	strb.w	r3, [fp]
 8005c4c:	f10a 0a01 	add.w	sl, sl, #1
 8005c50:	e22f      	b.n	80060b2 <_dtoa_r+0x8fa>
 8005c52:	07f2      	lsls	r2, r6, #31
 8005c54:	d505      	bpl.n	8005c62 <_dtoa_r+0x4aa>
 8005c56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c5a:	f7fa fccd 	bl	80005f8 <__aeabi_dmul>
 8005c5e:	3501      	adds	r5, #1
 8005c60:	2301      	movs	r3, #1
 8005c62:	1076      	asrs	r6, r6, #1
 8005c64:	3708      	adds	r7, #8
 8005c66:	e772      	b.n	8005b4e <_dtoa_r+0x396>
 8005c68:	2502      	movs	r5, #2
 8005c6a:	e774      	b.n	8005b56 <_dtoa_r+0x39e>
 8005c6c:	f8cd a020 	str.w	sl, [sp, #32]
 8005c70:	464f      	mov	r7, r9
 8005c72:	e791      	b.n	8005b98 <_dtoa_r+0x3e0>
 8005c74:	4b4d      	ldr	r3, [pc, #308]	; (8005dac <_dtoa_r+0x5f4>)
 8005c76:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005c7a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005c7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d047      	beq.n	8005d14 <_dtoa_r+0x55c>
 8005c84:	4602      	mov	r2, r0
 8005c86:	460b      	mov	r3, r1
 8005c88:	2000      	movs	r0, #0
 8005c8a:	494e      	ldr	r1, [pc, #312]	; (8005dc4 <_dtoa_r+0x60c>)
 8005c8c:	f7fa fdde 	bl	800084c <__aeabi_ddiv>
 8005c90:	462a      	mov	r2, r5
 8005c92:	4633      	mov	r3, r6
 8005c94:	f7fa faf8 	bl	8000288 <__aeabi_dsub>
 8005c98:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005c9c:	465d      	mov	r5, fp
 8005c9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ca2:	f7fa ff59 	bl	8000b58 <__aeabi_d2iz>
 8005ca6:	4606      	mov	r6, r0
 8005ca8:	f7fa fc3c 	bl	8000524 <__aeabi_i2d>
 8005cac:	4602      	mov	r2, r0
 8005cae:	460b      	mov	r3, r1
 8005cb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005cb4:	f7fa fae8 	bl	8000288 <__aeabi_dsub>
 8005cb8:	3630      	adds	r6, #48	; 0x30
 8005cba:	f805 6b01 	strb.w	r6, [r5], #1
 8005cbe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005cc2:	e9cd 0100 	strd	r0, r1, [sp]
 8005cc6:	f7fa ff09 	bl	8000adc <__aeabi_dcmplt>
 8005cca:	2800      	cmp	r0, #0
 8005ccc:	d163      	bne.n	8005d96 <_dtoa_r+0x5de>
 8005cce:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005cd2:	2000      	movs	r0, #0
 8005cd4:	4937      	ldr	r1, [pc, #220]	; (8005db4 <_dtoa_r+0x5fc>)
 8005cd6:	f7fa fad7 	bl	8000288 <__aeabi_dsub>
 8005cda:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005cde:	f7fa fefd 	bl	8000adc <__aeabi_dcmplt>
 8005ce2:	2800      	cmp	r0, #0
 8005ce4:	f040 80b7 	bne.w	8005e56 <_dtoa_r+0x69e>
 8005ce8:	eba5 030b 	sub.w	r3, r5, fp
 8005cec:	429f      	cmp	r7, r3
 8005cee:	f77f af7c 	ble.w	8005bea <_dtoa_r+0x432>
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	4b30      	ldr	r3, [pc, #192]	; (8005db8 <_dtoa_r+0x600>)
 8005cf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005cfa:	f7fa fc7d 	bl	80005f8 <__aeabi_dmul>
 8005cfe:	2200      	movs	r2, #0
 8005d00:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005d04:	4b2c      	ldr	r3, [pc, #176]	; (8005db8 <_dtoa_r+0x600>)
 8005d06:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d0a:	f7fa fc75 	bl	80005f8 <__aeabi_dmul>
 8005d0e:	e9cd 0100 	strd	r0, r1, [sp]
 8005d12:	e7c4      	b.n	8005c9e <_dtoa_r+0x4e6>
 8005d14:	462a      	mov	r2, r5
 8005d16:	4633      	mov	r3, r6
 8005d18:	f7fa fc6e 	bl	80005f8 <__aeabi_dmul>
 8005d1c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005d20:	eb0b 0507 	add.w	r5, fp, r7
 8005d24:	465e      	mov	r6, fp
 8005d26:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d2a:	f7fa ff15 	bl	8000b58 <__aeabi_d2iz>
 8005d2e:	4607      	mov	r7, r0
 8005d30:	f7fa fbf8 	bl	8000524 <__aeabi_i2d>
 8005d34:	3730      	adds	r7, #48	; 0x30
 8005d36:	4602      	mov	r2, r0
 8005d38:	460b      	mov	r3, r1
 8005d3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d3e:	f7fa faa3 	bl	8000288 <__aeabi_dsub>
 8005d42:	f806 7b01 	strb.w	r7, [r6], #1
 8005d46:	42ae      	cmp	r6, r5
 8005d48:	e9cd 0100 	strd	r0, r1, [sp]
 8005d4c:	f04f 0200 	mov.w	r2, #0
 8005d50:	d126      	bne.n	8005da0 <_dtoa_r+0x5e8>
 8005d52:	4b1c      	ldr	r3, [pc, #112]	; (8005dc4 <_dtoa_r+0x60c>)
 8005d54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d58:	f7fa fa98 	bl	800028c <__adddf3>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	460b      	mov	r3, r1
 8005d60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d64:	f7fa fed8 	bl	8000b18 <__aeabi_dcmpgt>
 8005d68:	2800      	cmp	r0, #0
 8005d6a:	d174      	bne.n	8005e56 <_dtoa_r+0x69e>
 8005d6c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005d70:	2000      	movs	r0, #0
 8005d72:	4914      	ldr	r1, [pc, #80]	; (8005dc4 <_dtoa_r+0x60c>)
 8005d74:	f7fa fa88 	bl	8000288 <__aeabi_dsub>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d80:	f7fa feac 	bl	8000adc <__aeabi_dcmplt>
 8005d84:	2800      	cmp	r0, #0
 8005d86:	f43f af30 	beq.w	8005bea <_dtoa_r+0x432>
 8005d8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005d8e:	2b30      	cmp	r3, #48	; 0x30
 8005d90:	f105 32ff 	add.w	r2, r5, #4294967295
 8005d94:	d002      	beq.n	8005d9c <_dtoa_r+0x5e4>
 8005d96:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005d9a:	e04a      	b.n	8005e32 <_dtoa_r+0x67a>
 8005d9c:	4615      	mov	r5, r2
 8005d9e:	e7f4      	b.n	8005d8a <_dtoa_r+0x5d2>
 8005da0:	4b05      	ldr	r3, [pc, #20]	; (8005db8 <_dtoa_r+0x600>)
 8005da2:	f7fa fc29 	bl	80005f8 <__aeabi_dmul>
 8005da6:	e9cd 0100 	strd	r0, r1, [sp]
 8005daa:	e7bc      	b.n	8005d26 <_dtoa_r+0x56e>
 8005dac:	08007f20 	.word	0x08007f20
 8005db0:	08007ef8 	.word	0x08007ef8
 8005db4:	3ff00000 	.word	0x3ff00000
 8005db8:	40240000 	.word	0x40240000
 8005dbc:	401c0000 	.word	0x401c0000
 8005dc0:	40140000 	.word	0x40140000
 8005dc4:	3fe00000 	.word	0x3fe00000
 8005dc8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005dcc:	465d      	mov	r5, fp
 8005dce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005dd2:	4630      	mov	r0, r6
 8005dd4:	4639      	mov	r1, r7
 8005dd6:	f7fa fd39 	bl	800084c <__aeabi_ddiv>
 8005dda:	f7fa febd 	bl	8000b58 <__aeabi_d2iz>
 8005dde:	4680      	mov	r8, r0
 8005de0:	f7fa fba0 	bl	8000524 <__aeabi_i2d>
 8005de4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005de8:	f7fa fc06 	bl	80005f8 <__aeabi_dmul>
 8005dec:	4602      	mov	r2, r0
 8005dee:	460b      	mov	r3, r1
 8005df0:	4630      	mov	r0, r6
 8005df2:	4639      	mov	r1, r7
 8005df4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005df8:	f7fa fa46 	bl	8000288 <__aeabi_dsub>
 8005dfc:	f805 6b01 	strb.w	r6, [r5], #1
 8005e00:	eba5 060b 	sub.w	r6, r5, fp
 8005e04:	45b1      	cmp	r9, r6
 8005e06:	4602      	mov	r2, r0
 8005e08:	460b      	mov	r3, r1
 8005e0a:	d139      	bne.n	8005e80 <_dtoa_r+0x6c8>
 8005e0c:	f7fa fa3e 	bl	800028c <__adddf3>
 8005e10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e14:	4606      	mov	r6, r0
 8005e16:	460f      	mov	r7, r1
 8005e18:	f7fa fe7e 	bl	8000b18 <__aeabi_dcmpgt>
 8005e1c:	b9c8      	cbnz	r0, 8005e52 <_dtoa_r+0x69a>
 8005e1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e22:	4630      	mov	r0, r6
 8005e24:	4639      	mov	r1, r7
 8005e26:	f7fa fe4f 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e2a:	b110      	cbz	r0, 8005e32 <_dtoa_r+0x67a>
 8005e2c:	f018 0f01 	tst.w	r8, #1
 8005e30:	d10f      	bne.n	8005e52 <_dtoa_r+0x69a>
 8005e32:	9904      	ldr	r1, [sp, #16]
 8005e34:	4620      	mov	r0, r4
 8005e36:	f000 fcaa 	bl	800678e <_Bfree>
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e3e:	702b      	strb	r3, [r5, #0]
 8005e40:	f10a 0301 	add.w	r3, sl, #1
 8005e44:	6013      	str	r3, [r2, #0]
 8005e46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f000 8241 	beq.w	80062d0 <_dtoa_r+0xb18>
 8005e4e:	601d      	str	r5, [r3, #0]
 8005e50:	e23e      	b.n	80062d0 <_dtoa_r+0xb18>
 8005e52:	f8cd a020 	str.w	sl, [sp, #32]
 8005e56:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005e5a:	2a39      	cmp	r2, #57	; 0x39
 8005e5c:	f105 33ff 	add.w	r3, r5, #4294967295
 8005e60:	d108      	bne.n	8005e74 <_dtoa_r+0x6bc>
 8005e62:	459b      	cmp	fp, r3
 8005e64:	d10a      	bne.n	8005e7c <_dtoa_r+0x6c4>
 8005e66:	9b08      	ldr	r3, [sp, #32]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	9308      	str	r3, [sp, #32]
 8005e6c:	2330      	movs	r3, #48	; 0x30
 8005e6e:	f88b 3000 	strb.w	r3, [fp]
 8005e72:	465b      	mov	r3, fp
 8005e74:	781a      	ldrb	r2, [r3, #0]
 8005e76:	3201      	adds	r2, #1
 8005e78:	701a      	strb	r2, [r3, #0]
 8005e7a:	e78c      	b.n	8005d96 <_dtoa_r+0x5de>
 8005e7c:	461d      	mov	r5, r3
 8005e7e:	e7ea      	b.n	8005e56 <_dtoa_r+0x69e>
 8005e80:	2200      	movs	r2, #0
 8005e82:	4b9b      	ldr	r3, [pc, #620]	; (80060f0 <_dtoa_r+0x938>)
 8005e84:	f7fa fbb8 	bl	80005f8 <__aeabi_dmul>
 8005e88:	2200      	movs	r2, #0
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	4606      	mov	r6, r0
 8005e8e:	460f      	mov	r7, r1
 8005e90:	f7fa fe1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e94:	2800      	cmp	r0, #0
 8005e96:	d09a      	beq.n	8005dce <_dtoa_r+0x616>
 8005e98:	e7cb      	b.n	8005e32 <_dtoa_r+0x67a>
 8005e9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e9c:	2a00      	cmp	r2, #0
 8005e9e:	f000 808b 	beq.w	8005fb8 <_dtoa_r+0x800>
 8005ea2:	9a06      	ldr	r2, [sp, #24]
 8005ea4:	2a01      	cmp	r2, #1
 8005ea6:	dc6e      	bgt.n	8005f86 <_dtoa_r+0x7ce>
 8005ea8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005eaa:	2a00      	cmp	r2, #0
 8005eac:	d067      	beq.n	8005f7e <_dtoa_r+0x7c6>
 8005eae:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005eb2:	9f07      	ldr	r7, [sp, #28]
 8005eb4:	9d05      	ldr	r5, [sp, #20]
 8005eb6:	9a05      	ldr	r2, [sp, #20]
 8005eb8:	2101      	movs	r1, #1
 8005eba:	441a      	add	r2, r3
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	9205      	str	r2, [sp, #20]
 8005ec0:	4498      	add	r8, r3
 8005ec2:	f000 fd04 	bl	80068ce <__i2b>
 8005ec6:	4606      	mov	r6, r0
 8005ec8:	2d00      	cmp	r5, #0
 8005eca:	dd0c      	ble.n	8005ee6 <_dtoa_r+0x72e>
 8005ecc:	f1b8 0f00 	cmp.w	r8, #0
 8005ed0:	dd09      	ble.n	8005ee6 <_dtoa_r+0x72e>
 8005ed2:	4545      	cmp	r5, r8
 8005ed4:	9a05      	ldr	r2, [sp, #20]
 8005ed6:	462b      	mov	r3, r5
 8005ed8:	bfa8      	it	ge
 8005eda:	4643      	movge	r3, r8
 8005edc:	1ad2      	subs	r2, r2, r3
 8005ede:	9205      	str	r2, [sp, #20]
 8005ee0:	1aed      	subs	r5, r5, r3
 8005ee2:	eba8 0803 	sub.w	r8, r8, r3
 8005ee6:	9b07      	ldr	r3, [sp, #28]
 8005ee8:	b1eb      	cbz	r3, 8005f26 <_dtoa_r+0x76e>
 8005eea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d067      	beq.n	8005fc0 <_dtoa_r+0x808>
 8005ef0:	b18f      	cbz	r7, 8005f16 <_dtoa_r+0x75e>
 8005ef2:	4631      	mov	r1, r6
 8005ef4:	463a      	mov	r2, r7
 8005ef6:	4620      	mov	r0, r4
 8005ef8:	f000 fd88 	bl	8006a0c <__pow5mult>
 8005efc:	9a04      	ldr	r2, [sp, #16]
 8005efe:	4601      	mov	r1, r0
 8005f00:	4606      	mov	r6, r0
 8005f02:	4620      	mov	r0, r4
 8005f04:	f000 fcec 	bl	80068e0 <__multiply>
 8005f08:	9904      	ldr	r1, [sp, #16]
 8005f0a:	9008      	str	r0, [sp, #32]
 8005f0c:	4620      	mov	r0, r4
 8005f0e:	f000 fc3e 	bl	800678e <_Bfree>
 8005f12:	9b08      	ldr	r3, [sp, #32]
 8005f14:	9304      	str	r3, [sp, #16]
 8005f16:	9b07      	ldr	r3, [sp, #28]
 8005f18:	1bda      	subs	r2, r3, r7
 8005f1a:	d004      	beq.n	8005f26 <_dtoa_r+0x76e>
 8005f1c:	9904      	ldr	r1, [sp, #16]
 8005f1e:	4620      	mov	r0, r4
 8005f20:	f000 fd74 	bl	8006a0c <__pow5mult>
 8005f24:	9004      	str	r0, [sp, #16]
 8005f26:	2101      	movs	r1, #1
 8005f28:	4620      	mov	r0, r4
 8005f2a:	f000 fcd0 	bl	80068ce <__i2b>
 8005f2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f30:	4607      	mov	r7, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f000 81d0 	beq.w	80062d8 <_dtoa_r+0xb20>
 8005f38:	461a      	mov	r2, r3
 8005f3a:	4601      	mov	r1, r0
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	f000 fd65 	bl	8006a0c <__pow5mult>
 8005f42:	9b06      	ldr	r3, [sp, #24]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	4607      	mov	r7, r0
 8005f48:	dc40      	bgt.n	8005fcc <_dtoa_r+0x814>
 8005f4a:	9b00      	ldr	r3, [sp, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d139      	bne.n	8005fc4 <_dtoa_r+0x80c>
 8005f50:	9b01      	ldr	r3, [sp, #4]
 8005f52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d136      	bne.n	8005fc8 <_dtoa_r+0x810>
 8005f5a:	9b01      	ldr	r3, [sp, #4]
 8005f5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f60:	0d1b      	lsrs	r3, r3, #20
 8005f62:	051b      	lsls	r3, r3, #20
 8005f64:	b12b      	cbz	r3, 8005f72 <_dtoa_r+0x7ba>
 8005f66:	9b05      	ldr	r3, [sp, #20]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	9305      	str	r3, [sp, #20]
 8005f6c:	f108 0801 	add.w	r8, r8, #1
 8005f70:	2301      	movs	r3, #1
 8005f72:	9307      	str	r3, [sp, #28]
 8005f74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d12a      	bne.n	8005fd0 <_dtoa_r+0x818>
 8005f7a:	2001      	movs	r0, #1
 8005f7c:	e030      	b.n	8005fe0 <_dtoa_r+0x828>
 8005f7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005f80:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005f84:	e795      	b.n	8005eb2 <_dtoa_r+0x6fa>
 8005f86:	9b07      	ldr	r3, [sp, #28]
 8005f88:	f109 37ff 	add.w	r7, r9, #4294967295
 8005f8c:	42bb      	cmp	r3, r7
 8005f8e:	bfbf      	itttt	lt
 8005f90:	9b07      	ldrlt	r3, [sp, #28]
 8005f92:	9707      	strlt	r7, [sp, #28]
 8005f94:	1afa      	sublt	r2, r7, r3
 8005f96:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005f98:	bfbb      	ittet	lt
 8005f9a:	189b      	addlt	r3, r3, r2
 8005f9c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005f9e:	1bdf      	subge	r7, r3, r7
 8005fa0:	2700      	movlt	r7, #0
 8005fa2:	f1b9 0f00 	cmp.w	r9, #0
 8005fa6:	bfb5      	itete	lt
 8005fa8:	9b05      	ldrlt	r3, [sp, #20]
 8005faa:	9d05      	ldrge	r5, [sp, #20]
 8005fac:	eba3 0509 	sublt.w	r5, r3, r9
 8005fb0:	464b      	movge	r3, r9
 8005fb2:	bfb8      	it	lt
 8005fb4:	2300      	movlt	r3, #0
 8005fb6:	e77e      	b.n	8005eb6 <_dtoa_r+0x6fe>
 8005fb8:	9f07      	ldr	r7, [sp, #28]
 8005fba:	9d05      	ldr	r5, [sp, #20]
 8005fbc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005fbe:	e783      	b.n	8005ec8 <_dtoa_r+0x710>
 8005fc0:	9a07      	ldr	r2, [sp, #28]
 8005fc2:	e7ab      	b.n	8005f1c <_dtoa_r+0x764>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	e7d4      	b.n	8005f72 <_dtoa_r+0x7ba>
 8005fc8:	9b00      	ldr	r3, [sp, #0]
 8005fca:	e7d2      	b.n	8005f72 <_dtoa_r+0x7ba>
 8005fcc:	2300      	movs	r3, #0
 8005fce:	9307      	str	r3, [sp, #28]
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005fd6:	6918      	ldr	r0, [r3, #16]
 8005fd8:	f000 fc2b 	bl	8006832 <__hi0bits>
 8005fdc:	f1c0 0020 	rsb	r0, r0, #32
 8005fe0:	4440      	add	r0, r8
 8005fe2:	f010 001f 	ands.w	r0, r0, #31
 8005fe6:	d047      	beq.n	8006078 <_dtoa_r+0x8c0>
 8005fe8:	f1c0 0320 	rsb	r3, r0, #32
 8005fec:	2b04      	cmp	r3, #4
 8005fee:	dd3b      	ble.n	8006068 <_dtoa_r+0x8b0>
 8005ff0:	9b05      	ldr	r3, [sp, #20]
 8005ff2:	f1c0 001c 	rsb	r0, r0, #28
 8005ff6:	4403      	add	r3, r0
 8005ff8:	9305      	str	r3, [sp, #20]
 8005ffa:	4405      	add	r5, r0
 8005ffc:	4480      	add	r8, r0
 8005ffe:	9b05      	ldr	r3, [sp, #20]
 8006000:	2b00      	cmp	r3, #0
 8006002:	dd05      	ble.n	8006010 <_dtoa_r+0x858>
 8006004:	461a      	mov	r2, r3
 8006006:	9904      	ldr	r1, [sp, #16]
 8006008:	4620      	mov	r0, r4
 800600a:	f000 fd4d 	bl	8006aa8 <__lshift>
 800600e:	9004      	str	r0, [sp, #16]
 8006010:	f1b8 0f00 	cmp.w	r8, #0
 8006014:	dd05      	ble.n	8006022 <_dtoa_r+0x86a>
 8006016:	4639      	mov	r1, r7
 8006018:	4642      	mov	r2, r8
 800601a:	4620      	mov	r0, r4
 800601c:	f000 fd44 	bl	8006aa8 <__lshift>
 8006020:	4607      	mov	r7, r0
 8006022:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006024:	b353      	cbz	r3, 800607c <_dtoa_r+0x8c4>
 8006026:	4639      	mov	r1, r7
 8006028:	9804      	ldr	r0, [sp, #16]
 800602a:	f000 fd91 	bl	8006b50 <__mcmp>
 800602e:	2800      	cmp	r0, #0
 8006030:	da24      	bge.n	800607c <_dtoa_r+0x8c4>
 8006032:	2300      	movs	r3, #0
 8006034:	220a      	movs	r2, #10
 8006036:	9904      	ldr	r1, [sp, #16]
 8006038:	4620      	mov	r0, r4
 800603a:	f000 fbbf 	bl	80067bc <__multadd>
 800603e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006040:	9004      	str	r0, [sp, #16]
 8006042:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006046:	2b00      	cmp	r3, #0
 8006048:	f000 814d 	beq.w	80062e6 <_dtoa_r+0xb2e>
 800604c:	2300      	movs	r3, #0
 800604e:	4631      	mov	r1, r6
 8006050:	220a      	movs	r2, #10
 8006052:	4620      	mov	r0, r4
 8006054:	f000 fbb2 	bl	80067bc <__multadd>
 8006058:	9b02      	ldr	r3, [sp, #8]
 800605a:	2b00      	cmp	r3, #0
 800605c:	4606      	mov	r6, r0
 800605e:	dc4f      	bgt.n	8006100 <_dtoa_r+0x948>
 8006060:	9b06      	ldr	r3, [sp, #24]
 8006062:	2b02      	cmp	r3, #2
 8006064:	dd4c      	ble.n	8006100 <_dtoa_r+0x948>
 8006066:	e011      	b.n	800608c <_dtoa_r+0x8d4>
 8006068:	d0c9      	beq.n	8005ffe <_dtoa_r+0x846>
 800606a:	9a05      	ldr	r2, [sp, #20]
 800606c:	331c      	adds	r3, #28
 800606e:	441a      	add	r2, r3
 8006070:	9205      	str	r2, [sp, #20]
 8006072:	441d      	add	r5, r3
 8006074:	4498      	add	r8, r3
 8006076:	e7c2      	b.n	8005ffe <_dtoa_r+0x846>
 8006078:	4603      	mov	r3, r0
 800607a:	e7f6      	b.n	800606a <_dtoa_r+0x8b2>
 800607c:	f1b9 0f00 	cmp.w	r9, #0
 8006080:	dc38      	bgt.n	80060f4 <_dtoa_r+0x93c>
 8006082:	9b06      	ldr	r3, [sp, #24]
 8006084:	2b02      	cmp	r3, #2
 8006086:	dd35      	ble.n	80060f4 <_dtoa_r+0x93c>
 8006088:	f8cd 9008 	str.w	r9, [sp, #8]
 800608c:	9b02      	ldr	r3, [sp, #8]
 800608e:	b963      	cbnz	r3, 80060aa <_dtoa_r+0x8f2>
 8006090:	4639      	mov	r1, r7
 8006092:	2205      	movs	r2, #5
 8006094:	4620      	mov	r0, r4
 8006096:	f000 fb91 	bl	80067bc <__multadd>
 800609a:	4601      	mov	r1, r0
 800609c:	4607      	mov	r7, r0
 800609e:	9804      	ldr	r0, [sp, #16]
 80060a0:	f000 fd56 	bl	8006b50 <__mcmp>
 80060a4:	2800      	cmp	r0, #0
 80060a6:	f73f adcc 	bgt.w	8005c42 <_dtoa_r+0x48a>
 80060aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060ac:	465d      	mov	r5, fp
 80060ae:	ea6f 0a03 	mvn.w	sl, r3
 80060b2:	f04f 0900 	mov.w	r9, #0
 80060b6:	4639      	mov	r1, r7
 80060b8:	4620      	mov	r0, r4
 80060ba:	f000 fb68 	bl	800678e <_Bfree>
 80060be:	2e00      	cmp	r6, #0
 80060c0:	f43f aeb7 	beq.w	8005e32 <_dtoa_r+0x67a>
 80060c4:	f1b9 0f00 	cmp.w	r9, #0
 80060c8:	d005      	beq.n	80060d6 <_dtoa_r+0x91e>
 80060ca:	45b1      	cmp	r9, r6
 80060cc:	d003      	beq.n	80060d6 <_dtoa_r+0x91e>
 80060ce:	4649      	mov	r1, r9
 80060d0:	4620      	mov	r0, r4
 80060d2:	f000 fb5c 	bl	800678e <_Bfree>
 80060d6:	4631      	mov	r1, r6
 80060d8:	4620      	mov	r0, r4
 80060da:	f000 fb58 	bl	800678e <_Bfree>
 80060de:	e6a8      	b.n	8005e32 <_dtoa_r+0x67a>
 80060e0:	2700      	movs	r7, #0
 80060e2:	463e      	mov	r6, r7
 80060e4:	e7e1      	b.n	80060aa <_dtoa_r+0x8f2>
 80060e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80060ea:	463e      	mov	r6, r7
 80060ec:	e5a9      	b.n	8005c42 <_dtoa_r+0x48a>
 80060ee:	bf00      	nop
 80060f0:	40240000 	.word	0x40240000
 80060f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060f6:	f8cd 9008 	str.w	r9, [sp, #8]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	f000 80fa 	beq.w	80062f4 <_dtoa_r+0xb3c>
 8006100:	2d00      	cmp	r5, #0
 8006102:	dd05      	ble.n	8006110 <_dtoa_r+0x958>
 8006104:	4631      	mov	r1, r6
 8006106:	462a      	mov	r2, r5
 8006108:	4620      	mov	r0, r4
 800610a:	f000 fccd 	bl	8006aa8 <__lshift>
 800610e:	4606      	mov	r6, r0
 8006110:	9b07      	ldr	r3, [sp, #28]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d04c      	beq.n	80061b0 <_dtoa_r+0x9f8>
 8006116:	6871      	ldr	r1, [r6, #4]
 8006118:	4620      	mov	r0, r4
 800611a:	f000 fb04 	bl	8006726 <_Balloc>
 800611e:	6932      	ldr	r2, [r6, #16]
 8006120:	3202      	adds	r2, #2
 8006122:	4605      	mov	r5, r0
 8006124:	0092      	lsls	r2, r2, #2
 8006126:	f106 010c 	add.w	r1, r6, #12
 800612a:	300c      	adds	r0, #12
 800612c:	f000 faf0 	bl	8006710 <memcpy>
 8006130:	2201      	movs	r2, #1
 8006132:	4629      	mov	r1, r5
 8006134:	4620      	mov	r0, r4
 8006136:	f000 fcb7 	bl	8006aa8 <__lshift>
 800613a:	9b00      	ldr	r3, [sp, #0]
 800613c:	f8cd b014 	str.w	fp, [sp, #20]
 8006140:	f003 0301 	and.w	r3, r3, #1
 8006144:	46b1      	mov	r9, r6
 8006146:	9307      	str	r3, [sp, #28]
 8006148:	4606      	mov	r6, r0
 800614a:	4639      	mov	r1, r7
 800614c:	9804      	ldr	r0, [sp, #16]
 800614e:	f7ff faa7 	bl	80056a0 <quorem>
 8006152:	4649      	mov	r1, r9
 8006154:	4605      	mov	r5, r0
 8006156:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800615a:	9804      	ldr	r0, [sp, #16]
 800615c:	f000 fcf8 	bl	8006b50 <__mcmp>
 8006160:	4632      	mov	r2, r6
 8006162:	9000      	str	r0, [sp, #0]
 8006164:	4639      	mov	r1, r7
 8006166:	4620      	mov	r0, r4
 8006168:	f000 fd0c 	bl	8006b84 <__mdiff>
 800616c:	68c3      	ldr	r3, [r0, #12]
 800616e:	4602      	mov	r2, r0
 8006170:	bb03      	cbnz	r3, 80061b4 <_dtoa_r+0x9fc>
 8006172:	4601      	mov	r1, r0
 8006174:	9008      	str	r0, [sp, #32]
 8006176:	9804      	ldr	r0, [sp, #16]
 8006178:	f000 fcea 	bl	8006b50 <__mcmp>
 800617c:	9a08      	ldr	r2, [sp, #32]
 800617e:	4603      	mov	r3, r0
 8006180:	4611      	mov	r1, r2
 8006182:	4620      	mov	r0, r4
 8006184:	9308      	str	r3, [sp, #32]
 8006186:	f000 fb02 	bl	800678e <_Bfree>
 800618a:	9b08      	ldr	r3, [sp, #32]
 800618c:	b9a3      	cbnz	r3, 80061b8 <_dtoa_r+0xa00>
 800618e:	9a06      	ldr	r2, [sp, #24]
 8006190:	b992      	cbnz	r2, 80061b8 <_dtoa_r+0xa00>
 8006192:	9a07      	ldr	r2, [sp, #28]
 8006194:	b982      	cbnz	r2, 80061b8 <_dtoa_r+0xa00>
 8006196:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800619a:	d029      	beq.n	80061f0 <_dtoa_r+0xa38>
 800619c:	9b00      	ldr	r3, [sp, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	dd01      	ble.n	80061a6 <_dtoa_r+0x9ee>
 80061a2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80061a6:	9b05      	ldr	r3, [sp, #20]
 80061a8:	1c5d      	adds	r5, r3, #1
 80061aa:	f883 8000 	strb.w	r8, [r3]
 80061ae:	e782      	b.n	80060b6 <_dtoa_r+0x8fe>
 80061b0:	4630      	mov	r0, r6
 80061b2:	e7c2      	b.n	800613a <_dtoa_r+0x982>
 80061b4:	2301      	movs	r3, #1
 80061b6:	e7e3      	b.n	8006180 <_dtoa_r+0x9c8>
 80061b8:	9a00      	ldr	r2, [sp, #0]
 80061ba:	2a00      	cmp	r2, #0
 80061bc:	db04      	blt.n	80061c8 <_dtoa_r+0xa10>
 80061be:	d125      	bne.n	800620c <_dtoa_r+0xa54>
 80061c0:	9a06      	ldr	r2, [sp, #24]
 80061c2:	bb1a      	cbnz	r2, 800620c <_dtoa_r+0xa54>
 80061c4:	9a07      	ldr	r2, [sp, #28]
 80061c6:	bb0a      	cbnz	r2, 800620c <_dtoa_r+0xa54>
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	ddec      	ble.n	80061a6 <_dtoa_r+0x9ee>
 80061cc:	2201      	movs	r2, #1
 80061ce:	9904      	ldr	r1, [sp, #16]
 80061d0:	4620      	mov	r0, r4
 80061d2:	f000 fc69 	bl	8006aa8 <__lshift>
 80061d6:	4639      	mov	r1, r7
 80061d8:	9004      	str	r0, [sp, #16]
 80061da:	f000 fcb9 	bl	8006b50 <__mcmp>
 80061de:	2800      	cmp	r0, #0
 80061e0:	dc03      	bgt.n	80061ea <_dtoa_r+0xa32>
 80061e2:	d1e0      	bne.n	80061a6 <_dtoa_r+0x9ee>
 80061e4:	f018 0f01 	tst.w	r8, #1
 80061e8:	d0dd      	beq.n	80061a6 <_dtoa_r+0x9ee>
 80061ea:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80061ee:	d1d8      	bne.n	80061a2 <_dtoa_r+0x9ea>
 80061f0:	9b05      	ldr	r3, [sp, #20]
 80061f2:	9a05      	ldr	r2, [sp, #20]
 80061f4:	1c5d      	adds	r5, r3, #1
 80061f6:	2339      	movs	r3, #57	; 0x39
 80061f8:	7013      	strb	r3, [r2, #0]
 80061fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80061fe:	2b39      	cmp	r3, #57	; 0x39
 8006200:	f105 32ff 	add.w	r2, r5, #4294967295
 8006204:	d04f      	beq.n	80062a6 <_dtoa_r+0xaee>
 8006206:	3301      	adds	r3, #1
 8006208:	7013      	strb	r3, [r2, #0]
 800620a:	e754      	b.n	80060b6 <_dtoa_r+0x8fe>
 800620c:	9a05      	ldr	r2, [sp, #20]
 800620e:	2b00      	cmp	r3, #0
 8006210:	f102 0501 	add.w	r5, r2, #1
 8006214:	dd06      	ble.n	8006224 <_dtoa_r+0xa6c>
 8006216:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800621a:	d0e9      	beq.n	80061f0 <_dtoa_r+0xa38>
 800621c:	f108 0801 	add.w	r8, r8, #1
 8006220:	9b05      	ldr	r3, [sp, #20]
 8006222:	e7c2      	b.n	80061aa <_dtoa_r+0x9f2>
 8006224:	9a02      	ldr	r2, [sp, #8]
 8006226:	f805 8c01 	strb.w	r8, [r5, #-1]
 800622a:	eba5 030b 	sub.w	r3, r5, fp
 800622e:	4293      	cmp	r3, r2
 8006230:	d021      	beq.n	8006276 <_dtoa_r+0xabe>
 8006232:	2300      	movs	r3, #0
 8006234:	220a      	movs	r2, #10
 8006236:	9904      	ldr	r1, [sp, #16]
 8006238:	4620      	mov	r0, r4
 800623a:	f000 fabf 	bl	80067bc <__multadd>
 800623e:	45b1      	cmp	r9, r6
 8006240:	9004      	str	r0, [sp, #16]
 8006242:	f04f 0300 	mov.w	r3, #0
 8006246:	f04f 020a 	mov.w	r2, #10
 800624a:	4649      	mov	r1, r9
 800624c:	4620      	mov	r0, r4
 800624e:	d105      	bne.n	800625c <_dtoa_r+0xaa4>
 8006250:	f000 fab4 	bl	80067bc <__multadd>
 8006254:	4681      	mov	r9, r0
 8006256:	4606      	mov	r6, r0
 8006258:	9505      	str	r5, [sp, #20]
 800625a:	e776      	b.n	800614a <_dtoa_r+0x992>
 800625c:	f000 faae 	bl	80067bc <__multadd>
 8006260:	4631      	mov	r1, r6
 8006262:	4681      	mov	r9, r0
 8006264:	2300      	movs	r3, #0
 8006266:	220a      	movs	r2, #10
 8006268:	4620      	mov	r0, r4
 800626a:	f000 faa7 	bl	80067bc <__multadd>
 800626e:	4606      	mov	r6, r0
 8006270:	e7f2      	b.n	8006258 <_dtoa_r+0xaa0>
 8006272:	f04f 0900 	mov.w	r9, #0
 8006276:	2201      	movs	r2, #1
 8006278:	9904      	ldr	r1, [sp, #16]
 800627a:	4620      	mov	r0, r4
 800627c:	f000 fc14 	bl	8006aa8 <__lshift>
 8006280:	4639      	mov	r1, r7
 8006282:	9004      	str	r0, [sp, #16]
 8006284:	f000 fc64 	bl	8006b50 <__mcmp>
 8006288:	2800      	cmp	r0, #0
 800628a:	dcb6      	bgt.n	80061fa <_dtoa_r+0xa42>
 800628c:	d102      	bne.n	8006294 <_dtoa_r+0xadc>
 800628e:	f018 0f01 	tst.w	r8, #1
 8006292:	d1b2      	bne.n	80061fa <_dtoa_r+0xa42>
 8006294:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006298:	2b30      	cmp	r3, #48	; 0x30
 800629a:	f105 32ff 	add.w	r2, r5, #4294967295
 800629e:	f47f af0a 	bne.w	80060b6 <_dtoa_r+0x8fe>
 80062a2:	4615      	mov	r5, r2
 80062a4:	e7f6      	b.n	8006294 <_dtoa_r+0xadc>
 80062a6:	4593      	cmp	fp, r2
 80062a8:	d105      	bne.n	80062b6 <_dtoa_r+0xafe>
 80062aa:	2331      	movs	r3, #49	; 0x31
 80062ac:	f10a 0a01 	add.w	sl, sl, #1
 80062b0:	f88b 3000 	strb.w	r3, [fp]
 80062b4:	e6ff      	b.n	80060b6 <_dtoa_r+0x8fe>
 80062b6:	4615      	mov	r5, r2
 80062b8:	e79f      	b.n	80061fa <_dtoa_r+0xa42>
 80062ba:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006320 <_dtoa_r+0xb68>
 80062be:	e007      	b.n	80062d0 <_dtoa_r+0xb18>
 80062c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062c2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006324 <_dtoa_r+0xb6c>
 80062c6:	b11b      	cbz	r3, 80062d0 <_dtoa_r+0xb18>
 80062c8:	f10b 0308 	add.w	r3, fp, #8
 80062cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80062ce:	6013      	str	r3, [r2, #0]
 80062d0:	4658      	mov	r0, fp
 80062d2:	b017      	add	sp, #92	; 0x5c
 80062d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062d8:	9b06      	ldr	r3, [sp, #24]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	f77f ae35 	ble.w	8005f4a <_dtoa_r+0x792>
 80062e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062e2:	9307      	str	r3, [sp, #28]
 80062e4:	e649      	b.n	8005f7a <_dtoa_r+0x7c2>
 80062e6:	9b02      	ldr	r3, [sp, #8]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	dc03      	bgt.n	80062f4 <_dtoa_r+0xb3c>
 80062ec:	9b06      	ldr	r3, [sp, #24]
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	f73f aecc 	bgt.w	800608c <_dtoa_r+0x8d4>
 80062f4:	465d      	mov	r5, fp
 80062f6:	4639      	mov	r1, r7
 80062f8:	9804      	ldr	r0, [sp, #16]
 80062fa:	f7ff f9d1 	bl	80056a0 <quorem>
 80062fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006302:	f805 8b01 	strb.w	r8, [r5], #1
 8006306:	9a02      	ldr	r2, [sp, #8]
 8006308:	eba5 030b 	sub.w	r3, r5, fp
 800630c:	429a      	cmp	r2, r3
 800630e:	ddb0      	ble.n	8006272 <_dtoa_r+0xaba>
 8006310:	2300      	movs	r3, #0
 8006312:	220a      	movs	r2, #10
 8006314:	9904      	ldr	r1, [sp, #16]
 8006316:	4620      	mov	r0, r4
 8006318:	f000 fa50 	bl	80067bc <__multadd>
 800631c:	9004      	str	r0, [sp, #16]
 800631e:	e7ea      	b.n	80062f6 <_dtoa_r+0xb3e>
 8006320:	08007e64 	.word	0x08007e64
 8006324:	08007e88 	.word	0x08007e88

08006328 <__sflush_r>:
 8006328:	898a      	ldrh	r2, [r1, #12]
 800632a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800632e:	4605      	mov	r5, r0
 8006330:	0710      	lsls	r0, r2, #28
 8006332:	460c      	mov	r4, r1
 8006334:	d458      	bmi.n	80063e8 <__sflush_r+0xc0>
 8006336:	684b      	ldr	r3, [r1, #4]
 8006338:	2b00      	cmp	r3, #0
 800633a:	dc05      	bgt.n	8006348 <__sflush_r+0x20>
 800633c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800633e:	2b00      	cmp	r3, #0
 8006340:	dc02      	bgt.n	8006348 <__sflush_r+0x20>
 8006342:	2000      	movs	r0, #0
 8006344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006348:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800634a:	2e00      	cmp	r6, #0
 800634c:	d0f9      	beq.n	8006342 <__sflush_r+0x1a>
 800634e:	2300      	movs	r3, #0
 8006350:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006354:	682f      	ldr	r7, [r5, #0]
 8006356:	6a21      	ldr	r1, [r4, #32]
 8006358:	602b      	str	r3, [r5, #0]
 800635a:	d032      	beq.n	80063c2 <__sflush_r+0x9a>
 800635c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800635e:	89a3      	ldrh	r3, [r4, #12]
 8006360:	075a      	lsls	r2, r3, #29
 8006362:	d505      	bpl.n	8006370 <__sflush_r+0x48>
 8006364:	6863      	ldr	r3, [r4, #4]
 8006366:	1ac0      	subs	r0, r0, r3
 8006368:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800636a:	b10b      	cbz	r3, 8006370 <__sflush_r+0x48>
 800636c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800636e:	1ac0      	subs	r0, r0, r3
 8006370:	2300      	movs	r3, #0
 8006372:	4602      	mov	r2, r0
 8006374:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006376:	6a21      	ldr	r1, [r4, #32]
 8006378:	4628      	mov	r0, r5
 800637a:	47b0      	blx	r6
 800637c:	1c43      	adds	r3, r0, #1
 800637e:	89a3      	ldrh	r3, [r4, #12]
 8006380:	d106      	bne.n	8006390 <__sflush_r+0x68>
 8006382:	6829      	ldr	r1, [r5, #0]
 8006384:	291d      	cmp	r1, #29
 8006386:	d848      	bhi.n	800641a <__sflush_r+0xf2>
 8006388:	4a29      	ldr	r2, [pc, #164]	; (8006430 <__sflush_r+0x108>)
 800638a:	40ca      	lsrs	r2, r1
 800638c:	07d6      	lsls	r6, r2, #31
 800638e:	d544      	bpl.n	800641a <__sflush_r+0xf2>
 8006390:	2200      	movs	r2, #0
 8006392:	6062      	str	r2, [r4, #4]
 8006394:	04d9      	lsls	r1, r3, #19
 8006396:	6922      	ldr	r2, [r4, #16]
 8006398:	6022      	str	r2, [r4, #0]
 800639a:	d504      	bpl.n	80063a6 <__sflush_r+0x7e>
 800639c:	1c42      	adds	r2, r0, #1
 800639e:	d101      	bne.n	80063a4 <__sflush_r+0x7c>
 80063a0:	682b      	ldr	r3, [r5, #0]
 80063a2:	b903      	cbnz	r3, 80063a6 <__sflush_r+0x7e>
 80063a4:	6560      	str	r0, [r4, #84]	; 0x54
 80063a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063a8:	602f      	str	r7, [r5, #0]
 80063aa:	2900      	cmp	r1, #0
 80063ac:	d0c9      	beq.n	8006342 <__sflush_r+0x1a>
 80063ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063b2:	4299      	cmp	r1, r3
 80063b4:	d002      	beq.n	80063bc <__sflush_r+0x94>
 80063b6:	4628      	mov	r0, r5
 80063b8:	f000 fc9e 	bl	8006cf8 <_free_r>
 80063bc:	2000      	movs	r0, #0
 80063be:	6360      	str	r0, [r4, #52]	; 0x34
 80063c0:	e7c0      	b.n	8006344 <__sflush_r+0x1c>
 80063c2:	2301      	movs	r3, #1
 80063c4:	4628      	mov	r0, r5
 80063c6:	47b0      	blx	r6
 80063c8:	1c41      	adds	r1, r0, #1
 80063ca:	d1c8      	bne.n	800635e <__sflush_r+0x36>
 80063cc:	682b      	ldr	r3, [r5, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d0c5      	beq.n	800635e <__sflush_r+0x36>
 80063d2:	2b1d      	cmp	r3, #29
 80063d4:	d001      	beq.n	80063da <__sflush_r+0xb2>
 80063d6:	2b16      	cmp	r3, #22
 80063d8:	d101      	bne.n	80063de <__sflush_r+0xb6>
 80063da:	602f      	str	r7, [r5, #0]
 80063dc:	e7b1      	b.n	8006342 <__sflush_r+0x1a>
 80063de:	89a3      	ldrh	r3, [r4, #12]
 80063e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063e4:	81a3      	strh	r3, [r4, #12]
 80063e6:	e7ad      	b.n	8006344 <__sflush_r+0x1c>
 80063e8:	690f      	ldr	r7, [r1, #16]
 80063ea:	2f00      	cmp	r7, #0
 80063ec:	d0a9      	beq.n	8006342 <__sflush_r+0x1a>
 80063ee:	0793      	lsls	r3, r2, #30
 80063f0:	680e      	ldr	r6, [r1, #0]
 80063f2:	bf08      	it	eq
 80063f4:	694b      	ldreq	r3, [r1, #20]
 80063f6:	600f      	str	r7, [r1, #0]
 80063f8:	bf18      	it	ne
 80063fa:	2300      	movne	r3, #0
 80063fc:	eba6 0807 	sub.w	r8, r6, r7
 8006400:	608b      	str	r3, [r1, #8]
 8006402:	f1b8 0f00 	cmp.w	r8, #0
 8006406:	dd9c      	ble.n	8006342 <__sflush_r+0x1a>
 8006408:	4643      	mov	r3, r8
 800640a:	463a      	mov	r2, r7
 800640c:	6a21      	ldr	r1, [r4, #32]
 800640e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006410:	4628      	mov	r0, r5
 8006412:	47b0      	blx	r6
 8006414:	2800      	cmp	r0, #0
 8006416:	dc06      	bgt.n	8006426 <__sflush_r+0xfe>
 8006418:	89a3      	ldrh	r3, [r4, #12]
 800641a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800641e:	81a3      	strh	r3, [r4, #12]
 8006420:	f04f 30ff 	mov.w	r0, #4294967295
 8006424:	e78e      	b.n	8006344 <__sflush_r+0x1c>
 8006426:	4407      	add	r7, r0
 8006428:	eba8 0800 	sub.w	r8, r8, r0
 800642c:	e7e9      	b.n	8006402 <__sflush_r+0xda>
 800642e:	bf00      	nop
 8006430:	20400001 	.word	0x20400001

08006434 <_fflush_r>:
 8006434:	b538      	push	{r3, r4, r5, lr}
 8006436:	690b      	ldr	r3, [r1, #16]
 8006438:	4605      	mov	r5, r0
 800643a:	460c      	mov	r4, r1
 800643c:	b1db      	cbz	r3, 8006476 <_fflush_r+0x42>
 800643e:	b118      	cbz	r0, 8006448 <_fflush_r+0x14>
 8006440:	6983      	ldr	r3, [r0, #24]
 8006442:	b90b      	cbnz	r3, 8006448 <_fflush_r+0x14>
 8006444:	f000 f860 	bl	8006508 <__sinit>
 8006448:	4b0c      	ldr	r3, [pc, #48]	; (800647c <_fflush_r+0x48>)
 800644a:	429c      	cmp	r4, r3
 800644c:	d109      	bne.n	8006462 <_fflush_r+0x2e>
 800644e:	686c      	ldr	r4, [r5, #4]
 8006450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006454:	b17b      	cbz	r3, 8006476 <_fflush_r+0x42>
 8006456:	4621      	mov	r1, r4
 8006458:	4628      	mov	r0, r5
 800645a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800645e:	f7ff bf63 	b.w	8006328 <__sflush_r>
 8006462:	4b07      	ldr	r3, [pc, #28]	; (8006480 <_fflush_r+0x4c>)
 8006464:	429c      	cmp	r4, r3
 8006466:	d101      	bne.n	800646c <_fflush_r+0x38>
 8006468:	68ac      	ldr	r4, [r5, #8]
 800646a:	e7f1      	b.n	8006450 <_fflush_r+0x1c>
 800646c:	4b05      	ldr	r3, [pc, #20]	; (8006484 <_fflush_r+0x50>)
 800646e:	429c      	cmp	r4, r3
 8006470:	bf08      	it	eq
 8006472:	68ec      	ldreq	r4, [r5, #12]
 8006474:	e7ec      	b.n	8006450 <_fflush_r+0x1c>
 8006476:	2000      	movs	r0, #0
 8006478:	bd38      	pop	{r3, r4, r5, pc}
 800647a:	bf00      	nop
 800647c:	08007eb8 	.word	0x08007eb8
 8006480:	08007ed8 	.word	0x08007ed8
 8006484:	08007e98 	.word	0x08007e98

08006488 <std>:
 8006488:	2300      	movs	r3, #0
 800648a:	b510      	push	{r4, lr}
 800648c:	4604      	mov	r4, r0
 800648e:	e9c0 3300 	strd	r3, r3, [r0]
 8006492:	6083      	str	r3, [r0, #8]
 8006494:	8181      	strh	r1, [r0, #12]
 8006496:	6643      	str	r3, [r0, #100]	; 0x64
 8006498:	81c2      	strh	r2, [r0, #14]
 800649a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800649e:	6183      	str	r3, [r0, #24]
 80064a0:	4619      	mov	r1, r3
 80064a2:	2208      	movs	r2, #8
 80064a4:	305c      	adds	r0, #92	; 0x5c
 80064a6:	f7fe fb5b 	bl	8004b60 <memset>
 80064aa:	4b05      	ldr	r3, [pc, #20]	; (80064c0 <std+0x38>)
 80064ac:	6263      	str	r3, [r4, #36]	; 0x24
 80064ae:	4b05      	ldr	r3, [pc, #20]	; (80064c4 <std+0x3c>)
 80064b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80064b2:	4b05      	ldr	r3, [pc, #20]	; (80064c8 <std+0x40>)
 80064b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80064b6:	4b05      	ldr	r3, [pc, #20]	; (80064cc <std+0x44>)
 80064b8:	6224      	str	r4, [r4, #32]
 80064ba:	6323      	str	r3, [r4, #48]	; 0x30
 80064bc:	bd10      	pop	{r4, pc}
 80064be:	bf00      	nop
 80064c0:	080070e9 	.word	0x080070e9
 80064c4:	0800710b 	.word	0x0800710b
 80064c8:	08007143 	.word	0x08007143
 80064cc:	08007167 	.word	0x08007167

080064d0 <_cleanup_r>:
 80064d0:	4901      	ldr	r1, [pc, #4]	; (80064d8 <_cleanup_r+0x8>)
 80064d2:	f000 b885 	b.w	80065e0 <_fwalk_reent>
 80064d6:	bf00      	nop
 80064d8:	08006435 	.word	0x08006435

080064dc <__sfmoreglue>:
 80064dc:	b570      	push	{r4, r5, r6, lr}
 80064de:	1e4a      	subs	r2, r1, #1
 80064e0:	2568      	movs	r5, #104	; 0x68
 80064e2:	4355      	muls	r5, r2
 80064e4:	460e      	mov	r6, r1
 80064e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80064ea:	f000 fc53 	bl	8006d94 <_malloc_r>
 80064ee:	4604      	mov	r4, r0
 80064f0:	b140      	cbz	r0, 8006504 <__sfmoreglue+0x28>
 80064f2:	2100      	movs	r1, #0
 80064f4:	e9c0 1600 	strd	r1, r6, [r0]
 80064f8:	300c      	adds	r0, #12
 80064fa:	60a0      	str	r0, [r4, #8]
 80064fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006500:	f7fe fb2e 	bl	8004b60 <memset>
 8006504:	4620      	mov	r0, r4
 8006506:	bd70      	pop	{r4, r5, r6, pc}

08006508 <__sinit>:
 8006508:	6983      	ldr	r3, [r0, #24]
 800650a:	b510      	push	{r4, lr}
 800650c:	4604      	mov	r4, r0
 800650e:	bb33      	cbnz	r3, 800655e <__sinit+0x56>
 8006510:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006514:	6503      	str	r3, [r0, #80]	; 0x50
 8006516:	4b12      	ldr	r3, [pc, #72]	; (8006560 <__sinit+0x58>)
 8006518:	4a12      	ldr	r2, [pc, #72]	; (8006564 <__sinit+0x5c>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	6282      	str	r2, [r0, #40]	; 0x28
 800651e:	4298      	cmp	r0, r3
 8006520:	bf04      	itt	eq
 8006522:	2301      	moveq	r3, #1
 8006524:	6183      	streq	r3, [r0, #24]
 8006526:	f000 f81f 	bl	8006568 <__sfp>
 800652a:	6060      	str	r0, [r4, #4]
 800652c:	4620      	mov	r0, r4
 800652e:	f000 f81b 	bl	8006568 <__sfp>
 8006532:	60a0      	str	r0, [r4, #8]
 8006534:	4620      	mov	r0, r4
 8006536:	f000 f817 	bl	8006568 <__sfp>
 800653a:	2200      	movs	r2, #0
 800653c:	60e0      	str	r0, [r4, #12]
 800653e:	2104      	movs	r1, #4
 8006540:	6860      	ldr	r0, [r4, #4]
 8006542:	f7ff ffa1 	bl	8006488 <std>
 8006546:	2201      	movs	r2, #1
 8006548:	2109      	movs	r1, #9
 800654a:	68a0      	ldr	r0, [r4, #8]
 800654c:	f7ff ff9c 	bl	8006488 <std>
 8006550:	2202      	movs	r2, #2
 8006552:	2112      	movs	r1, #18
 8006554:	68e0      	ldr	r0, [r4, #12]
 8006556:	f7ff ff97 	bl	8006488 <std>
 800655a:	2301      	movs	r3, #1
 800655c:	61a3      	str	r3, [r4, #24]
 800655e:	bd10      	pop	{r4, pc}
 8006560:	08007e50 	.word	0x08007e50
 8006564:	080064d1 	.word	0x080064d1

08006568 <__sfp>:
 8006568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800656a:	4b1b      	ldr	r3, [pc, #108]	; (80065d8 <__sfp+0x70>)
 800656c:	681e      	ldr	r6, [r3, #0]
 800656e:	69b3      	ldr	r3, [r6, #24]
 8006570:	4607      	mov	r7, r0
 8006572:	b913      	cbnz	r3, 800657a <__sfp+0x12>
 8006574:	4630      	mov	r0, r6
 8006576:	f7ff ffc7 	bl	8006508 <__sinit>
 800657a:	3648      	adds	r6, #72	; 0x48
 800657c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006580:	3b01      	subs	r3, #1
 8006582:	d503      	bpl.n	800658c <__sfp+0x24>
 8006584:	6833      	ldr	r3, [r6, #0]
 8006586:	b133      	cbz	r3, 8006596 <__sfp+0x2e>
 8006588:	6836      	ldr	r6, [r6, #0]
 800658a:	e7f7      	b.n	800657c <__sfp+0x14>
 800658c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006590:	b16d      	cbz	r5, 80065ae <__sfp+0x46>
 8006592:	3468      	adds	r4, #104	; 0x68
 8006594:	e7f4      	b.n	8006580 <__sfp+0x18>
 8006596:	2104      	movs	r1, #4
 8006598:	4638      	mov	r0, r7
 800659a:	f7ff ff9f 	bl	80064dc <__sfmoreglue>
 800659e:	6030      	str	r0, [r6, #0]
 80065a0:	2800      	cmp	r0, #0
 80065a2:	d1f1      	bne.n	8006588 <__sfp+0x20>
 80065a4:	230c      	movs	r3, #12
 80065a6:	603b      	str	r3, [r7, #0]
 80065a8:	4604      	mov	r4, r0
 80065aa:	4620      	mov	r0, r4
 80065ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065ae:	4b0b      	ldr	r3, [pc, #44]	; (80065dc <__sfp+0x74>)
 80065b0:	6665      	str	r5, [r4, #100]	; 0x64
 80065b2:	e9c4 5500 	strd	r5, r5, [r4]
 80065b6:	60a5      	str	r5, [r4, #8]
 80065b8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80065bc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80065c0:	2208      	movs	r2, #8
 80065c2:	4629      	mov	r1, r5
 80065c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80065c8:	f7fe faca 	bl	8004b60 <memset>
 80065cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80065d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80065d4:	e7e9      	b.n	80065aa <__sfp+0x42>
 80065d6:	bf00      	nop
 80065d8:	08007e50 	.word	0x08007e50
 80065dc:	ffff0001 	.word	0xffff0001

080065e0 <_fwalk_reent>:
 80065e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065e4:	4680      	mov	r8, r0
 80065e6:	4689      	mov	r9, r1
 80065e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80065ec:	2600      	movs	r6, #0
 80065ee:	b914      	cbnz	r4, 80065f6 <_fwalk_reent+0x16>
 80065f0:	4630      	mov	r0, r6
 80065f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065f6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80065fa:	3f01      	subs	r7, #1
 80065fc:	d501      	bpl.n	8006602 <_fwalk_reent+0x22>
 80065fe:	6824      	ldr	r4, [r4, #0]
 8006600:	e7f5      	b.n	80065ee <_fwalk_reent+0xe>
 8006602:	89ab      	ldrh	r3, [r5, #12]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d907      	bls.n	8006618 <_fwalk_reent+0x38>
 8006608:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800660c:	3301      	adds	r3, #1
 800660e:	d003      	beq.n	8006618 <_fwalk_reent+0x38>
 8006610:	4629      	mov	r1, r5
 8006612:	4640      	mov	r0, r8
 8006614:	47c8      	blx	r9
 8006616:	4306      	orrs	r6, r0
 8006618:	3568      	adds	r5, #104	; 0x68
 800661a:	e7ee      	b.n	80065fa <_fwalk_reent+0x1a>

0800661c <_localeconv_r>:
 800661c:	4b04      	ldr	r3, [pc, #16]	; (8006630 <_localeconv_r+0x14>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	6a18      	ldr	r0, [r3, #32]
 8006622:	4b04      	ldr	r3, [pc, #16]	; (8006634 <_localeconv_r+0x18>)
 8006624:	2800      	cmp	r0, #0
 8006626:	bf08      	it	eq
 8006628:	4618      	moveq	r0, r3
 800662a:	30f0      	adds	r0, #240	; 0xf0
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	2000000c 	.word	0x2000000c
 8006634:	20000070 	.word	0x20000070

08006638 <__swhatbuf_r>:
 8006638:	b570      	push	{r4, r5, r6, lr}
 800663a:	460e      	mov	r6, r1
 800663c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006640:	2900      	cmp	r1, #0
 8006642:	b096      	sub	sp, #88	; 0x58
 8006644:	4614      	mov	r4, r2
 8006646:	461d      	mov	r5, r3
 8006648:	da07      	bge.n	800665a <__swhatbuf_r+0x22>
 800664a:	2300      	movs	r3, #0
 800664c:	602b      	str	r3, [r5, #0]
 800664e:	89b3      	ldrh	r3, [r6, #12]
 8006650:	061a      	lsls	r2, r3, #24
 8006652:	d410      	bmi.n	8006676 <__swhatbuf_r+0x3e>
 8006654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006658:	e00e      	b.n	8006678 <__swhatbuf_r+0x40>
 800665a:	466a      	mov	r2, sp
 800665c:	f000 fdaa 	bl	80071b4 <_fstat_r>
 8006660:	2800      	cmp	r0, #0
 8006662:	dbf2      	blt.n	800664a <__swhatbuf_r+0x12>
 8006664:	9a01      	ldr	r2, [sp, #4]
 8006666:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800666a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800666e:	425a      	negs	r2, r3
 8006670:	415a      	adcs	r2, r3
 8006672:	602a      	str	r2, [r5, #0]
 8006674:	e7ee      	b.n	8006654 <__swhatbuf_r+0x1c>
 8006676:	2340      	movs	r3, #64	; 0x40
 8006678:	2000      	movs	r0, #0
 800667a:	6023      	str	r3, [r4, #0]
 800667c:	b016      	add	sp, #88	; 0x58
 800667e:	bd70      	pop	{r4, r5, r6, pc}

08006680 <__smakebuf_r>:
 8006680:	898b      	ldrh	r3, [r1, #12]
 8006682:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006684:	079d      	lsls	r5, r3, #30
 8006686:	4606      	mov	r6, r0
 8006688:	460c      	mov	r4, r1
 800668a:	d507      	bpl.n	800669c <__smakebuf_r+0x1c>
 800668c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006690:	6023      	str	r3, [r4, #0]
 8006692:	6123      	str	r3, [r4, #16]
 8006694:	2301      	movs	r3, #1
 8006696:	6163      	str	r3, [r4, #20]
 8006698:	b002      	add	sp, #8
 800669a:	bd70      	pop	{r4, r5, r6, pc}
 800669c:	ab01      	add	r3, sp, #4
 800669e:	466a      	mov	r2, sp
 80066a0:	f7ff ffca 	bl	8006638 <__swhatbuf_r>
 80066a4:	9900      	ldr	r1, [sp, #0]
 80066a6:	4605      	mov	r5, r0
 80066a8:	4630      	mov	r0, r6
 80066aa:	f000 fb73 	bl	8006d94 <_malloc_r>
 80066ae:	b948      	cbnz	r0, 80066c4 <__smakebuf_r+0x44>
 80066b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066b4:	059a      	lsls	r2, r3, #22
 80066b6:	d4ef      	bmi.n	8006698 <__smakebuf_r+0x18>
 80066b8:	f023 0303 	bic.w	r3, r3, #3
 80066bc:	f043 0302 	orr.w	r3, r3, #2
 80066c0:	81a3      	strh	r3, [r4, #12]
 80066c2:	e7e3      	b.n	800668c <__smakebuf_r+0xc>
 80066c4:	4b0d      	ldr	r3, [pc, #52]	; (80066fc <__smakebuf_r+0x7c>)
 80066c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80066c8:	89a3      	ldrh	r3, [r4, #12]
 80066ca:	6020      	str	r0, [r4, #0]
 80066cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066d0:	81a3      	strh	r3, [r4, #12]
 80066d2:	9b00      	ldr	r3, [sp, #0]
 80066d4:	6163      	str	r3, [r4, #20]
 80066d6:	9b01      	ldr	r3, [sp, #4]
 80066d8:	6120      	str	r0, [r4, #16]
 80066da:	b15b      	cbz	r3, 80066f4 <__smakebuf_r+0x74>
 80066dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066e0:	4630      	mov	r0, r6
 80066e2:	f000 fd79 	bl	80071d8 <_isatty_r>
 80066e6:	b128      	cbz	r0, 80066f4 <__smakebuf_r+0x74>
 80066e8:	89a3      	ldrh	r3, [r4, #12]
 80066ea:	f023 0303 	bic.w	r3, r3, #3
 80066ee:	f043 0301 	orr.w	r3, r3, #1
 80066f2:	81a3      	strh	r3, [r4, #12]
 80066f4:	89a3      	ldrh	r3, [r4, #12]
 80066f6:	431d      	orrs	r5, r3
 80066f8:	81a5      	strh	r5, [r4, #12]
 80066fa:	e7cd      	b.n	8006698 <__smakebuf_r+0x18>
 80066fc:	080064d1 	.word	0x080064d1

08006700 <malloc>:
 8006700:	4b02      	ldr	r3, [pc, #8]	; (800670c <malloc+0xc>)
 8006702:	4601      	mov	r1, r0
 8006704:	6818      	ldr	r0, [r3, #0]
 8006706:	f000 bb45 	b.w	8006d94 <_malloc_r>
 800670a:	bf00      	nop
 800670c:	2000000c 	.word	0x2000000c

08006710 <memcpy>:
 8006710:	b510      	push	{r4, lr}
 8006712:	1e43      	subs	r3, r0, #1
 8006714:	440a      	add	r2, r1
 8006716:	4291      	cmp	r1, r2
 8006718:	d100      	bne.n	800671c <memcpy+0xc>
 800671a:	bd10      	pop	{r4, pc}
 800671c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006720:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006724:	e7f7      	b.n	8006716 <memcpy+0x6>

08006726 <_Balloc>:
 8006726:	b570      	push	{r4, r5, r6, lr}
 8006728:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800672a:	4604      	mov	r4, r0
 800672c:	460e      	mov	r6, r1
 800672e:	b93d      	cbnz	r5, 8006740 <_Balloc+0x1a>
 8006730:	2010      	movs	r0, #16
 8006732:	f7ff ffe5 	bl	8006700 <malloc>
 8006736:	6260      	str	r0, [r4, #36]	; 0x24
 8006738:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800673c:	6005      	str	r5, [r0, #0]
 800673e:	60c5      	str	r5, [r0, #12]
 8006740:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006742:	68eb      	ldr	r3, [r5, #12]
 8006744:	b183      	cbz	r3, 8006768 <_Balloc+0x42>
 8006746:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800674e:	b9b8      	cbnz	r0, 8006780 <_Balloc+0x5a>
 8006750:	2101      	movs	r1, #1
 8006752:	fa01 f506 	lsl.w	r5, r1, r6
 8006756:	1d6a      	adds	r2, r5, #5
 8006758:	0092      	lsls	r2, r2, #2
 800675a:	4620      	mov	r0, r4
 800675c:	f000 fabe 	bl	8006cdc <_calloc_r>
 8006760:	b160      	cbz	r0, 800677c <_Balloc+0x56>
 8006762:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006766:	e00e      	b.n	8006786 <_Balloc+0x60>
 8006768:	2221      	movs	r2, #33	; 0x21
 800676a:	2104      	movs	r1, #4
 800676c:	4620      	mov	r0, r4
 800676e:	f000 fab5 	bl	8006cdc <_calloc_r>
 8006772:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006774:	60e8      	str	r0, [r5, #12]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1e4      	bne.n	8006746 <_Balloc+0x20>
 800677c:	2000      	movs	r0, #0
 800677e:	bd70      	pop	{r4, r5, r6, pc}
 8006780:	6802      	ldr	r2, [r0, #0]
 8006782:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006786:	2300      	movs	r3, #0
 8006788:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800678c:	e7f7      	b.n	800677e <_Balloc+0x58>

0800678e <_Bfree>:
 800678e:	b570      	push	{r4, r5, r6, lr}
 8006790:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006792:	4606      	mov	r6, r0
 8006794:	460d      	mov	r5, r1
 8006796:	b93c      	cbnz	r4, 80067a8 <_Bfree+0x1a>
 8006798:	2010      	movs	r0, #16
 800679a:	f7ff ffb1 	bl	8006700 <malloc>
 800679e:	6270      	str	r0, [r6, #36]	; 0x24
 80067a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80067a4:	6004      	str	r4, [r0, #0]
 80067a6:	60c4      	str	r4, [r0, #12]
 80067a8:	b13d      	cbz	r5, 80067ba <_Bfree+0x2c>
 80067aa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80067ac:	686a      	ldr	r2, [r5, #4]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80067b4:	6029      	str	r1, [r5, #0]
 80067b6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80067ba:	bd70      	pop	{r4, r5, r6, pc}

080067bc <__multadd>:
 80067bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067c0:	690d      	ldr	r5, [r1, #16]
 80067c2:	461f      	mov	r7, r3
 80067c4:	4606      	mov	r6, r0
 80067c6:	460c      	mov	r4, r1
 80067c8:	f101 0c14 	add.w	ip, r1, #20
 80067cc:	2300      	movs	r3, #0
 80067ce:	f8dc 0000 	ldr.w	r0, [ip]
 80067d2:	b281      	uxth	r1, r0
 80067d4:	fb02 7101 	mla	r1, r2, r1, r7
 80067d8:	0c0f      	lsrs	r7, r1, #16
 80067da:	0c00      	lsrs	r0, r0, #16
 80067dc:	fb02 7000 	mla	r0, r2, r0, r7
 80067e0:	b289      	uxth	r1, r1
 80067e2:	3301      	adds	r3, #1
 80067e4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80067e8:	429d      	cmp	r5, r3
 80067ea:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80067ee:	f84c 1b04 	str.w	r1, [ip], #4
 80067f2:	dcec      	bgt.n	80067ce <__multadd+0x12>
 80067f4:	b1d7      	cbz	r7, 800682c <__multadd+0x70>
 80067f6:	68a3      	ldr	r3, [r4, #8]
 80067f8:	42ab      	cmp	r3, r5
 80067fa:	dc12      	bgt.n	8006822 <__multadd+0x66>
 80067fc:	6861      	ldr	r1, [r4, #4]
 80067fe:	4630      	mov	r0, r6
 8006800:	3101      	adds	r1, #1
 8006802:	f7ff ff90 	bl	8006726 <_Balloc>
 8006806:	6922      	ldr	r2, [r4, #16]
 8006808:	3202      	adds	r2, #2
 800680a:	f104 010c 	add.w	r1, r4, #12
 800680e:	4680      	mov	r8, r0
 8006810:	0092      	lsls	r2, r2, #2
 8006812:	300c      	adds	r0, #12
 8006814:	f7ff ff7c 	bl	8006710 <memcpy>
 8006818:	4621      	mov	r1, r4
 800681a:	4630      	mov	r0, r6
 800681c:	f7ff ffb7 	bl	800678e <_Bfree>
 8006820:	4644      	mov	r4, r8
 8006822:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006826:	3501      	adds	r5, #1
 8006828:	615f      	str	r7, [r3, #20]
 800682a:	6125      	str	r5, [r4, #16]
 800682c:	4620      	mov	r0, r4
 800682e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006832 <__hi0bits>:
 8006832:	0c02      	lsrs	r2, r0, #16
 8006834:	0412      	lsls	r2, r2, #16
 8006836:	4603      	mov	r3, r0
 8006838:	b9b2      	cbnz	r2, 8006868 <__hi0bits+0x36>
 800683a:	0403      	lsls	r3, r0, #16
 800683c:	2010      	movs	r0, #16
 800683e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006842:	bf04      	itt	eq
 8006844:	021b      	lsleq	r3, r3, #8
 8006846:	3008      	addeq	r0, #8
 8006848:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800684c:	bf04      	itt	eq
 800684e:	011b      	lsleq	r3, r3, #4
 8006850:	3004      	addeq	r0, #4
 8006852:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006856:	bf04      	itt	eq
 8006858:	009b      	lsleq	r3, r3, #2
 800685a:	3002      	addeq	r0, #2
 800685c:	2b00      	cmp	r3, #0
 800685e:	db06      	blt.n	800686e <__hi0bits+0x3c>
 8006860:	005b      	lsls	r3, r3, #1
 8006862:	d503      	bpl.n	800686c <__hi0bits+0x3a>
 8006864:	3001      	adds	r0, #1
 8006866:	4770      	bx	lr
 8006868:	2000      	movs	r0, #0
 800686a:	e7e8      	b.n	800683e <__hi0bits+0xc>
 800686c:	2020      	movs	r0, #32
 800686e:	4770      	bx	lr

08006870 <__lo0bits>:
 8006870:	6803      	ldr	r3, [r0, #0]
 8006872:	f013 0207 	ands.w	r2, r3, #7
 8006876:	4601      	mov	r1, r0
 8006878:	d00b      	beq.n	8006892 <__lo0bits+0x22>
 800687a:	07da      	lsls	r2, r3, #31
 800687c:	d423      	bmi.n	80068c6 <__lo0bits+0x56>
 800687e:	0798      	lsls	r0, r3, #30
 8006880:	bf49      	itett	mi
 8006882:	085b      	lsrmi	r3, r3, #1
 8006884:	089b      	lsrpl	r3, r3, #2
 8006886:	2001      	movmi	r0, #1
 8006888:	600b      	strmi	r3, [r1, #0]
 800688a:	bf5c      	itt	pl
 800688c:	600b      	strpl	r3, [r1, #0]
 800688e:	2002      	movpl	r0, #2
 8006890:	4770      	bx	lr
 8006892:	b298      	uxth	r0, r3
 8006894:	b9a8      	cbnz	r0, 80068c2 <__lo0bits+0x52>
 8006896:	0c1b      	lsrs	r3, r3, #16
 8006898:	2010      	movs	r0, #16
 800689a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800689e:	bf04      	itt	eq
 80068a0:	0a1b      	lsreq	r3, r3, #8
 80068a2:	3008      	addeq	r0, #8
 80068a4:	071a      	lsls	r2, r3, #28
 80068a6:	bf04      	itt	eq
 80068a8:	091b      	lsreq	r3, r3, #4
 80068aa:	3004      	addeq	r0, #4
 80068ac:	079a      	lsls	r2, r3, #30
 80068ae:	bf04      	itt	eq
 80068b0:	089b      	lsreq	r3, r3, #2
 80068b2:	3002      	addeq	r0, #2
 80068b4:	07da      	lsls	r2, r3, #31
 80068b6:	d402      	bmi.n	80068be <__lo0bits+0x4e>
 80068b8:	085b      	lsrs	r3, r3, #1
 80068ba:	d006      	beq.n	80068ca <__lo0bits+0x5a>
 80068bc:	3001      	adds	r0, #1
 80068be:	600b      	str	r3, [r1, #0]
 80068c0:	4770      	bx	lr
 80068c2:	4610      	mov	r0, r2
 80068c4:	e7e9      	b.n	800689a <__lo0bits+0x2a>
 80068c6:	2000      	movs	r0, #0
 80068c8:	4770      	bx	lr
 80068ca:	2020      	movs	r0, #32
 80068cc:	4770      	bx	lr

080068ce <__i2b>:
 80068ce:	b510      	push	{r4, lr}
 80068d0:	460c      	mov	r4, r1
 80068d2:	2101      	movs	r1, #1
 80068d4:	f7ff ff27 	bl	8006726 <_Balloc>
 80068d8:	2201      	movs	r2, #1
 80068da:	6144      	str	r4, [r0, #20]
 80068dc:	6102      	str	r2, [r0, #16]
 80068de:	bd10      	pop	{r4, pc}

080068e0 <__multiply>:
 80068e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068e4:	4614      	mov	r4, r2
 80068e6:	690a      	ldr	r2, [r1, #16]
 80068e8:	6923      	ldr	r3, [r4, #16]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	bfb8      	it	lt
 80068ee:	460b      	movlt	r3, r1
 80068f0:	4688      	mov	r8, r1
 80068f2:	bfbc      	itt	lt
 80068f4:	46a0      	movlt	r8, r4
 80068f6:	461c      	movlt	r4, r3
 80068f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80068fc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006900:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006904:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006908:	eb07 0609 	add.w	r6, r7, r9
 800690c:	42b3      	cmp	r3, r6
 800690e:	bfb8      	it	lt
 8006910:	3101      	addlt	r1, #1
 8006912:	f7ff ff08 	bl	8006726 <_Balloc>
 8006916:	f100 0514 	add.w	r5, r0, #20
 800691a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800691e:	462b      	mov	r3, r5
 8006920:	2200      	movs	r2, #0
 8006922:	4573      	cmp	r3, lr
 8006924:	d316      	bcc.n	8006954 <__multiply+0x74>
 8006926:	f104 0214 	add.w	r2, r4, #20
 800692a:	f108 0114 	add.w	r1, r8, #20
 800692e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006932:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006936:	9300      	str	r3, [sp, #0]
 8006938:	9b00      	ldr	r3, [sp, #0]
 800693a:	9201      	str	r2, [sp, #4]
 800693c:	4293      	cmp	r3, r2
 800693e:	d80c      	bhi.n	800695a <__multiply+0x7a>
 8006940:	2e00      	cmp	r6, #0
 8006942:	dd03      	ble.n	800694c <__multiply+0x6c>
 8006944:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006948:	2b00      	cmp	r3, #0
 800694a:	d05d      	beq.n	8006a08 <__multiply+0x128>
 800694c:	6106      	str	r6, [r0, #16]
 800694e:	b003      	add	sp, #12
 8006950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006954:	f843 2b04 	str.w	r2, [r3], #4
 8006958:	e7e3      	b.n	8006922 <__multiply+0x42>
 800695a:	f8b2 b000 	ldrh.w	fp, [r2]
 800695e:	f1bb 0f00 	cmp.w	fp, #0
 8006962:	d023      	beq.n	80069ac <__multiply+0xcc>
 8006964:	4689      	mov	r9, r1
 8006966:	46ac      	mov	ip, r5
 8006968:	f04f 0800 	mov.w	r8, #0
 800696c:	f859 4b04 	ldr.w	r4, [r9], #4
 8006970:	f8dc a000 	ldr.w	sl, [ip]
 8006974:	b2a3      	uxth	r3, r4
 8006976:	fa1f fa8a 	uxth.w	sl, sl
 800697a:	fb0b a303 	mla	r3, fp, r3, sl
 800697e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006982:	f8dc 4000 	ldr.w	r4, [ip]
 8006986:	4443      	add	r3, r8
 8006988:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800698c:	fb0b 840a 	mla	r4, fp, sl, r8
 8006990:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006994:	46e2      	mov	sl, ip
 8006996:	b29b      	uxth	r3, r3
 8006998:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800699c:	454f      	cmp	r7, r9
 800699e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80069a2:	f84a 3b04 	str.w	r3, [sl], #4
 80069a6:	d82b      	bhi.n	8006a00 <__multiply+0x120>
 80069a8:	f8cc 8004 	str.w	r8, [ip, #4]
 80069ac:	9b01      	ldr	r3, [sp, #4]
 80069ae:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80069b2:	3204      	adds	r2, #4
 80069b4:	f1ba 0f00 	cmp.w	sl, #0
 80069b8:	d020      	beq.n	80069fc <__multiply+0x11c>
 80069ba:	682b      	ldr	r3, [r5, #0]
 80069bc:	4689      	mov	r9, r1
 80069be:	46a8      	mov	r8, r5
 80069c0:	f04f 0b00 	mov.w	fp, #0
 80069c4:	f8b9 c000 	ldrh.w	ip, [r9]
 80069c8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80069cc:	fb0a 440c 	mla	r4, sl, ip, r4
 80069d0:	445c      	add	r4, fp
 80069d2:	46c4      	mov	ip, r8
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80069da:	f84c 3b04 	str.w	r3, [ip], #4
 80069de:	f859 3b04 	ldr.w	r3, [r9], #4
 80069e2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80069e6:	0c1b      	lsrs	r3, r3, #16
 80069e8:	fb0a b303 	mla	r3, sl, r3, fp
 80069ec:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80069f0:	454f      	cmp	r7, r9
 80069f2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80069f6:	d805      	bhi.n	8006a04 <__multiply+0x124>
 80069f8:	f8c8 3004 	str.w	r3, [r8, #4]
 80069fc:	3504      	adds	r5, #4
 80069fe:	e79b      	b.n	8006938 <__multiply+0x58>
 8006a00:	46d4      	mov	ip, sl
 8006a02:	e7b3      	b.n	800696c <__multiply+0x8c>
 8006a04:	46e0      	mov	r8, ip
 8006a06:	e7dd      	b.n	80069c4 <__multiply+0xe4>
 8006a08:	3e01      	subs	r6, #1
 8006a0a:	e799      	b.n	8006940 <__multiply+0x60>

08006a0c <__pow5mult>:
 8006a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a10:	4615      	mov	r5, r2
 8006a12:	f012 0203 	ands.w	r2, r2, #3
 8006a16:	4606      	mov	r6, r0
 8006a18:	460f      	mov	r7, r1
 8006a1a:	d007      	beq.n	8006a2c <__pow5mult+0x20>
 8006a1c:	3a01      	subs	r2, #1
 8006a1e:	4c21      	ldr	r4, [pc, #132]	; (8006aa4 <__pow5mult+0x98>)
 8006a20:	2300      	movs	r3, #0
 8006a22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006a26:	f7ff fec9 	bl	80067bc <__multadd>
 8006a2a:	4607      	mov	r7, r0
 8006a2c:	10ad      	asrs	r5, r5, #2
 8006a2e:	d035      	beq.n	8006a9c <__pow5mult+0x90>
 8006a30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006a32:	b93c      	cbnz	r4, 8006a44 <__pow5mult+0x38>
 8006a34:	2010      	movs	r0, #16
 8006a36:	f7ff fe63 	bl	8006700 <malloc>
 8006a3a:	6270      	str	r0, [r6, #36]	; 0x24
 8006a3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006a40:	6004      	str	r4, [r0, #0]
 8006a42:	60c4      	str	r4, [r0, #12]
 8006a44:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006a48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006a4c:	b94c      	cbnz	r4, 8006a62 <__pow5mult+0x56>
 8006a4e:	f240 2171 	movw	r1, #625	; 0x271
 8006a52:	4630      	mov	r0, r6
 8006a54:	f7ff ff3b 	bl	80068ce <__i2b>
 8006a58:	2300      	movs	r3, #0
 8006a5a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006a5e:	4604      	mov	r4, r0
 8006a60:	6003      	str	r3, [r0, #0]
 8006a62:	f04f 0800 	mov.w	r8, #0
 8006a66:	07eb      	lsls	r3, r5, #31
 8006a68:	d50a      	bpl.n	8006a80 <__pow5mult+0x74>
 8006a6a:	4639      	mov	r1, r7
 8006a6c:	4622      	mov	r2, r4
 8006a6e:	4630      	mov	r0, r6
 8006a70:	f7ff ff36 	bl	80068e0 <__multiply>
 8006a74:	4639      	mov	r1, r7
 8006a76:	4681      	mov	r9, r0
 8006a78:	4630      	mov	r0, r6
 8006a7a:	f7ff fe88 	bl	800678e <_Bfree>
 8006a7e:	464f      	mov	r7, r9
 8006a80:	106d      	asrs	r5, r5, #1
 8006a82:	d00b      	beq.n	8006a9c <__pow5mult+0x90>
 8006a84:	6820      	ldr	r0, [r4, #0]
 8006a86:	b938      	cbnz	r0, 8006a98 <__pow5mult+0x8c>
 8006a88:	4622      	mov	r2, r4
 8006a8a:	4621      	mov	r1, r4
 8006a8c:	4630      	mov	r0, r6
 8006a8e:	f7ff ff27 	bl	80068e0 <__multiply>
 8006a92:	6020      	str	r0, [r4, #0]
 8006a94:	f8c0 8000 	str.w	r8, [r0]
 8006a98:	4604      	mov	r4, r0
 8006a9a:	e7e4      	b.n	8006a66 <__pow5mult+0x5a>
 8006a9c:	4638      	mov	r0, r7
 8006a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006aa2:	bf00      	nop
 8006aa4:	08007fe8 	.word	0x08007fe8

08006aa8 <__lshift>:
 8006aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006aac:	460c      	mov	r4, r1
 8006aae:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ab2:	6923      	ldr	r3, [r4, #16]
 8006ab4:	6849      	ldr	r1, [r1, #4]
 8006ab6:	eb0a 0903 	add.w	r9, sl, r3
 8006aba:	68a3      	ldr	r3, [r4, #8]
 8006abc:	4607      	mov	r7, r0
 8006abe:	4616      	mov	r6, r2
 8006ac0:	f109 0501 	add.w	r5, r9, #1
 8006ac4:	42ab      	cmp	r3, r5
 8006ac6:	db32      	blt.n	8006b2e <__lshift+0x86>
 8006ac8:	4638      	mov	r0, r7
 8006aca:	f7ff fe2c 	bl	8006726 <_Balloc>
 8006ace:	2300      	movs	r3, #0
 8006ad0:	4680      	mov	r8, r0
 8006ad2:	f100 0114 	add.w	r1, r0, #20
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	4553      	cmp	r3, sl
 8006ada:	db2b      	blt.n	8006b34 <__lshift+0x8c>
 8006adc:	6920      	ldr	r0, [r4, #16]
 8006ade:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ae2:	f104 0314 	add.w	r3, r4, #20
 8006ae6:	f016 021f 	ands.w	r2, r6, #31
 8006aea:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006aee:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006af2:	d025      	beq.n	8006b40 <__lshift+0x98>
 8006af4:	f1c2 0e20 	rsb	lr, r2, #32
 8006af8:	2000      	movs	r0, #0
 8006afa:	681e      	ldr	r6, [r3, #0]
 8006afc:	468a      	mov	sl, r1
 8006afe:	4096      	lsls	r6, r2
 8006b00:	4330      	orrs	r0, r6
 8006b02:	f84a 0b04 	str.w	r0, [sl], #4
 8006b06:	f853 0b04 	ldr.w	r0, [r3], #4
 8006b0a:	459c      	cmp	ip, r3
 8006b0c:	fa20 f00e 	lsr.w	r0, r0, lr
 8006b10:	d814      	bhi.n	8006b3c <__lshift+0x94>
 8006b12:	6048      	str	r0, [r1, #4]
 8006b14:	b108      	cbz	r0, 8006b1a <__lshift+0x72>
 8006b16:	f109 0502 	add.w	r5, r9, #2
 8006b1a:	3d01      	subs	r5, #1
 8006b1c:	4638      	mov	r0, r7
 8006b1e:	f8c8 5010 	str.w	r5, [r8, #16]
 8006b22:	4621      	mov	r1, r4
 8006b24:	f7ff fe33 	bl	800678e <_Bfree>
 8006b28:	4640      	mov	r0, r8
 8006b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b2e:	3101      	adds	r1, #1
 8006b30:	005b      	lsls	r3, r3, #1
 8006b32:	e7c7      	b.n	8006ac4 <__lshift+0x1c>
 8006b34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	e7cd      	b.n	8006ad8 <__lshift+0x30>
 8006b3c:	4651      	mov	r1, sl
 8006b3e:	e7dc      	b.n	8006afa <__lshift+0x52>
 8006b40:	3904      	subs	r1, #4
 8006b42:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b46:	f841 2f04 	str.w	r2, [r1, #4]!
 8006b4a:	459c      	cmp	ip, r3
 8006b4c:	d8f9      	bhi.n	8006b42 <__lshift+0x9a>
 8006b4e:	e7e4      	b.n	8006b1a <__lshift+0x72>

08006b50 <__mcmp>:
 8006b50:	6903      	ldr	r3, [r0, #16]
 8006b52:	690a      	ldr	r2, [r1, #16]
 8006b54:	1a9b      	subs	r3, r3, r2
 8006b56:	b530      	push	{r4, r5, lr}
 8006b58:	d10c      	bne.n	8006b74 <__mcmp+0x24>
 8006b5a:	0092      	lsls	r2, r2, #2
 8006b5c:	3014      	adds	r0, #20
 8006b5e:	3114      	adds	r1, #20
 8006b60:	1884      	adds	r4, r0, r2
 8006b62:	4411      	add	r1, r2
 8006b64:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006b68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006b6c:	4295      	cmp	r5, r2
 8006b6e:	d003      	beq.n	8006b78 <__mcmp+0x28>
 8006b70:	d305      	bcc.n	8006b7e <__mcmp+0x2e>
 8006b72:	2301      	movs	r3, #1
 8006b74:	4618      	mov	r0, r3
 8006b76:	bd30      	pop	{r4, r5, pc}
 8006b78:	42a0      	cmp	r0, r4
 8006b7a:	d3f3      	bcc.n	8006b64 <__mcmp+0x14>
 8006b7c:	e7fa      	b.n	8006b74 <__mcmp+0x24>
 8006b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b82:	e7f7      	b.n	8006b74 <__mcmp+0x24>

08006b84 <__mdiff>:
 8006b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b88:	460d      	mov	r5, r1
 8006b8a:	4607      	mov	r7, r0
 8006b8c:	4611      	mov	r1, r2
 8006b8e:	4628      	mov	r0, r5
 8006b90:	4614      	mov	r4, r2
 8006b92:	f7ff ffdd 	bl	8006b50 <__mcmp>
 8006b96:	1e06      	subs	r6, r0, #0
 8006b98:	d108      	bne.n	8006bac <__mdiff+0x28>
 8006b9a:	4631      	mov	r1, r6
 8006b9c:	4638      	mov	r0, r7
 8006b9e:	f7ff fdc2 	bl	8006726 <_Balloc>
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bac:	bfa4      	itt	ge
 8006bae:	4623      	movge	r3, r4
 8006bb0:	462c      	movge	r4, r5
 8006bb2:	4638      	mov	r0, r7
 8006bb4:	6861      	ldr	r1, [r4, #4]
 8006bb6:	bfa6      	itte	ge
 8006bb8:	461d      	movge	r5, r3
 8006bba:	2600      	movge	r6, #0
 8006bbc:	2601      	movlt	r6, #1
 8006bbe:	f7ff fdb2 	bl	8006726 <_Balloc>
 8006bc2:	692b      	ldr	r3, [r5, #16]
 8006bc4:	60c6      	str	r6, [r0, #12]
 8006bc6:	6926      	ldr	r6, [r4, #16]
 8006bc8:	f105 0914 	add.w	r9, r5, #20
 8006bcc:	f104 0214 	add.w	r2, r4, #20
 8006bd0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006bd4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006bd8:	f100 0514 	add.w	r5, r0, #20
 8006bdc:	f04f 0e00 	mov.w	lr, #0
 8006be0:	f852 ab04 	ldr.w	sl, [r2], #4
 8006be4:	f859 4b04 	ldr.w	r4, [r9], #4
 8006be8:	fa1e f18a 	uxtah	r1, lr, sl
 8006bec:	b2a3      	uxth	r3, r4
 8006bee:	1ac9      	subs	r1, r1, r3
 8006bf0:	0c23      	lsrs	r3, r4, #16
 8006bf2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006bf6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006bfa:	b289      	uxth	r1, r1
 8006bfc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006c00:	45c8      	cmp	r8, r9
 8006c02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006c06:	4694      	mov	ip, r2
 8006c08:	f845 3b04 	str.w	r3, [r5], #4
 8006c0c:	d8e8      	bhi.n	8006be0 <__mdiff+0x5c>
 8006c0e:	45bc      	cmp	ip, r7
 8006c10:	d304      	bcc.n	8006c1c <__mdiff+0x98>
 8006c12:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006c16:	b183      	cbz	r3, 8006c3a <__mdiff+0xb6>
 8006c18:	6106      	str	r6, [r0, #16]
 8006c1a:	e7c5      	b.n	8006ba8 <__mdiff+0x24>
 8006c1c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006c20:	fa1e f381 	uxtah	r3, lr, r1
 8006c24:	141a      	asrs	r2, r3, #16
 8006c26:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c30:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006c34:	f845 3b04 	str.w	r3, [r5], #4
 8006c38:	e7e9      	b.n	8006c0e <__mdiff+0x8a>
 8006c3a:	3e01      	subs	r6, #1
 8006c3c:	e7e9      	b.n	8006c12 <__mdiff+0x8e>

08006c3e <__d2b>:
 8006c3e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006c42:	460e      	mov	r6, r1
 8006c44:	2101      	movs	r1, #1
 8006c46:	ec59 8b10 	vmov	r8, r9, d0
 8006c4a:	4615      	mov	r5, r2
 8006c4c:	f7ff fd6b 	bl	8006726 <_Balloc>
 8006c50:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006c54:	4607      	mov	r7, r0
 8006c56:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006c5a:	bb34      	cbnz	r4, 8006caa <__d2b+0x6c>
 8006c5c:	9301      	str	r3, [sp, #4]
 8006c5e:	f1b8 0300 	subs.w	r3, r8, #0
 8006c62:	d027      	beq.n	8006cb4 <__d2b+0x76>
 8006c64:	a802      	add	r0, sp, #8
 8006c66:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006c6a:	f7ff fe01 	bl	8006870 <__lo0bits>
 8006c6e:	9900      	ldr	r1, [sp, #0]
 8006c70:	b1f0      	cbz	r0, 8006cb0 <__d2b+0x72>
 8006c72:	9a01      	ldr	r2, [sp, #4]
 8006c74:	f1c0 0320 	rsb	r3, r0, #32
 8006c78:	fa02 f303 	lsl.w	r3, r2, r3
 8006c7c:	430b      	orrs	r3, r1
 8006c7e:	40c2      	lsrs	r2, r0
 8006c80:	617b      	str	r3, [r7, #20]
 8006c82:	9201      	str	r2, [sp, #4]
 8006c84:	9b01      	ldr	r3, [sp, #4]
 8006c86:	61bb      	str	r3, [r7, #24]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	bf14      	ite	ne
 8006c8c:	2102      	movne	r1, #2
 8006c8e:	2101      	moveq	r1, #1
 8006c90:	6139      	str	r1, [r7, #16]
 8006c92:	b1c4      	cbz	r4, 8006cc6 <__d2b+0x88>
 8006c94:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006c98:	4404      	add	r4, r0
 8006c9a:	6034      	str	r4, [r6, #0]
 8006c9c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ca0:	6028      	str	r0, [r5, #0]
 8006ca2:	4638      	mov	r0, r7
 8006ca4:	b003      	add	sp, #12
 8006ca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006caa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cae:	e7d5      	b.n	8006c5c <__d2b+0x1e>
 8006cb0:	6179      	str	r1, [r7, #20]
 8006cb2:	e7e7      	b.n	8006c84 <__d2b+0x46>
 8006cb4:	a801      	add	r0, sp, #4
 8006cb6:	f7ff fddb 	bl	8006870 <__lo0bits>
 8006cba:	9b01      	ldr	r3, [sp, #4]
 8006cbc:	617b      	str	r3, [r7, #20]
 8006cbe:	2101      	movs	r1, #1
 8006cc0:	6139      	str	r1, [r7, #16]
 8006cc2:	3020      	adds	r0, #32
 8006cc4:	e7e5      	b.n	8006c92 <__d2b+0x54>
 8006cc6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006cca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006cce:	6030      	str	r0, [r6, #0]
 8006cd0:	6918      	ldr	r0, [r3, #16]
 8006cd2:	f7ff fdae 	bl	8006832 <__hi0bits>
 8006cd6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006cda:	e7e1      	b.n	8006ca0 <__d2b+0x62>

08006cdc <_calloc_r>:
 8006cdc:	b538      	push	{r3, r4, r5, lr}
 8006cde:	fb02 f401 	mul.w	r4, r2, r1
 8006ce2:	4621      	mov	r1, r4
 8006ce4:	f000 f856 	bl	8006d94 <_malloc_r>
 8006ce8:	4605      	mov	r5, r0
 8006cea:	b118      	cbz	r0, 8006cf4 <_calloc_r+0x18>
 8006cec:	4622      	mov	r2, r4
 8006cee:	2100      	movs	r1, #0
 8006cf0:	f7fd ff36 	bl	8004b60 <memset>
 8006cf4:	4628      	mov	r0, r5
 8006cf6:	bd38      	pop	{r3, r4, r5, pc}

08006cf8 <_free_r>:
 8006cf8:	b538      	push	{r3, r4, r5, lr}
 8006cfa:	4605      	mov	r5, r0
 8006cfc:	2900      	cmp	r1, #0
 8006cfe:	d045      	beq.n	8006d8c <_free_r+0x94>
 8006d00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d04:	1f0c      	subs	r4, r1, #4
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	bfb8      	it	lt
 8006d0a:	18e4      	addlt	r4, r4, r3
 8006d0c:	f000 fa98 	bl	8007240 <__malloc_lock>
 8006d10:	4a1f      	ldr	r2, [pc, #124]	; (8006d90 <_free_r+0x98>)
 8006d12:	6813      	ldr	r3, [r2, #0]
 8006d14:	4610      	mov	r0, r2
 8006d16:	b933      	cbnz	r3, 8006d26 <_free_r+0x2e>
 8006d18:	6063      	str	r3, [r4, #4]
 8006d1a:	6014      	str	r4, [r2, #0]
 8006d1c:	4628      	mov	r0, r5
 8006d1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d22:	f000 ba8e 	b.w	8007242 <__malloc_unlock>
 8006d26:	42a3      	cmp	r3, r4
 8006d28:	d90c      	bls.n	8006d44 <_free_r+0x4c>
 8006d2a:	6821      	ldr	r1, [r4, #0]
 8006d2c:	1862      	adds	r2, r4, r1
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	bf04      	itt	eq
 8006d32:	681a      	ldreq	r2, [r3, #0]
 8006d34:	685b      	ldreq	r3, [r3, #4]
 8006d36:	6063      	str	r3, [r4, #4]
 8006d38:	bf04      	itt	eq
 8006d3a:	1852      	addeq	r2, r2, r1
 8006d3c:	6022      	streq	r2, [r4, #0]
 8006d3e:	6004      	str	r4, [r0, #0]
 8006d40:	e7ec      	b.n	8006d1c <_free_r+0x24>
 8006d42:	4613      	mov	r3, r2
 8006d44:	685a      	ldr	r2, [r3, #4]
 8006d46:	b10a      	cbz	r2, 8006d4c <_free_r+0x54>
 8006d48:	42a2      	cmp	r2, r4
 8006d4a:	d9fa      	bls.n	8006d42 <_free_r+0x4a>
 8006d4c:	6819      	ldr	r1, [r3, #0]
 8006d4e:	1858      	adds	r0, r3, r1
 8006d50:	42a0      	cmp	r0, r4
 8006d52:	d10b      	bne.n	8006d6c <_free_r+0x74>
 8006d54:	6820      	ldr	r0, [r4, #0]
 8006d56:	4401      	add	r1, r0
 8006d58:	1858      	adds	r0, r3, r1
 8006d5a:	4282      	cmp	r2, r0
 8006d5c:	6019      	str	r1, [r3, #0]
 8006d5e:	d1dd      	bne.n	8006d1c <_free_r+0x24>
 8006d60:	6810      	ldr	r0, [r2, #0]
 8006d62:	6852      	ldr	r2, [r2, #4]
 8006d64:	605a      	str	r2, [r3, #4]
 8006d66:	4401      	add	r1, r0
 8006d68:	6019      	str	r1, [r3, #0]
 8006d6a:	e7d7      	b.n	8006d1c <_free_r+0x24>
 8006d6c:	d902      	bls.n	8006d74 <_free_r+0x7c>
 8006d6e:	230c      	movs	r3, #12
 8006d70:	602b      	str	r3, [r5, #0]
 8006d72:	e7d3      	b.n	8006d1c <_free_r+0x24>
 8006d74:	6820      	ldr	r0, [r4, #0]
 8006d76:	1821      	adds	r1, r4, r0
 8006d78:	428a      	cmp	r2, r1
 8006d7a:	bf04      	itt	eq
 8006d7c:	6811      	ldreq	r1, [r2, #0]
 8006d7e:	6852      	ldreq	r2, [r2, #4]
 8006d80:	6062      	str	r2, [r4, #4]
 8006d82:	bf04      	itt	eq
 8006d84:	1809      	addeq	r1, r1, r0
 8006d86:	6021      	streq	r1, [r4, #0]
 8006d88:	605c      	str	r4, [r3, #4]
 8006d8a:	e7c7      	b.n	8006d1c <_free_r+0x24>
 8006d8c:	bd38      	pop	{r3, r4, r5, pc}
 8006d8e:	bf00      	nop
 8006d90:	20000208 	.word	0x20000208

08006d94 <_malloc_r>:
 8006d94:	b570      	push	{r4, r5, r6, lr}
 8006d96:	1ccd      	adds	r5, r1, #3
 8006d98:	f025 0503 	bic.w	r5, r5, #3
 8006d9c:	3508      	adds	r5, #8
 8006d9e:	2d0c      	cmp	r5, #12
 8006da0:	bf38      	it	cc
 8006da2:	250c      	movcc	r5, #12
 8006da4:	2d00      	cmp	r5, #0
 8006da6:	4606      	mov	r6, r0
 8006da8:	db01      	blt.n	8006dae <_malloc_r+0x1a>
 8006daa:	42a9      	cmp	r1, r5
 8006dac:	d903      	bls.n	8006db6 <_malloc_r+0x22>
 8006dae:	230c      	movs	r3, #12
 8006db0:	6033      	str	r3, [r6, #0]
 8006db2:	2000      	movs	r0, #0
 8006db4:	bd70      	pop	{r4, r5, r6, pc}
 8006db6:	f000 fa43 	bl	8007240 <__malloc_lock>
 8006dba:	4a21      	ldr	r2, [pc, #132]	; (8006e40 <_malloc_r+0xac>)
 8006dbc:	6814      	ldr	r4, [r2, #0]
 8006dbe:	4621      	mov	r1, r4
 8006dc0:	b991      	cbnz	r1, 8006de8 <_malloc_r+0x54>
 8006dc2:	4c20      	ldr	r4, [pc, #128]	; (8006e44 <_malloc_r+0xb0>)
 8006dc4:	6823      	ldr	r3, [r4, #0]
 8006dc6:	b91b      	cbnz	r3, 8006dd0 <_malloc_r+0x3c>
 8006dc8:	4630      	mov	r0, r6
 8006dca:	f000 f97d 	bl	80070c8 <_sbrk_r>
 8006dce:	6020      	str	r0, [r4, #0]
 8006dd0:	4629      	mov	r1, r5
 8006dd2:	4630      	mov	r0, r6
 8006dd4:	f000 f978 	bl	80070c8 <_sbrk_r>
 8006dd8:	1c43      	adds	r3, r0, #1
 8006dda:	d124      	bne.n	8006e26 <_malloc_r+0x92>
 8006ddc:	230c      	movs	r3, #12
 8006dde:	6033      	str	r3, [r6, #0]
 8006de0:	4630      	mov	r0, r6
 8006de2:	f000 fa2e 	bl	8007242 <__malloc_unlock>
 8006de6:	e7e4      	b.n	8006db2 <_malloc_r+0x1e>
 8006de8:	680b      	ldr	r3, [r1, #0]
 8006dea:	1b5b      	subs	r3, r3, r5
 8006dec:	d418      	bmi.n	8006e20 <_malloc_r+0x8c>
 8006dee:	2b0b      	cmp	r3, #11
 8006df0:	d90f      	bls.n	8006e12 <_malloc_r+0x7e>
 8006df2:	600b      	str	r3, [r1, #0]
 8006df4:	50cd      	str	r5, [r1, r3]
 8006df6:	18cc      	adds	r4, r1, r3
 8006df8:	4630      	mov	r0, r6
 8006dfa:	f000 fa22 	bl	8007242 <__malloc_unlock>
 8006dfe:	f104 000b 	add.w	r0, r4, #11
 8006e02:	1d23      	adds	r3, r4, #4
 8006e04:	f020 0007 	bic.w	r0, r0, #7
 8006e08:	1ac3      	subs	r3, r0, r3
 8006e0a:	d0d3      	beq.n	8006db4 <_malloc_r+0x20>
 8006e0c:	425a      	negs	r2, r3
 8006e0e:	50e2      	str	r2, [r4, r3]
 8006e10:	e7d0      	b.n	8006db4 <_malloc_r+0x20>
 8006e12:	428c      	cmp	r4, r1
 8006e14:	684b      	ldr	r3, [r1, #4]
 8006e16:	bf16      	itet	ne
 8006e18:	6063      	strne	r3, [r4, #4]
 8006e1a:	6013      	streq	r3, [r2, #0]
 8006e1c:	460c      	movne	r4, r1
 8006e1e:	e7eb      	b.n	8006df8 <_malloc_r+0x64>
 8006e20:	460c      	mov	r4, r1
 8006e22:	6849      	ldr	r1, [r1, #4]
 8006e24:	e7cc      	b.n	8006dc0 <_malloc_r+0x2c>
 8006e26:	1cc4      	adds	r4, r0, #3
 8006e28:	f024 0403 	bic.w	r4, r4, #3
 8006e2c:	42a0      	cmp	r0, r4
 8006e2e:	d005      	beq.n	8006e3c <_malloc_r+0xa8>
 8006e30:	1a21      	subs	r1, r4, r0
 8006e32:	4630      	mov	r0, r6
 8006e34:	f000 f948 	bl	80070c8 <_sbrk_r>
 8006e38:	3001      	adds	r0, #1
 8006e3a:	d0cf      	beq.n	8006ddc <_malloc_r+0x48>
 8006e3c:	6025      	str	r5, [r4, #0]
 8006e3e:	e7db      	b.n	8006df8 <_malloc_r+0x64>
 8006e40:	20000208 	.word	0x20000208
 8006e44:	2000020c 	.word	0x2000020c

08006e48 <__sfputc_r>:
 8006e48:	6893      	ldr	r3, [r2, #8]
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	b410      	push	{r4}
 8006e50:	6093      	str	r3, [r2, #8]
 8006e52:	da08      	bge.n	8006e66 <__sfputc_r+0x1e>
 8006e54:	6994      	ldr	r4, [r2, #24]
 8006e56:	42a3      	cmp	r3, r4
 8006e58:	db01      	blt.n	8006e5e <__sfputc_r+0x16>
 8006e5a:	290a      	cmp	r1, #10
 8006e5c:	d103      	bne.n	8006e66 <__sfputc_r+0x1e>
 8006e5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e62:	f7fe bb5d 	b.w	8005520 <__swbuf_r>
 8006e66:	6813      	ldr	r3, [r2, #0]
 8006e68:	1c58      	adds	r0, r3, #1
 8006e6a:	6010      	str	r0, [r2, #0]
 8006e6c:	7019      	strb	r1, [r3, #0]
 8006e6e:	4608      	mov	r0, r1
 8006e70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e74:	4770      	bx	lr

08006e76 <__sfputs_r>:
 8006e76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e78:	4606      	mov	r6, r0
 8006e7a:	460f      	mov	r7, r1
 8006e7c:	4614      	mov	r4, r2
 8006e7e:	18d5      	adds	r5, r2, r3
 8006e80:	42ac      	cmp	r4, r5
 8006e82:	d101      	bne.n	8006e88 <__sfputs_r+0x12>
 8006e84:	2000      	movs	r0, #0
 8006e86:	e007      	b.n	8006e98 <__sfputs_r+0x22>
 8006e88:	463a      	mov	r2, r7
 8006e8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e8e:	4630      	mov	r0, r6
 8006e90:	f7ff ffda 	bl	8006e48 <__sfputc_r>
 8006e94:	1c43      	adds	r3, r0, #1
 8006e96:	d1f3      	bne.n	8006e80 <__sfputs_r+0xa>
 8006e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006e9c <_vfiprintf_r>:
 8006e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea0:	460c      	mov	r4, r1
 8006ea2:	b09d      	sub	sp, #116	; 0x74
 8006ea4:	4617      	mov	r7, r2
 8006ea6:	461d      	mov	r5, r3
 8006ea8:	4606      	mov	r6, r0
 8006eaa:	b118      	cbz	r0, 8006eb4 <_vfiprintf_r+0x18>
 8006eac:	6983      	ldr	r3, [r0, #24]
 8006eae:	b90b      	cbnz	r3, 8006eb4 <_vfiprintf_r+0x18>
 8006eb0:	f7ff fb2a 	bl	8006508 <__sinit>
 8006eb4:	4b7c      	ldr	r3, [pc, #496]	; (80070a8 <_vfiprintf_r+0x20c>)
 8006eb6:	429c      	cmp	r4, r3
 8006eb8:	d158      	bne.n	8006f6c <_vfiprintf_r+0xd0>
 8006eba:	6874      	ldr	r4, [r6, #4]
 8006ebc:	89a3      	ldrh	r3, [r4, #12]
 8006ebe:	0718      	lsls	r0, r3, #28
 8006ec0:	d55e      	bpl.n	8006f80 <_vfiprintf_r+0xe4>
 8006ec2:	6923      	ldr	r3, [r4, #16]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d05b      	beq.n	8006f80 <_vfiprintf_r+0xe4>
 8006ec8:	2300      	movs	r3, #0
 8006eca:	9309      	str	r3, [sp, #36]	; 0x24
 8006ecc:	2320      	movs	r3, #32
 8006ece:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ed2:	2330      	movs	r3, #48	; 0x30
 8006ed4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ed8:	9503      	str	r5, [sp, #12]
 8006eda:	f04f 0b01 	mov.w	fp, #1
 8006ede:	46b8      	mov	r8, r7
 8006ee0:	4645      	mov	r5, r8
 8006ee2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006ee6:	b10b      	cbz	r3, 8006eec <_vfiprintf_r+0x50>
 8006ee8:	2b25      	cmp	r3, #37	; 0x25
 8006eea:	d154      	bne.n	8006f96 <_vfiprintf_r+0xfa>
 8006eec:	ebb8 0a07 	subs.w	sl, r8, r7
 8006ef0:	d00b      	beq.n	8006f0a <_vfiprintf_r+0x6e>
 8006ef2:	4653      	mov	r3, sl
 8006ef4:	463a      	mov	r2, r7
 8006ef6:	4621      	mov	r1, r4
 8006ef8:	4630      	mov	r0, r6
 8006efa:	f7ff ffbc 	bl	8006e76 <__sfputs_r>
 8006efe:	3001      	adds	r0, #1
 8006f00:	f000 80c2 	beq.w	8007088 <_vfiprintf_r+0x1ec>
 8006f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f06:	4453      	add	r3, sl
 8006f08:	9309      	str	r3, [sp, #36]	; 0x24
 8006f0a:	f898 3000 	ldrb.w	r3, [r8]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	f000 80ba 	beq.w	8007088 <_vfiprintf_r+0x1ec>
 8006f14:	2300      	movs	r3, #0
 8006f16:	f04f 32ff 	mov.w	r2, #4294967295
 8006f1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f1e:	9304      	str	r3, [sp, #16]
 8006f20:	9307      	str	r3, [sp, #28]
 8006f22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f26:	931a      	str	r3, [sp, #104]	; 0x68
 8006f28:	46a8      	mov	r8, r5
 8006f2a:	2205      	movs	r2, #5
 8006f2c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006f30:	485e      	ldr	r0, [pc, #376]	; (80070ac <_vfiprintf_r+0x210>)
 8006f32:	f7f9 f955 	bl	80001e0 <memchr>
 8006f36:	9b04      	ldr	r3, [sp, #16]
 8006f38:	bb78      	cbnz	r0, 8006f9a <_vfiprintf_r+0xfe>
 8006f3a:	06d9      	lsls	r1, r3, #27
 8006f3c:	bf44      	itt	mi
 8006f3e:	2220      	movmi	r2, #32
 8006f40:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006f44:	071a      	lsls	r2, r3, #28
 8006f46:	bf44      	itt	mi
 8006f48:	222b      	movmi	r2, #43	; 0x2b
 8006f4a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006f4e:	782a      	ldrb	r2, [r5, #0]
 8006f50:	2a2a      	cmp	r2, #42	; 0x2a
 8006f52:	d02a      	beq.n	8006faa <_vfiprintf_r+0x10e>
 8006f54:	9a07      	ldr	r2, [sp, #28]
 8006f56:	46a8      	mov	r8, r5
 8006f58:	2000      	movs	r0, #0
 8006f5a:	250a      	movs	r5, #10
 8006f5c:	4641      	mov	r1, r8
 8006f5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f62:	3b30      	subs	r3, #48	; 0x30
 8006f64:	2b09      	cmp	r3, #9
 8006f66:	d969      	bls.n	800703c <_vfiprintf_r+0x1a0>
 8006f68:	b360      	cbz	r0, 8006fc4 <_vfiprintf_r+0x128>
 8006f6a:	e024      	b.n	8006fb6 <_vfiprintf_r+0x11a>
 8006f6c:	4b50      	ldr	r3, [pc, #320]	; (80070b0 <_vfiprintf_r+0x214>)
 8006f6e:	429c      	cmp	r4, r3
 8006f70:	d101      	bne.n	8006f76 <_vfiprintf_r+0xda>
 8006f72:	68b4      	ldr	r4, [r6, #8]
 8006f74:	e7a2      	b.n	8006ebc <_vfiprintf_r+0x20>
 8006f76:	4b4f      	ldr	r3, [pc, #316]	; (80070b4 <_vfiprintf_r+0x218>)
 8006f78:	429c      	cmp	r4, r3
 8006f7a:	bf08      	it	eq
 8006f7c:	68f4      	ldreq	r4, [r6, #12]
 8006f7e:	e79d      	b.n	8006ebc <_vfiprintf_r+0x20>
 8006f80:	4621      	mov	r1, r4
 8006f82:	4630      	mov	r0, r6
 8006f84:	f7fe fb1e 	bl	80055c4 <__swsetup_r>
 8006f88:	2800      	cmp	r0, #0
 8006f8a:	d09d      	beq.n	8006ec8 <_vfiprintf_r+0x2c>
 8006f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f90:	b01d      	add	sp, #116	; 0x74
 8006f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f96:	46a8      	mov	r8, r5
 8006f98:	e7a2      	b.n	8006ee0 <_vfiprintf_r+0x44>
 8006f9a:	4a44      	ldr	r2, [pc, #272]	; (80070ac <_vfiprintf_r+0x210>)
 8006f9c:	1a80      	subs	r0, r0, r2
 8006f9e:	fa0b f000 	lsl.w	r0, fp, r0
 8006fa2:	4318      	orrs	r0, r3
 8006fa4:	9004      	str	r0, [sp, #16]
 8006fa6:	4645      	mov	r5, r8
 8006fa8:	e7be      	b.n	8006f28 <_vfiprintf_r+0x8c>
 8006faa:	9a03      	ldr	r2, [sp, #12]
 8006fac:	1d11      	adds	r1, r2, #4
 8006fae:	6812      	ldr	r2, [r2, #0]
 8006fb0:	9103      	str	r1, [sp, #12]
 8006fb2:	2a00      	cmp	r2, #0
 8006fb4:	db01      	blt.n	8006fba <_vfiprintf_r+0x11e>
 8006fb6:	9207      	str	r2, [sp, #28]
 8006fb8:	e004      	b.n	8006fc4 <_vfiprintf_r+0x128>
 8006fba:	4252      	negs	r2, r2
 8006fbc:	f043 0302 	orr.w	r3, r3, #2
 8006fc0:	9207      	str	r2, [sp, #28]
 8006fc2:	9304      	str	r3, [sp, #16]
 8006fc4:	f898 3000 	ldrb.w	r3, [r8]
 8006fc8:	2b2e      	cmp	r3, #46	; 0x2e
 8006fca:	d10e      	bne.n	8006fea <_vfiprintf_r+0x14e>
 8006fcc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006fd0:	2b2a      	cmp	r3, #42	; 0x2a
 8006fd2:	d138      	bne.n	8007046 <_vfiprintf_r+0x1aa>
 8006fd4:	9b03      	ldr	r3, [sp, #12]
 8006fd6:	1d1a      	adds	r2, r3, #4
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	9203      	str	r2, [sp, #12]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	bfb8      	it	lt
 8006fe0:	f04f 33ff 	movlt.w	r3, #4294967295
 8006fe4:	f108 0802 	add.w	r8, r8, #2
 8006fe8:	9305      	str	r3, [sp, #20]
 8006fea:	4d33      	ldr	r5, [pc, #204]	; (80070b8 <_vfiprintf_r+0x21c>)
 8006fec:	f898 1000 	ldrb.w	r1, [r8]
 8006ff0:	2203      	movs	r2, #3
 8006ff2:	4628      	mov	r0, r5
 8006ff4:	f7f9 f8f4 	bl	80001e0 <memchr>
 8006ff8:	b140      	cbz	r0, 800700c <_vfiprintf_r+0x170>
 8006ffa:	2340      	movs	r3, #64	; 0x40
 8006ffc:	1b40      	subs	r0, r0, r5
 8006ffe:	fa03 f000 	lsl.w	r0, r3, r0
 8007002:	9b04      	ldr	r3, [sp, #16]
 8007004:	4303      	orrs	r3, r0
 8007006:	f108 0801 	add.w	r8, r8, #1
 800700a:	9304      	str	r3, [sp, #16]
 800700c:	f898 1000 	ldrb.w	r1, [r8]
 8007010:	482a      	ldr	r0, [pc, #168]	; (80070bc <_vfiprintf_r+0x220>)
 8007012:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007016:	2206      	movs	r2, #6
 8007018:	f108 0701 	add.w	r7, r8, #1
 800701c:	f7f9 f8e0 	bl	80001e0 <memchr>
 8007020:	2800      	cmp	r0, #0
 8007022:	d037      	beq.n	8007094 <_vfiprintf_r+0x1f8>
 8007024:	4b26      	ldr	r3, [pc, #152]	; (80070c0 <_vfiprintf_r+0x224>)
 8007026:	bb1b      	cbnz	r3, 8007070 <_vfiprintf_r+0x1d4>
 8007028:	9b03      	ldr	r3, [sp, #12]
 800702a:	3307      	adds	r3, #7
 800702c:	f023 0307 	bic.w	r3, r3, #7
 8007030:	3308      	adds	r3, #8
 8007032:	9303      	str	r3, [sp, #12]
 8007034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007036:	444b      	add	r3, r9
 8007038:	9309      	str	r3, [sp, #36]	; 0x24
 800703a:	e750      	b.n	8006ede <_vfiprintf_r+0x42>
 800703c:	fb05 3202 	mla	r2, r5, r2, r3
 8007040:	2001      	movs	r0, #1
 8007042:	4688      	mov	r8, r1
 8007044:	e78a      	b.n	8006f5c <_vfiprintf_r+0xc0>
 8007046:	2300      	movs	r3, #0
 8007048:	f108 0801 	add.w	r8, r8, #1
 800704c:	9305      	str	r3, [sp, #20]
 800704e:	4619      	mov	r1, r3
 8007050:	250a      	movs	r5, #10
 8007052:	4640      	mov	r0, r8
 8007054:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007058:	3a30      	subs	r2, #48	; 0x30
 800705a:	2a09      	cmp	r2, #9
 800705c:	d903      	bls.n	8007066 <_vfiprintf_r+0x1ca>
 800705e:	2b00      	cmp	r3, #0
 8007060:	d0c3      	beq.n	8006fea <_vfiprintf_r+0x14e>
 8007062:	9105      	str	r1, [sp, #20]
 8007064:	e7c1      	b.n	8006fea <_vfiprintf_r+0x14e>
 8007066:	fb05 2101 	mla	r1, r5, r1, r2
 800706a:	2301      	movs	r3, #1
 800706c:	4680      	mov	r8, r0
 800706e:	e7f0      	b.n	8007052 <_vfiprintf_r+0x1b6>
 8007070:	ab03      	add	r3, sp, #12
 8007072:	9300      	str	r3, [sp, #0]
 8007074:	4622      	mov	r2, r4
 8007076:	4b13      	ldr	r3, [pc, #76]	; (80070c4 <_vfiprintf_r+0x228>)
 8007078:	a904      	add	r1, sp, #16
 800707a:	4630      	mov	r0, r6
 800707c:	f7fd fe0c 	bl	8004c98 <_printf_float>
 8007080:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007084:	4681      	mov	r9, r0
 8007086:	d1d5      	bne.n	8007034 <_vfiprintf_r+0x198>
 8007088:	89a3      	ldrh	r3, [r4, #12]
 800708a:	065b      	lsls	r3, r3, #25
 800708c:	f53f af7e 	bmi.w	8006f8c <_vfiprintf_r+0xf0>
 8007090:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007092:	e77d      	b.n	8006f90 <_vfiprintf_r+0xf4>
 8007094:	ab03      	add	r3, sp, #12
 8007096:	9300      	str	r3, [sp, #0]
 8007098:	4622      	mov	r2, r4
 800709a:	4b0a      	ldr	r3, [pc, #40]	; (80070c4 <_vfiprintf_r+0x228>)
 800709c:	a904      	add	r1, sp, #16
 800709e:	4630      	mov	r0, r6
 80070a0:	f7fe f8b0 	bl	8005204 <_printf_i>
 80070a4:	e7ec      	b.n	8007080 <_vfiprintf_r+0x1e4>
 80070a6:	bf00      	nop
 80070a8:	08007eb8 	.word	0x08007eb8
 80070ac:	08007ff4 	.word	0x08007ff4
 80070b0:	08007ed8 	.word	0x08007ed8
 80070b4:	08007e98 	.word	0x08007e98
 80070b8:	08007ffa 	.word	0x08007ffa
 80070bc:	08007ffe 	.word	0x08007ffe
 80070c0:	08004c99 	.word	0x08004c99
 80070c4:	08006e77 	.word	0x08006e77

080070c8 <_sbrk_r>:
 80070c8:	b538      	push	{r3, r4, r5, lr}
 80070ca:	4c06      	ldr	r4, [pc, #24]	; (80070e4 <_sbrk_r+0x1c>)
 80070cc:	2300      	movs	r3, #0
 80070ce:	4605      	mov	r5, r0
 80070d0:	4608      	mov	r0, r1
 80070d2:	6023      	str	r3, [r4, #0]
 80070d4:	f7fb fbe8 	bl	80028a8 <_sbrk>
 80070d8:	1c43      	adds	r3, r0, #1
 80070da:	d102      	bne.n	80070e2 <_sbrk_r+0x1a>
 80070dc:	6823      	ldr	r3, [r4, #0]
 80070de:	b103      	cbz	r3, 80070e2 <_sbrk_r+0x1a>
 80070e0:	602b      	str	r3, [r5, #0]
 80070e2:	bd38      	pop	{r3, r4, r5, pc}
 80070e4:	2000030c 	.word	0x2000030c

080070e8 <__sread>:
 80070e8:	b510      	push	{r4, lr}
 80070ea:	460c      	mov	r4, r1
 80070ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070f0:	f000 f8a8 	bl	8007244 <_read_r>
 80070f4:	2800      	cmp	r0, #0
 80070f6:	bfab      	itete	ge
 80070f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80070fa:	89a3      	ldrhlt	r3, [r4, #12]
 80070fc:	181b      	addge	r3, r3, r0
 80070fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007102:	bfac      	ite	ge
 8007104:	6563      	strge	r3, [r4, #84]	; 0x54
 8007106:	81a3      	strhlt	r3, [r4, #12]
 8007108:	bd10      	pop	{r4, pc}

0800710a <__swrite>:
 800710a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800710e:	461f      	mov	r7, r3
 8007110:	898b      	ldrh	r3, [r1, #12]
 8007112:	05db      	lsls	r3, r3, #23
 8007114:	4605      	mov	r5, r0
 8007116:	460c      	mov	r4, r1
 8007118:	4616      	mov	r6, r2
 800711a:	d505      	bpl.n	8007128 <__swrite+0x1e>
 800711c:	2302      	movs	r3, #2
 800711e:	2200      	movs	r2, #0
 8007120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007124:	f000 f868 	bl	80071f8 <_lseek_r>
 8007128:	89a3      	ldrh	r3, [r4, #12]
 800712a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800712e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007132:	81a3      	strh	r3, [r4, #12]
 8007134:	4632      	mov	r2, r6
 8007136:	463b      	mov	r3, r7
 8007138:	4628      	mov	r0, r5
 800713a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800713e:	f000 b817 	b.w	8007170 <_write_r>

08007142 <__sseek>:
 8007142:	b510      	push	{r4, lr}
 8007144:	460c      	mov	r4, r1
 8007146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800714a:	f000 f855 	bl	80071f8 <_lseek_r>
 800714e:	1c43      	adds	r3, r0, #1
 8007150:	89a3      	ldrh	r3, [r4, #12]
 8007152:	bf15      	itete	ne
 8007154:	6560      	strne	r0, [r4, #84]	; 0x54
 8007156:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800715a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800715e:	81a3      	strheq	r3, [r4, #12]
 8007160:	bf18      	it	ne
 8007162:	81a3      	strhne	r3, [r4, #12]
 8007164:	bd10      	pop	{r4, pc}

08007166 <__sclose>:
 8007166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800716a:	f000 b813 	b.w	8007194 <_close_r>
	...

08007170 <_write_r>:
 8007170:	b538      	push	{r3, r4, r5, lr}
 8007172:	4c07      	ldr	r4, [pc, #28]	; (8007190 <_write_r+0x20>)
 8007174:	4605      	mov	r5, r0
 8007176:	4608      	mov	r0, r1
 8007178:	4611      	mov	r1, r2
 800717a:	2200      	movs	r2, #0
 800717c:	6022      	str	r2, [r4, #0]
 800717e:	461a      	mov	r2, r3
 8007180:	f7fb f806 	bl	8002190 <_write>
 8007184:	1c43      	adds	r3, r0, #1
 8007186:	d102      	bne.n	800718e <_write_r+0x1e>
 8007188:	6823      	ldr	r3, [r4, #0]
 800718a:	b103      	cbz	r3, 800718e <_write_r+0x1e>
 800718c:	602b      	str	r3, [r5, #0]
 800718e:	bd38      	pop	{r3, r4, r5, pc}
 8007190:	2000030c 	.word	0x2000030c

08007194 <_close_r>:
 8007194:	b538      	push	{r3, r4, r5, lr}
 8007196:	4c06      	ldr	r4, [pc, #24]	; (80071b0 <_close_r+0x1c>)
 8007198:	2300      	movs	r3, #0
 800719a:	4605      	mov	r5, r0
 800719c:	4608      	mov	r0, r1
 800719e:	6023      	str	r3, [r4, #0]
 80071a0:	f7fb fb4d 	bl	800283e <_close>
 80071a4:	1c43      	adds	r3, r0, #1
 80071a6:	d102      	bne.n	80071ae <_close_r+0x1a>
 80071a8:	6823      	ldr	r3, [r4, #0]
 80071aa:	b103      	cbz	r3, 80071ae <_close_r+0x1a>
 80071ac:	602b      	str	r3, [r5, #0]
 80071ae:	bd38      	pop	{r3, r4, r5, pc}
 80071b0:	2000030c 	.word	0x2000030c

080071b4 <_fstat_r>:
 80071b4:	b538      	push	{r3, r4, r5, lr}
 80071b6:	4c07      	ldr	r4, [pc, #28]	; (80071d4 <_fstat_r+0x20>)
 80071b8:	2300      	movs	r3, #0
 80071ba:	4605      	mov	r5, r0
 80071bc:	4608      	mov	r0, r1
 80071be:	4611      	mov	r1, r2
 80071c0:	6023      	str	r3, [r4, #0]
 80071c2:	f7fb fb48 	bl	8002856 <_fstat>
 80071c6:	1c43      	adds	r3, r0, #1
 80071c8:	d102      	bne.n	80071d0 <_fstat_r+0x1c>
 80071ca:	6823      	ldr	r3, [r4, #0]
 80071cc:	b103      	cbz	r3, 80071d0 <_fstat_r+0x1c>
 80071ce:	602b      	str	r3, [r5, #0]
 80071d0:	bd38      	pop	{r3, r4, r5, pc}
 80071d2:	bf00      	nop
 80071d4:	2000030c 	.word	0x2000030c

080071d8 <_isatty_r>:
 80071d8:	b538      	push	{r3, r4, r5, lr}
 80071da:	4c06      	ldr	r4, [pc, #24]	; (80071f4 <_isatty_r+0x1c>)
 80071dc:	2300      	movs	r3, #0
 80071de:	4605      	mov	r5, r0
 80071e0:	4608      	mov	r0, r1
 80071e2:	6023      	str	r3, [r4, #0]
 80071e4:	f7fb fb47 	bl	8002876 <_isatty>
 80071e8:	1c43      	adds	r3, r0, #1
 80071ea:	d102      	bne.n	80071f2 <_isatty_r+0x1a>
 80071ec:	6823      	ldr	r3, [r4, #0]
 80071ee:	b103      	cbz	r3, 80071f2 <_isatty_r+0x1a>
 80071f0:	602b      	str	r3, [r5, #0]
 80071f2:	bd38      	pop	{r3, r4, r5, pc}
 80071f4:	2000030c 	.word	0x2000030c

080071f8 <_lseek_r>:
 80071f8:	b538      	push	{r3, r4, r5, lr}
 80071fa:	4c07      	ldr	r4, [pc, #28]	; (8007218 <_lseek_r+0x20>)
 80071fc:	4605      	mov	r5, r0
 80071fe:	4608      	mov	r0, r1
 8007200:	4611      	mov	r1, r2
 8007202:	2200      	movs	r2, #0
 8007204:	6022      	str	r2, [r4, #0]
 8007206:	461a      	mov	r2, r3
 8007208:	f7fb fb40 	bl	800288c <_lseek>
 800720c:	1c43      	adds	r3, r0, #1
 800720e:	d102      	bne.n	8007216 <_lseek_r+0x1e>
 8007210:	6823      	ldr	r3, [r4, #0]
 8007212:	b103      	cbz	r3, 8007216 <_lseek_r+0x1e>
 8007214:	602b      	str	r3, [r5, #0]
 8007216:	bd38      	pop	{r3, r4, r5, pc}
 8007218:	2000030c 	.word	0x2000030c

0800721c <__ascii_mbtowc>:
 800721c:	b082      	sub	sp, #8
 800721e:	b901      	cbnz	r1, 8007222 <__ascii_mbtowc+0x6>
 8007220:	a901      	add	r1, sp, #4
 8007222:	b142      	cbz	r2, 8007236 <__ascii_mbtowc+0x1a>
 8007224:	b14b      	cbz	r3, 800723a <__ascii_mbtowc+0x1e>
 8007226:	7813      	ldrb	r3, [r2, #0]
 8007228:	600b      	str	r3, [r1, #0]
 800722a:	7812      	ldrb	r2, [r2, #0]
 800722c:	1c10      	adds	r0, r2, #0
 800722e:	bf18      	it	ne
 8007230:	2001      	movne	r0, #1
 8007232:	b002      	add	sp, #8
 8007234:	4770      	bx	lr
 8007236:	4610      	mov	r0, r2
 8007238:	e7fb      	b.n	8007232 <__ascii_mbtowc+0x16>
 800723a:	f06f 0001 	mvn.w	r0, #1
 800723e:	e7f8      	b.n	8007232 <__ascii_mbtowc+0x16>

08007240 <__malloc_lock>:
 8007240:	4770      	bx	lr

08007242 <__malloc_unlock>:
 8007242:	4770      	bx	lr

08007244 <_read_r>:
 8007244:	b538      	push	{r3, r4, r5, lr}
 8007246:	4c07      	ldr	r4, [pc, #28]	; (8007264 <_read_r+0x20>)
 8007248:	4605      	mov	r5, r0
 800724a:	4608      	mov	r0, r1
 800724c:	4611      	mov	r1, r2
 800724e:	2200      	movs	r2, #0
 8007250:	6022      	str	r2, [r4, #0]
 8007252:	461a      	mov	r2, r3
 8007254:	f7fb fad6 	bl	8002804 <_read>
 8007258:	1c43      	adds	r3, r0, #1
 800725a:	d102      	bne.n	8007262 <_read_r+0x1e>
 800725c:	6823      	ldr	r3, [r4, #0]
 800725e:	b103      	cbz	r3, 8007262 <_read_r+0x1e>
 8007260:	602b      	str	r3, [r5, #0]
 8007262:	bd38      	pop	{r3, r4, r5, pc}
 8007264:	2000030c 	.word	0x2000030c

08007268 <__ascii_wctomb>:
 8007268:	b149      	cbz	r1, 800727e <__ascii_wctomb+0x16>
 800726a:	2aff      	cmp	r2, #255	; 0xff
 800726c:	bf85      	ittet	hi
 800726e:	238a      	movhi	r3, #138	; 0x8a
 8007270:	6003      	strhi	r3, [r0, #0]
 8007272:	700a      	strbls	r2, [r1, #0]
 8007274:	f04f 30ff 	movhi.w	r0, #4294967295
 8007278:	bf98      	it	ls
 800727a:	2001      	movls	r0, #1
 800727c:	4770      	bx	lr
 800727e:	4608      	mov	r0, r1
 8007280:	4770      	bx	lr
	...

08007284 <powf>:
 8007284:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8007288:	ed2d 8b04 	vpush	{d8-d9}
 800728c:	4ca7      	ldr	r4, [pc, #668]	; (800752c <powf+0x2a8>)
 800728e:	b08a      	sub	sp, #40	; 0x28
 8007290:	eef0 8a40 	vmov.f32	s17, s0
 8007294:	eeb0 8a60 	vmov.f32	s16, s1
 8007298:	f000 f958 	bl	800754c <__ieee754_powf>
 800729c:	f994 5000 	ldrsb.w	r5, [r4]
 80072a0:	1c6b      	adds	r3, r5, #1
 80072a2:	eeb0 9a40 	vmov.f32	s18, s0
 80072a6:	4626      	mov	r6, r4
 80072a8:	d05f      	beq.n	800736a <powf+0xe6>
 80072aa:	eeb4 8a48 	vcmp.f32	s16, s16
 80072ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072b2:	d65a      	bvs.n	800736a <powf+0xe6>
 80072b4:	eef4 8a68 	vcmp.f32	s17, s17
 80072b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072bc:	d721      	bvc.n	8007302 <powf+0x7e>
 80072be:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80072c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072c6:	d150      	bne.n	800736a <powf+0xe6>
 80072c8:	2301      	movs	r3, #1
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	4b98      	ldr	r3, [pc, #608]	; (8007530 <powf+0x2ac>)
 80072ce:	9301      	str	r3, [sp, #4]
 80072d0:	ee18 0a90 	vmov	r0, s17
 80072d4:	2300      	movs	r3, #0
 80072d6:	9308      	str	r3, [sp, #32]
 80072d8:	f7f9 f936 	bl	8000548 <__aeabi_f2d>
 80072dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072e0:	ee18 0a10 	vmov	r0, s16
 80072e4:	f7f9 f930 	bl	8000548 <__aeabi_f2d>
 80072e8:	4b92      	ldr	r3, [pc, #584]	; (8007534 <powf+0x2b0>)
 80072ea:	2200      	movs	r2, #0
 80072ec:	2d02      	cmp	r5, #2
 80072ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80072f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80072f6:	d032      	beq.n	800735e <powf+0xda>
 80072f8:	4668      	mov	r0, sp
 80072fa:	f000 fbea 	bl	8007ad2 <matherr>
 80072fe:	bb40      	cbnz	r0, 8007352 <powf+0xce>
 8007300:	e065      	b.n	80073ce <powf+0x14a>
 8007302:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8007538 <powf+0x2b4>
 8007306:	eef4 8a69 	vcmp.f32	s17, s19
 800730a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800730e:	d163      	bne.n	80073d8 <powf+0x154>
 8007310:	eeb4 8a69 	vcmp.f32	s16, s19
 8007314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007318:	d12e      	bne.n	8007378 <powf+0xf4>
 800731a:	2301      	movs	r3, #1
 800731c:	9300      	str	r3, [sp, #0]
 800731e:	4b84      	ldr	r3, [pc, #528]	; (8007530 <powf+0x2ac>)
 8007320:	9301      	str	r3, [sp, #4]
 8007322:	ee18 0a90 	vmov	r0, s17
 8007326:	2300      	movs	r3, #0
 8007328:	9308      	str	r3, [sp, #32]
 800732a:	f7f9 f90d 	bl	8000548 <__aeabi_f2d>
 800732e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007332:	ee18 0a10 	vmov	r0, s16
 8007336:	f7f9 f907 	bl	8000548 <__aeabi_f2d>
 800733a:	2200      	movs	r2, #0
 800733c:	2300      	movs	r3, #0
 800733e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007342:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007346:	2d00      	cmp	r5, #0
 8007348:	d0d6      	beq.n	80072f8 <powf+0x74>
 800734a:	4b7a      	ldr	r3, [pc, #488]	; (8007534 <powf+0x2b0>)
 800734c:	2200      	movs	r2, #0
 800734e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007352:	9b08      	ldr	r3, [sp, #32]
 8007354:	b11b      	cbz	r3, 800735e <powf+0xda>
 8007356:	f7fd fbd9 	bl	8004b0c <__errno>
 800735a:	9b08      	ldr	r3, [sp, #32]
 800735c:	6003      	str	r3, [r0, #0]
 800735e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007362:	f7f9 fc21 	bl	8000ba8 <__aeabi_d2f>
 8007366:	ee09 0a10 	vmov	s18, r0
 800736a:	eeb0 0a49 	vmov.f32	s0, s18
 800736e:	b00a      	add	sp, #40	; 0x28
 8007370:	ecbd 8b04 	vpop	{d8-d9}
 8007374:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007378:	eeb0 0a48 	vmov.f32	s0, s16
 800737c:	f000 fbb2 	bl	8007ae4 <finitef>
 8007380:	2800      	cmp	r0, #0
 8007382:	d0f2      	beq.n	800736a <powf+0xe6>
 8007384:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800738c:	d5ed      	bpl.n	800736a <powf+0xe6>
 800738e:	2301      	movs	r3, #1
 8007390:	9300      	str	r3, [sp, #0]
 8007392:	4b67      	ldr	r3, [pc, #412]	; (8007530 <powf+0x2ac>)
 8007394:	9301      	str	r3, [sp, #4]
 8007396:	ee18 0a90 	vmov	r0, s17
 800739a:	2300      	movs	r3, #0
 800739c:	9308      	str	r3, [sp, #32]
 800739e:	f7f9 f8d3 	bl	8000548 <__aeabi_f2d>
 80073a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073a6:	ee18 0a10 	vmov	r0, s16
 80073aa:	f7f9 f8cd 	bl	8000548 <__aeabi_f2d>
 80073ae:	f994 3000 	ldrsb.w	r3, [r4]
 80073b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073b6:	b923      	cbnz	r3, 80073c2 <powf+0x13e>
 80073b8:	2200      	movs	r2, #0
 80073ba:	2300      	movs	r3, #0
 80073bc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80073c0:	e79a      	b.n	80072f8 <powf+0x74>
 80073c2:	495e      	ldr	r1, [pc, #376]	; (800753c <powf+0x2b8>)
 80073c4:	2000      	movs	r0, #0
 80073c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d194      	bne.n	80072f8 <powf+0x74>
 80073ce:	f7fd fb9d 	bl	8004b0c <__errno>
 80073d2:	2321      	movs	r3, #33	; 0x21
 80073d4:	6003      	str	r3, [r0, #0]
 80073d6:	e7bc      	b.n	8007352 <powf+0xce>
 80073d8:	f000 fb84 	bl	8007ae4 <finitef>
 80073dc:	4605      	mov	r5, r0
 80073de:	2800      	cmp	r0, #0
 80073e0:	d173      	bne.n	80074ca <powf+0x246>
 80073e2:	eeb0 0a68 	vmov.f32	s0, s17
 80073e6:	f000 fb7d 	bl	8007ae4 <finitef>
 80073ea:	2800      	cmp	r0, #0
 80073ec:	d06d      	beq.n	80074ca <powf+0x246>
 80073ee:	eeb0 0a48 	vmov.f32	s0, s16
 80073f2:	f000 fb77 	bl	8007ae4 <finitef>
 80073f6:	2800      	cmp	r0, #0
 80073f8:	d067      	beq.n	80074ca <powf+0x246>
 80073fa:	ee18 0a90 	vmov	r0, s17
 80073fe:	f7f9 f8a3 	bl	8000548 <__aeabi_f2d>
 8007402:	4680      	mov	r8, r0
 8007404:	ee18 0a10 	vmov	r0, s16
 8007408:	4689      	mov	r9, r1
 800740a:	f7f9 f89d 	bl	8000548 <__aeabi_f2d>
 800740e:	eeb4 9a49 	vcmp.f32	s18, s18
 8007412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007416:	f994 4000 	ldrsb.w	r4, [r4]
 800741a:	4b45      	ldr	r3, [pc, #276]	; (8007530 <powf+0x2ac>)
 800741c:	d713      	bvc.n	8007446 <powf+0x1c2>
 800741e:	2201      	movs	r2, #1
 8007420:	e9cd 2300 	strd	r2, r3, [sp]
 8007424:	9508      	str	r5, [sp, #32]
 8007426:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800742a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800742e:	2c00      	cmp	r4, #0
 8007430:	d0c2      	beq.n	80073b8 <powf+0x134>
 8007432:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 8007436:	ee17 0a90 	vmov	r0, s15
 800743a:	f7f9 f885 	bl	8000548 <__aeabi_f2d>
 800743e:	2c02      	cmp	r4, #2
 8007440:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007444:	e7c2      	b.n	80073cc <powf+0x148>
 8007446:	2203      	movs	r2, #3
 8007448:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800744c:	e9cd 2300 	strd	r2, r3, [sp]
 8007450:	9508      	str	r5, [sp, #32]
 8007452:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8007456:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800745a:	ee28 8a27 	vmul.f32	s16, s16, s15
 800745e:	b9fc      	cbnz	r4, 80074a0 <powf+0x21c>
 8007460:	4b37      	ldr	r3, [pc, #220]	; (8007540 <powf+0x2bc>)
 8007462:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8007466:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800746a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800746e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007472:	d553      	bpl.n	800751c <powf+0x298>
 8007474:	eeb0 0a48 	vmov.f32	s0, s16
 8007478:	f000 fb44 	bl	8007b04 <rintf>
 800747c:	eeb4 0a48 	vcmp.f32	s0, s16
 8007480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007484:	d004      	beq.n	8007490 <powf+0x20c>
 8007486:	4b2f      	ldr	r3, [pc, #188]	; (8007544 <powf+0x2c0>)
 8007488:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800748c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007490:	f996 3000 	ldrsb.w	r3, [r6]
 8007494:	2b02      	cmp	r3, #2
 8007496:	d141      	bne.n	800751c <powf+0x298>
 8007498:	f7fd fb38 	bl	8004b0c <__errno>
 800749c:	2322      	movs	r3, #34	; 0x22
 800749e:	e799      	b.n	80073d4 <powf+0x150>
 80074a0:	4b29      	ldr	r3, [pc, #164]	; (8007548 <powf+0x2c4>)
 80074a2:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80074a6:	2200      	movs	r2, #0
 80074a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80074b0:	d5ee      	bpl.n	8007490 <powf+0x20c>
 80074b2:	eeb0 0a48 	vmov.f32	s0, s16
 80074b6:	f000 fb25 	bl	8007b04 <rintf>
 80074ba:	eeb4 0a48 	vcmp.f32	s0, s16
 80074be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074c2:	d0e5      	beq.n	8007490 <powf+0x20c>
 80074c4:	2200      	movs	r2, #0
 80074c6:	4b1d      	ldr	r3, [pc, #116]	; (800753c <powf+0x2b8>)
 80074c8:	e7e0      	b.n	800748c <powf+0x208>
 80074ca:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80074ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074d2:	f47f af4a 	bne.w	800736a <powf+0xe6>
 80074d6:	eeb0 0a68 	vmov.f32	s0, s17
 80074da:	f000 fb03 	bl	8007ae4 <finitef>
 80074de:	2800      	cmp	r0, #0
 80074e0:	f43f af43 	beq.w	800736a <powf+0xe6>
 80074e4:	eeb0 0a48 	vmov.f32	s0, s16
 80074e8:	f000 fafc 	bl	8007ae4 <finitef>
 80074ec:	2800      	cmp	r0, #0
 80074ee:	f43f af3c 	beq.w	800736a <powf+0xe6>
 80074f2:	2304      	movs	r3, #4
 80074f4:	9300      	str	r3, [sp, #0]
 80074f6:	4b0e      	ldr	r3, [pc, #56]	; (8007530 <powf+0x2ac>)
 80074f8:	9301      	str	r3, [sp, #4]
 80074fa:	ee18 0a90 	vmov	r0, s17
 80074fe:	2300      	movs	r3, #0
 8007500:	9308      	str	r3, [sp, #32]
 8007502:	f7f9 f821 	bl	8000548 <__aeabi_f2d>
 8007506:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800750a:	ee18 0a10 	vmov	r0, s16
 800750e:	f7f9 f81b 	bl	8000548 <__aeabi_f2d>
 8007512:	2200      	movs	r2, #0
 8007514:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007518:	2300      	movs	r3, #0
 800751a:	e7b7      	b.n	800748c <powf+0x208>
 800751c:	4668      	mov	r0, sp
 800751e:	f000 fad8 	bl	8007ad2 <matherr>
 8007522:	2800      	cmp	r0, #0
 8007524:	f47f af15 	bne.w	8007352 <powf+0xce>
 8007528:	e7b6      	b.n	8007498 <powf+0x214>
 800752a:	bf00      	nop
 800752c:	200001dc 	.word	0x200001dc
 8007530:	08008110 	.word	0x08008110
 8007534:	3ff00000 	.word	0x3ff00000
 8007538:	00000000 	.word	0x00000000
 800753c:	fff00000 	.word	0xfff00000
 8007540:	47efffff 	.word	0x47efffff
 8007544:	c7efffff 	.word	0xc7efffff
 8007548:	7ff00000 	.word	0x7ff00000

0800754c <__ieee754_powf>:
 800754c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007550:	ee10 5a90 	vmov	r5, s1
 8007554:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8007558:	ed2d 8b02 	vpush	{d8}
 800755c:	eeb0 8a40 	vmov.f32	s16, s0
 8007560:	eef0 8a60 	vmov.f32	s17, s1
 8007564:	f000 8293 	beq.w	8007a8e <__ieee754_powf+0x542>
 8007568:	ee10 8a10 	vmov	r8, s0
 800756c:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8007570:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8007574:	dc06      	bgt.n	8007584 <__ieee754_powf+0x38>
 8007576:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800757a:	dd0a      	ble.n	8007592 <__ieee754_powf+0x46>
 800757c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8007580:	f000 8285 	beq.w	8007a8e <__ieee754_powf+0x542>
 8007584:	ecbd 8b02 	vpop	{d8}
 8007588:	48d9      	ldr	r0, [pc, #868]	; (80078f0 <__ieee754_powf+0x3a4>)
 800758a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800758e:	f000 bab3 	b.w	8007af8 <nanf>
 8007592:	f1b8 0f00 	cmp.w	r8, #0
 8007596:	da1d      	bge.n	80075d4 <__ieee754_powf+0x88>
 8007598:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800759c:	da2c      	bge.n	80075f8 <__ieee754_powf+0xac>
 800759e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80075a2:	db30      	blt.n	8007606 <__ieee754_powf+0xba>
 80075a4:	15fb      	asrs	r3, r7, #23
 80075a6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80075aa:	fa47 f603 	asr.w	r6, r7, r3
 80075ae:	fa06 f303 	lsl.w	r3, r6, r3
 80075b2:	42bb      	cmp	r3, r7
 80075b4:	d127      	bne.n	8007606 <__ieee754_powf+0xba>
 80075b6:	f006 0601 	and.w	r6, r6, #1
 80075ba:	f1c6 0602 	rsb	r6, r6, #2
 80075be:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80075c2:	d122      	bne.n	800760a <__ieee754_powf+0xbe>
 80075c4:	2d00      	cmp	r5, #0
 80075c6:	f280 8268 	bge.w	8007a9a <__ieee754_powf+0x54e>
 80075ca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80075ce:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80075d2:	e00d      	b.n	80075f0 <__ieee754_powf+0xa4>
 80075d4:	2600      	movs	r6, #0
 80075d6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80075da:	d1f0      	bne.n	80075be <__ieee754_powf+0x72>
 80075dc:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80075e0:	f000 8255 	beq.w	8007a8e <__ieee754_powf+0x542>
 80075e4:	dd0a      	ble.n	80075fc <__ieee754_powf+0xb0>
 80075e6:	2d00      	cmp	r5, #0
 80075e8:	f280 8254 	bge.w	8007a94 <__ieee754_powf+0x548>
 80075ec:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 80078f4 <__ieee754_powf+0x3a8>
 80075f0:	ecbd 8b02 	vpop	{d8}
 80075f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075f8:	2602      	movs	r6, #2
 80075fa:	e7ec      	b.n	80075d6 <__ieee754_powf+0x8a>
 80075fc:	2d00      	cmp	r5, #0
 80075fe:	daf5      	bge.n	80075ec <__ieee754_powf+0xa0>
 8007600:	eeb1 0a68 	vneg.f32	s0, s17
 8007604:	e7f4      	b.n	80075f0 <__ieee754_powf+0xa4>
 8007606:	2600      	movs	r6, #0
 8007608:	e7d9      	b.n	80075be <__ieee754_powf+0x72>
 800760a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800760e:	d102      	bne.n	8007616 <__ieee754_powf+0xca>
 8007610:	ee28 0a08 	vmul.f32	s0, s16, s16
 8007614:	e7ec      	b.n	80075f0 <__ieee754_powf+0xa4>
 8007616:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800761a:	eeb0 0a48 	vmov.f32	s0, s16
 800761e:	d108      	bne.n	8007632 <__ieee754_powf+0xe6>
 8007620:	f1b8 0f00 	cmp.w	r8, #0
 8007624:	db05      	blt.n	8007632 <__ieee754_powf+0xe6>
 8007626:	ecbd 8b02 	vpop	{d8}
 800762a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800762e:	f000 ba4d 	b.w	8007acc <__ieee754_sqrtf>
 8007632:	f000 fa50 	bl	8007ad6 <fabsf>
 8007636:	b124      	cbz	r4, 8007642 <__ieee754_powf+0xf6>
 8007638:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800763c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8007640:	d117      	bne.n	8007672 <__ieee754_powf+0x126>
 8007642:	2d00      	cmp	r5, #0
 8007644:	bfbc      	itt	lt
 8007646:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800764a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800764e:	f1b8 0f00 	cmp.w	r8, #0
 8007652:	dacd      	bge.n	80075f0 <__ieee754_powf+0xa4>
 8007654:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8007658:	ea54 0306 	orrs.w	r3, r4, r6
 800765c:	d104      	bne.n	8007668 <__ieee754_powf+0x11c>
 800765e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007662:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8007666:	e7c3      	b.n	80075f0 <__ieee754_powf+0xa4>
 8007668:	2e01      	cmp	r6, #1
 800766a:	d1c1      	bne.n	80075f0 <__ieee754_powf+0xa4>
 800766c:	eeb1 0a40 	vneg.f32	s0, s0
 8007670:	e7be      	b.n	80075f0 <__ieee754_powf+0xa4>
 8007672:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8007676:	3801      	subs	r0, #1
 8007678:	ea56 0300 	orrs.w	r3, r6, r0
 800767c:	d104      	bne.n	8007688 <__ieee754_powf+0x13c>
 800767e:	ee38 8a48 	vsub.f32	s16, s16, s16
 8007682:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8007686:	e7b3      	b.n	80075f0 <__ieee754_powf+0xa4>
 8007688:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800768c:	dd6d      	ble.n	800776a <__ieee754_powf+0x21e>
 800768e:	4b9a      	ldr	r3, [pc, #616]	; (80078f8 <__ieee754_powf+0x3ac>)
 8007690:	429c      	cmp	r4, r3
 8007692:	dc06      	bgt.n	80076a2 <__ieee754_powf+0x156>
 8007694:	2d00      	cmp	r5, #0
 8007696:	daa9      	bge.n	80075ec <__ieee754_powf+0xa0>
 8007698:	ed9f 0a98 	vldr	s0, [pc, #608]	; 80078fc <__ieee754_powf+0x3b0>
 800769c:	ee20 0a00 	vmul.f32	s0, s0, s0
 80076a0:	e7a6      	b.n	80075f0 <__ieee754_powf+0xa4>
 80076a2:	4b97      	ldr	r3, [pc, #604]	; (8007900 <__ieee754_powf+0x3b4>)
 80076a4:	429c      	cmp	r4, r3
 80076a6:	dd02      	ble.n	80076ae <__ieee754_powf+0x162>
 80076a8:	2d00      	cmp	r5, #0
 80076aa:	dcf5      	bgt.n	8007698 <__ieee754_powf+0x14c>
 80076ac:	e79e      	b.n	80075ec <__ieee754_powf+0xa0>
 80076ae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80076b2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80076b6:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8007904 <__ieee754_powf+0x3b8>
 80076ba:	eef1 6a40 	vneg.f32	s13, s0
 80076be:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80076c2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80076c6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80076ca:	eee7 7a40 	vfms.f32	s15, s14, s0
 80076ce:	ee60 0a00 	vmul.f32	s1, s0, s0
 80076d2:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8007908 <__ieee754_powf+0x3bc>
 80076d6:	ee67 0aa0 	vmul.f32	s1, s15, s1
 80076da:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800790c <__ieee754_powf+0x3c0>
 80076de:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 80076e2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80076e6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8007910 <__ieee754_powf+0x3c4>
 80076ea:	eeb0 6a67 	vmov.f32	s12, s15
 80076ee:	eea0 6a07 	vfma.f32	s12, s0, s14
 80076f2:	ee16 3a10 	vmov	r3, s12
 80076f6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80076fa:	f023 030f 	bic.w	r3, r3, #15
 80076fe:	ee00 3a90 	vmov	s1, r3
 8007702:	eee6 0a87 	vfma.f32	s1, s13, s14
 8007706:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800770a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800770e:	f025 050f 	bic.w	r5, r5, #15
 8007712:	ee07 5a10 	vmov	s14, r5
 8007716:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800771a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800771e:	ee07 3a90 	vmov	s15, r3
 8007722:	eee7 0a27 	vfma.f32	s1, s14, s15
 8007726:	3e01      	subs	r6, #1
 8007728:	ea56 0200 	orrs.w	r2, r6, r0
 800772c:	ee07 5a10 	vmov	s14, r5
 8007730:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007734:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8007738:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800773c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8007740:	ee17 4a10 	vmov	r4, s14
 8007744:	bf08      	it	eq
 8007746:	eeb0 8a40 	vmoveq.f32	s16, s0
 800774a:	2c00      	cmp	r4, #0
 800774c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007750:	f340 8184 	ble.w	8007a5c <__ieee754_powf+0x510>
 8007754:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8007758:	f340 80fc 	ble.w	8007954 <__ieee754_powf+0x408>
 800775c:	eddf 7a67 	vldr	s15, [pc, #412]	; 80078fc <__ieee754_powf+0x3b0>
 8007760:	ee28 0a27 	vmul.f32	s0, s16, s15
 8007764:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007768:	e742      	b.n	80075f0 <__ieee754_powf+0xa4>
 800776a:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 800776e:	bfbf      	itttt	lt
 8007770:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8007914 <__ieee754_powf+0x3c8>
 8007774:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8007778:	f06f 0217 	mvnlt.w	r2, #23
 800777c:	ee17 4a90 	vmovlt	r4, s15
 8007780:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8007784:	bfa8      	it	ge
 8007786:	2200      	movge	r2, #0
 8007788:	3b7f      	subs	r3, #127	; 0x7f
 800778a:	4413      	add	r3, r2
 800778c:	4a62      	ldr	r2, [pc, #392]	; (8007918 <__ieee754_powf+0x3cc>)
 800778e:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8007792:	4294      	cmp	r4, r2
 8007794:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8007798:	dd06      	ble.n	80077a8 <__ieee754_powf+0x25c>
 800779a:	4a60      	ldr	r2, [pc, #384]	; (800791c <__ieee754_powf+0x3d0>)
 800779c:	4294      	cmp	r4, r2
 800779e:	f340 80a5 	ble.w	80078ec <__ieee754_powf+0x3a0>
 80077a2:	3301      	adds	r3, #1
 80077a4:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80077a8:	2400      	movs	r4, #0
 80077aa:	4a5d      	ldr	r2, [pc, #372]	; (8007920 <__ieee754_powf+0x3d4>)
 80077ac:	00a7      	lsls	r7, r4, #2
 80077ae:	443a      	add	r2, r7
 80077b0:	ee07 1a90 	vmov	s15, r1
 80077b4:	ed92 7a00 	vldr	s14, [r2]
 80077b8:	4a5a      	ldr	r2, [pc, #360]	; (8007924 <__ieee754_powf+0x3d8>)
 80077ba:	ee37 6a27 	vadd.f32	s12, s14, s15
 80077be:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80077c2:	eec5 6a06 	vdiv.f32	s13, s10, s12
 80077c6:	1049      	asrs	r1, r1, #1
 80077c8:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80077cc:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80077d0:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 80077d4:	ee77 5ac7 	vsub.f32	s11, s15, s14
 80077d8:	ee06 1a10 	vmov	s12, r1
 80077dc:	ee65 4aa6 	vmul.f32	s9, s11, s13
 80077e0:	ee14 ca90 	vmov	ip, s9
 80077e4:	ea02 0c0c 	and.w	ip, r2, ip
 80077e8:	ee05 ca10 	vmov	s10, ip
 80077ec:	eeb1 4a45 	vneg.f32	s8, s10
 80077f0:	eee4 5a06 	vfma.f32	s11, s8, s12
 80077f4:	ee36 6a47 	vsub.f32	s12, s12, s14
 80077f8:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8007928 <__ieee754_powf+0x3dc>
 80077fc:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8007800:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8007804:	eee4 5a06 	vfma.f32	s11, s8, s12
 8007808:	ee67 3aa7 	vmul.f32	s7, s15, s15
 800780c:	ee25 6aa6 	vmul.f32	s12, s11, s13
 8007810:	eddf 5a46 	vldr	s11, [pc, #280]	; 800792c <__ieee754_powf+0x3e0>
 8007814:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8007818:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007930 <__ieee754_powf+0x3e4>
 800781c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8007820:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8007904 <__ieee754_powf+0x3b8>
 8007824:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8007828:	eddf 5a42 	vldr	s11, [pc, #264]	; 8007934 <__ieee754_powf+0x3e8>
 800782c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8007830:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8007938 <__ieee754_powf+0x3ec>
 8007834:	ee75 6a24 	vadd.f32	s13, s10, s9
 8007838:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800783c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8007840:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 8007844:	eef0 7a65 	vmov.f32	s15, s11
 8007848:	eee3 6a87 	vfma.f32	s13, s7, s14
 800784c:	eee5 7a05 	vfma.f32	s15, s10, s10
 8007850:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007854:	ee17 1a90 	vmov	r1, s15
 8007858:	4011      	ands	r1, r2
 800785a:	ee07 1a90 	vmov	s15, r1
 800785e:	ee37 7ae5 	vsub.f32	s14, s15, s11
 8007862:	eddf 5a36 	vldr	s11, [pc, #216]	; 800793c <__ieee754_powf+0x3f0>
 8007866:	eea4 7a05 	vfma.f32	s14, s8, s10
 800786a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800786e:	ee27 7a24 	vmul.f32	s14, s14, s9
 8007872:	eea7 7a86 	vfma.f32	s14, s15, s12
 8007876:	eeb0 6a47 	vmov.f32	s12, s14
 800787a:	eea5 6a27 	vfma.f32	s12, s10, s15
 800787e:	ee16 1a10 	vmov	r1, s12
 8007882:	4011      	ands	r1, r2
 8007884:	ee06 1a90 	vmov	s13, r1
 8007888:	eee4 6a27 	vfma.f32	s13, s8, s15
 800788c:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8007940 <__ieee754_powf+0x3f4>
 8007890:	ee37 7a66 	vsub.f32	s14, s14, s13
 8007894:	ee06 1a10 	vmov	s12, r1
 8007898:	ee27 7a27 	vmul.f32	s14, s14, s15
 800789c:	eddf 7a29 	vldr	s15, [pc, #164]	; 8007944 <__ieee754_powf+0x3f8>
 80078a0:	4929      	ldr	r1, [pc, #164]	; (8007948 <__ieee754_powf+0x3fc>)
 80078a2:	eea6 7a27 	vfma.f32	s14, s12, s15
 80078a6:	4439      	add	r1, r7
 80078a8:	edd1 7a00 	vldr	s15, [r1]
 80078ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80078b0:	ee07 3a90 	vmov	s15, r3
 80078b4:	eef0 0a47 	vmov.f32	s1, s14
 80078b8:	4b24      	ldr	r3, [pc, #144]	; (800794c <__ieee754_powf+0x400>)
 80078ba:	eee6 0a25 	vfma.f32	s1, s12, s11
 80078be:	443b      	add	r3, r7
 80078c0:	ed93 5a00 	vldr	s10, [r3]
 80078c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80078c8:	ee70 0a85 	vadd.f32	s1, s1, s10
 80078cc:	ee70 7aa6 	vadd.f32	s15, s1, s13
 80078d0:	ee17 3a90 	vmov	r3, s15
 80078d4:	4013      	ands	r3, r2
 80078d6:	ee07 3a90 	vmov	s15, r3
 80078da:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80078de:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80078e2:	eee6 7a65 	vfms.f32	s15, s12, s11
 80078e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078ea:	e70e      	b.n	800770a <__ieee754_powf+0x1be>
 80078ec:	2401      	movs	r4, #1
 80078ee:	e75c      	b.n	80077aa <__ieee754_powf+0x25e>
 80078f0:	08007ff9 	.word	0x08007ff9
 80078f4:	00000000 	.word	0x00000000
 80078f8:	3f7ffff7 	.word	0x3f7ffff7
 80078fc:	7149f2ca 	.word	0x7149f2ca
 8007900:	3f800007 	.word	0x3f800007
 8007904:	3eaaaaab 	.word	0x3eaaaaab
 8007908:	36eca570 	.word	0x36eca570
 800790c:	3fb8aa3b 	.word	0x3fb8aa3b
 8007910:	3fb8aa00 	.word	0x3fb8aa00
 8007914:	4b800000 	.word	0x4b800000
 8007918:	001cc471 	.word	0x001cc471
 800791c:	005db3d6 	.word	0x005db3d6
 8007920:	08008118 	.word	0x08008118
 8007924:	fffff000 	.word	0xfffff000
 8007928:	3e6c3255 	.word	0x3e6c3255
 800792c:	3e53f142 	.word	0x3e53f142
 8007930:	3e8ba305 	.word	0x3e8ba305
 8007934:	3edb6db7 	.word	0x3edb6db7
 8007938:	3f19999a 	.word	0x3f19999a
 800793c:	3f763800 	.word	0x3f763800
 8007940:	3f76384f 	.word	0x3f76384f
 8007944:	369dc3a0 	.word	0x369dc3a0
 8007948:	08008128 	.word	0x08008128
 800794c:	08008120 	.word	0x08008120
 8007950:	3338aa3c 	.word	0x3338aa3c
 8007954:	f040 8092 	bne.w	8007a7c <__ieee754_powf+0x530>
 8007958:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8007950 <__ieee754_powf+0x404>
 800795c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007960:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8007964:	eef4 6ac7 	vcmpe.f32	s13, s14
 8007968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800796c:	f73f aef6 	bgt.w	800775c <__ieee754_powf+0x210>
 8007970:	15db      	asrs	r3, r3, #23
 8007972:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8007976:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800797a:	4103      	asrs	r3, r0
 800797c:	4423      	add	r3, r4
 800797e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007982:	4947      	ldr	r1, [pc, #284]	; (8007aa0 <__ieee754_powf+0x554>)
 8007984:	3a7f      	subs	r2, #127	; 0x7f
 8007986:	4111      	asrs	r1, r2
 8007988:	ea23 0101 	bic.w	r1, r3, r1
 800798c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8007990:	ee07 1a10 	vmov	s14, r1
 8007994:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007998:	f1c2 0217 	rsb	r2, r2, #23
 800799c:	4110      	asrs	r0, r2
 800799e:	2c00      	cmp	r4, #0
 80079a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80079a4:	bfb8      	it	lt
 80079a6:	4240      	neglt	r0, r0
 80079a8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80079ac:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007aa4 <__ieee754_powf+0x558>
 80079b0:	ee17 3a10 	vmov	r3, s14
 80079b4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80079b8:	f023 030f 	bic.w	r3, r3, #15
 80079bc:	ee07 3a10 	vmov	s14, r3
 80079c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80079c4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80079c8:	eddf 7a37 	vldr	s15, [pc, #220]	; 8007aa8 <__ieee754_powf+0x55c>
 80079cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079d0:	eee0 7aa6 	vfma.f32	s15, s1, s13
 80079d4:	eddf 6a35 	vldr	s13, [pc, #212]	; 8007aac <__ieee754_powf+0x560>
 80079d8:	eeb0 0a67 	vmov.f32	s0, s15
 80079dc:	eea7 0a26 	vfma.f32	s0, s14, s13
 80079e0:	eeb0 6a40 	vmov.f32	s12, s0
 80079e4:	eea7 6a66 	vfms.f32	s12, s14, s13
 80079e8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80079ec:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80079f0:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8007ab0 <__ieee754_powf+0x564>
 80079f4:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8007ab4 <__ieee754_powf+0x568>
 80079f8:	eea7 6a26 	vfma.f32	s12, s14, s13
 80079fc:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8007ab8 <__ieee754_powf+0x56c>
 8007a00:	eee6 6a07 	vfma.f32	s13, s12, s14
 8007a04:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8007abc <__ieee754_powf+0x570>
 8007a08:	eea6 6a87 	vfma.f32	s12, s13, s14
 8007a0c:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8007ac0 <__ieee754_powf+0x574>
 8007a10:	eee6 6a07 	vfma.f32	s13, s12, s14
 8007a14:	eeb0 6a40 	vmov.f32	s12, s0
 8007a18:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8007a1c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007a20:	eeb0 7a46 	vmov.f32	s14, s12
 8007a24:	ee77 6a66 	vsub.f32	s13, s14, s13
 8007a28:	ee20 6a06 	vmul.f32	s12, s0, s12
 8007a2c:	eee0 7a27 	vfma.f32	s15, s0, s15
 8007a30:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007a34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a38:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007a3c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007a40:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007a44:	ee10 3a10 	vmov	r3, s0
 8007a48:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8007a4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a50:	da1a      	bge.n	8007a88 <__ieee754_powf+0x53c>
 8007a52:	f000 f8b1 	bl	8007bb8 <scalbnf>
 8007a56:	ee20 0a08 	vmul.f32	s0, s0, s16
 8007a5a:	e5c9      	b.n	80075f0 <__ieee754_powf+0xa4>
 8007a5c:	4a19      	ldr	r2, [pc, #100]	; (8007ac4 <__ieee754_powf+0x578>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	dd02      	ble.n	8007a68 <__ieee754_powf+0x51c>
 8007a62:	eddf 7a19 	vldr	s15, [pc, #100]	; 8007ac8 <__ieee754_powf+0x57c>
 8007a66:	e67b      	b.n	8007760 <__ieee754_powf+0x214>
 8007a68:	d108      	bne.n	8007a7c <__ieee754_powf+0x530>
 8007a6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007a6e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8007a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a76:	f6ff af7b 	blt.w	8007970 <__ieee754_powf+0x424>
 8007a7a:	e7f2      	b.n	8007a62 <__ieee754_powf+0x516>
 8007a7c:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8007a80:	f73f af76 	bgt.w	8007970 <__ieee754_powf+0x424>
 8007a84:	2000      	movs	r0, #0
 8007a86:	e78f      	b.n	80079a8 <__ieee754_powf+0x45c>
 8007a88:	ee00 3a10 	vmov	s0, r3
 8007a8c:	e7e3      	b.n	8007a56 <__ieee754_powf+0x50a>
 8007a8e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007a92:	e5ad      	b.n	80075f0 <__ieee754_powf+0xa4>
 8007a94:	eeb0 0a68 	vmov.f32	s0, s17
 8007a98:	e5aa      	b.n	80075f0 <__ieee754_powf+0xa4>
 8007a9a:	eeb0 0a48 	vmov.f32	s0, s16
 8007a9e:	e5a7      	b.n	80075f0 <__ieee754_powf+0xa4>
 8007aa0:	007fffff 	.word	0x007fffff
 8007aa4:	3f317218 	.word	0x3f317218
 8007aa8:	35bfbe8c 	.word	0x35bfbe8c
 8007aac:	3f317200 	.word	0x3f317200
 8007ab0:	3331bb4c 	.word	0x3331bb4c
 8007ab4:	b5ddea0e 	.word	0xb5ddea0e
 8007ab8:	388ab355 	.word	0x388ab355
 8007abc:	bb360b61 	.word	0xbb360b61
 8007ac0:	3e2aaaab 	.word	0x3e2aaaab
 8007ac4:	43160000 	.word	0x43160000
 8007ac8:	0da24260 	.word	0x0da24260

08007acc <__ieee754_sqrtf>:
 8007acc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007ad0:	4770      	bx	lr

08007ad2 <matherr>:
 8007ad2:	2000      	movs	r0, #0
 8007ad4:	4770      	bx	lr

08007ad6 <fabsf>:
 8007ad6:	ee10 3a10 	vmov	r3, s0
 8007ada:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ade:	ee00 3a10 	vmov	s0, r3
 8007ae2:	4770      	bx	lr

08007ae4 <finitef>:
 8007ae4:	ee10 3a10 	vmov	r3, s0
 8007ae8:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8007aec:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8007af0:	bfac      	ite	ge
 8007af2:	2000      	movge	r0, #0
 8007af4:	2001      	movlt	r0, #1
 8007af6:	4770      	bx	lr

08007af8 <nanf>:
 8007af8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007b00 <nanf+0x8>
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	7fc00000 	.word	0x7fc00000

08007b04 <rintf>:
 8007b04:	b513      	push	{r0, r1, r4, lr}
 8007b06:	ee10 1a10 	vmov	r1, s0
 8007b0a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007b0e:	0ddc      	lsrs	r4, r3, #23
 8007b10:	3c7f      	subs	r4, #127	; 0x7f
 8007b12:	2c16      	cmp	r4, #22
 8007b14:	dc46      	bgt.n	8007ba4 <rintf+0xa0>
 8007b16:	b32b      	cbz	r3, 8007b64 <rintf+0x60>
 8007b18:	2c00      	cmp	r4, #0
 8007b1a:	ee10 2a10 	vmov	r2, s0
 8007b1e:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8007b22:	da21      	bge.n	8007b68 <rintf+0x64>
 8007b24:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8007b28:	425b      	negs	r3, r3
 8007b2a:	4a21      	ldr	r2, [pc, #132]	; (8007bb0 <rintf+0xac>)
 8007b2c:	0a5b      	lsrs	r3, r3, #9
 8007b2e:	0d09      	lsrs	r1, r1, #20
 8007b30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b34:	0509      	lsls	r1, r1, #20
 8007b36:	430b      	orrs	r3, r1
 8007b38:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8007b3c:	ee07 3a90 	vmov	s15, r3
 8007b40:	edd2 6a00 	vldr	s13, [r2]
 8007b44:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8007b48:	ed8d 7a01 	vstr	s14, [sp, #4]
 8007b4c:	eddd 7a01 	vldr	s15, [sp, #4]
 8007b50:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007b54:	ee17 3a90 	vmov	r3, s15
 8007b58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b5c:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8007b60:	ee00 3a10 	vmov	s0, r3
 8007b64:	b002      	add	sp, #8
 8007b66:	bd10      	pop	{r4, pc}
 8007b68:	4b12      	ldr	r3, [pc, #72]	; (8007bb4 <rintf+0xb0>)
 8007b6a:	4123      	asrs	r3, r4
 8007b6c:	4219      	tst	r1, r3
 8007b6e:	d0f9      	beq.n	8007b64 <rintf+0x60>
 8007b70:	085b      	lsrs	r3, r3, #1
 8007b72:	4219      	tst	r1, r3
 8007b74:	d006      	beq.n	8007b84 <rintf+0x80>
 8007b76:	ea21 0203 	bic.w	r2, r1, r3
 8007b7a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007b7e:	fa43 f404 	asr.w	r4, r3, r4
 8007b82:	4322      	orrs	r2, r4
 8007b84:	4b0a      	ldr	r3, [pc, #40]	; (8007bb0 <rintf+0xac>)
 8007b86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007b8a:	ed90 7a00 	vldr	s14, [r0]
 8007b8e:	ee07 2a90 	vmov	s15, r2
 8007b92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b96:	edcd 7a01 	vstr	s15, [sp, #4]
 8007b9a:	ed9d 0a01 	vldr	s0, [sp, #4]
 8007b9e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007ba2:	e7df      	b.n	8007b64 <rintf+0x60>
 8007ba4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007ba8:	d3dc      	bcc.n	8007b64 <rintf+0x60>
 8007baa:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007bae:	e7d9      	b.n	8007b64 <rintf+0x60>
 8007bb0:	08008130 	.word	0x08008130
 8007bb4:	007fffff 	.word	0x007fffff

08007bb8 <scalbnf>:
 8007bb8:	b508      	push	{r3, lr}
 8007bba:	ee10 2a10 	vmov	r2, s0
 8007bbe:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8007bc2:	ed2d 8b02 	vpush	{d8}
 8007bc6:	eef0 0a40 	vmov.f32	s1, s0
 8007bca:	d004      	beq.n	8007bd6 <scalbnf+0x1e>
 8007bcc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007bd0:	d306      	bcc.n	8007be0 <scalbnf+0x28>
 8007bd2:	ee70 0a00 	vadd.f32	s1, s0, s0
 8007bd6:	ecbd 8b02 	vpop	{d8}
 8007bda:	eeb0 0a60 	vmov.f32	s0, s1
 8007bde:	bd08      	pop	{r3, pc}
 8007be0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007be4:	d21c      	bcs.n	8007c20 <scalbnf+0x68>
 8007be6:	4b1f      	ldr	r3, [pc, #124]	; (8007c64 <scalbnf+0xac>)
 8007be8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007c68 <scalbnf+0xb0>
 8007bec:	4298      	cmp	r0, r3
 8007bee:	ee60 0a27 	vmul.f32	s1, s0, s15
 8007bf2:	db10      	blt.n	8007c16 <scalbnf+0x5e>
 8007bf4:	ee10 2a90 	vmov	r2, s1
 8007bf8:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8007bfc:	3b19      	subs	r3, #25
 8007bfe:	4403      	add	r3, r0
 8007c00:	2bfe      	cmp	r3, #254	; 0xfe
 8007c02:	dd0f      	ble.n	8007c24 <scalbnf+0x6c>
 8007c04:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8007c6c <scalbnf+0xb4>
 8007c08:	eeb0 0a48 	vmov.f32	s0, s16
 8007c0c:	f000 f834 	bl	8007c78 <copysignf>
 8007c10:	ee60 0a08 	vmul.f32	s1, s0, s16
 8007c14:	e7df      	b.n	8007bd6 <scalbnf+0x1e>
 8007c16:	eddf 7a16 	vldr	s15, [pc, #88]	; 8007c70 <scalbnf+0xb8>
 8007c1a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8007c1e:	e7da      	b.n	8007bd6 <scalbnf+0x1e>
 8007c20:	0ddb      	lsrs	r3, r3, #23
 8007c22:	e7ec      	b.n	8007bfe <scalbnf+0x46>
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	dd06      	ble.n	8007c36 <scalbnf+0x7e>
 8007c28:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8007c2c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8007c30:	ee00 3a90 	vmov	s1, r3
 8007c34:	e7cf      	b.n	8007bd6 <scalbnf+0x1e>
 8007c36:	f113 0f16 	cmn.w	r3, #22
 8007c3a:	da06      	bge.n	8007c4a <scalbnf+0x92>
 8007c3c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007c40:	4298      	cmp	r0, r3
 8007c42:	dcdf      	bgt.n	8007c04 <scalbnf+0x4c>
 8007c44:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8007c70 <scalbnf+0xb8>
 8007c48:	e7de      	b.n	8007c08 <scalbnf+0x50>
 8007c4a:	3319      	adds	r3, #25
 8007c4c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8007c50:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8007c54:	eddf 7a07 	vldr	s15, [pc, #28]	; 8007c74 <scalbnf+0xbc>
 8007c58:	ee07 3a10 	vmov	s14, r3
 8007c5c:	ee67 0a27 	vmul.f32	s1, s14, s15
 8007c60:	e7b9      	b.n	8007bd6 <scalbnf+0x1e>
 8007c62:	bf00      	nop
 8007c64:	ffff3cb0 	.word	0xffff3cb0
 8007c68:	4c000000 	.word	0x4c000000
 8007c6c:	7149f2ca 	.word	0x7149f2ca
 8007c70:	0da24260 	.word	0x0da24260
 8007c74:	33000000 	.word	0x33000000

08007c78 <copysignf>:
 8007c78:	ee10 3a10 	vmov	r3, s0
 8007c7c:	ee10 2a90 	vmov	r2, s1
 8007c80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c84:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	ee00 3a10 	vmov	s0, r3
 8007c8e:	4770      	bx	lr

08007c90 <_init>:
 8007c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c92:	bf00      	nop
 8007c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c96:	bc08      	pop	{r3}
 8007c98:	469e      	mov	lr, r3
 8007c9a:	4770      	bx	lr

08007c9c <_fini>:
 8007c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c9e:	bf00      	nop
 8007ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ca2:	bc08      	pop	{r3}
 8007ca4:	469e      	mov	lr, r3
 8007ca6:	4770      	bx	lr
