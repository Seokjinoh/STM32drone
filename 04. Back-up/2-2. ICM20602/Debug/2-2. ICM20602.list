
2-2. ICM20602.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006aec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  08006c80  08006c80  00016c80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007088  08007088  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007088  08007088  00017088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007090  08007090  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007090  08007090  00017090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007094  08007094  00017094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  200001dc  08007274  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  08007274  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d245  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002744  00000000  00000000  0002d451  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cf0  00000000  00000000  0002fb98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc0  00000000  00000000  00030888  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023a5a  00000000  00000000  00031448  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b162  00000000  00000000  00054ea2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8c59  00000000  00000000  00060004  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00128c5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004100  00000000  00000000  00128cd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006c64 	.word	0x08006c64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08006c64 	.word	0x08006c64

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	601a      	str	r2, [r3, #0]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f023 0210 	bic.w	r2, r3, #16
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	431a      	orrs	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	605a      	str	r2, [r3, #4]
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d101      	bne.n	8000f06 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000f02:	2301      	movs	r3, #1
 8000f04:	e000      	b.n	8000f08 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000f06:	2300      	movs	r3, #0
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	f003 0302 	and.w	r3, r3, #2
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d101      	bne.n	8000f2c <LL_SPI_IsActiveFlag_TXE+0x18>
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e000      	b.n	8000f2e <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b083      	sub	sp, #12
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	b2db      	uxtb	r3, r3
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	330c      	adds	r3, #12
 8000f64:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	78fa      	ldrb	r2, [r7, #3]
 8000f6a:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000f6c:	bf00      	nop
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	691a      	ldr	r2, [r3, #16]
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	683a      	ldr	r2, [r7, #0]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	bf0c      	ite	eq
 8000f90:	2301      	moveq	r3, #1
 8000f92:	2300      	movne	r3, #0
 8000f94:	b2db      	uxtb	r3, r3
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	b083      	sub	sp, #12
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
 8000faa:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	683a      	ldr	r2, [r7, #0]
 8000fb0:	619a      	str	r2, [r3, #24]
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b083      	sub	sp, #12
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
 8000fc6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	041a      	lsls	r2, r3, #16
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	619a      	str	r2, [r3, #24]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000fe4:	4b08      	ldr	r3, [pc, #32]	; (8001008 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fe8:	4907      	ldr	r1, [pc, #28]	; (8001008 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000ff0:	4b05      	ldr	r3, [pc, #20]	; (8001008 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000ff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
}
 8000ffc:	bf00      	nop
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	40023800 	.word	0x40023800

0800100c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001016:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001018:	4907      	ldr	r1, [pc, #28]	; (8001038 <LL_APB1_GRP1_EnableClock+0x2c>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4313      	orrs	r3, r2
 800101e:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001022:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4013      	ands	r3, r2
 8001028:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800102a:	68fb      	ldr	r3, [r7, #12]
}
 800102c:	bf00      	nop
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	40023800 	.word	0x40023800

0800103c <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b090      	sub	sp, #64	; 0x40
 8001040:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001042:	f107 0318 	add.w	r3, r7, #24
 8001046:	2228      	movs	r2, #40	; 0x28
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f003 fa76 	bl	800453c <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	463b      	mov	r3, r7
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]
 800105e:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001060:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001064:	f7ff ffd2 	bl	800100c <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001068:	2002      	movs	r0, #2
 800106a:	f7ff ffb7 	bl	8000fdc <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800106e:	2004      	movs	r0, #4
 8001070:	f7ff ffb4 	bl	8000fdc <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001074:	2001      	movs	r0, #1
 8001076:	f7ff ffb1 	bl	8000fdc <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 800107a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800107e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001080:	2302      	movs	r3, #2
 8001082:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001084:	2303      	movs	r3, #3
 8001086:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800108c:	2300      	movs	r3, #0
 800108e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001090:	2305      	movs	r3, #5
 8001092:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001094:	463b      	mov	r3, r7
 8001096:	4619      	mov	r1, r3
 8001098:	4841      	ldr	r0, [pc, #260]	; (80011a0 <BNO080_GPIO_SPI_Initialization+0x164>)
 800109a:	f002 faba 	bl	8003612 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800109e:	2300      	movs	r3, #0
 80010a0:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80010a2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80010a6:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80010a8:	2300      	movs	r3, #0
 80010aa:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80010ac:	2302      	movs	r3, #2
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80010b0:	2301      	movs	r3, #1
 80010b2:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80010b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80010ba:	2318      	movs	r3, #24
 80010bc:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80010be:	2300      	movs	r3, #0
 80010c0:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 80010c6:	230a      	movs	r3, #10
 80010c8:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 80010ca:	f107 0318 	add.w	r3, r7, #24
 80010ce:	4619      	mov	r1, r3
 80010d0:	4834      	ldr	r0, [pc, #208]	; (80011a4 <BNO080_GPIO_SPI_Initialization+0x168>)
 80010d2:	f002 fc6c 	bl	80039ae <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80010d6:	2100      	movs	r1, #0
 80010d8:	4832      	ldr	r0, [pc, #200]	; (80011a4 <BNO080_GPIO_SPI_Initialization+0x168>)
 80010da:	f7ff fef5 	bl	8000ec8 <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 80010de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010e2:	4831      	ldr	r0, [pc, #196]	; (80011a8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80010e4:	f7ff ff6b 	bl	8000fbe <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 80010e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ec:	482c      	ldr	r0, [pc, #176]	; (80011a0 <BNO080_GPIO_SPI_Initialization+0x164>)
 80010ee:	f7ff ff66 	bl	8000fbe <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 80010f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f6:	482d      	ldr	r0, [pc, #180]	; (80011ac <BNO080_GPIO_SPI_Initialization+0x170>)
 80010f8:	f7ff ff61 	bl	8000fbe <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 80010fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001100:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001102:	2301      	movs	r3, #1
 8001104:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001106:	2303      	movs	r3, #3
 8001108:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 8001112:	463b      	mov	r3, r7
 8001114:	4619      	mov	r1, r3
 8001116:	4822      	ldr	r0, [pc, #136]	; (80011a0 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001118:	f002 fa7b 	bl	8003612 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 800111c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001120:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001122:	2301      	movs	r3, #1
 8001124:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001126:	2303      	movs	r3, #3
 8001128:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 8001132:	463b      	mov	r3, r7
 8001134:	4619      	mov	r1, r3
 8001136:	481c      	ldr	r0, [pc, #112]	; (80011a8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001138:	f002 fa6b 	bl	8003612 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 800113c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001140:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001142:	2301      	movs	r3, #1
 8001144:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001146:	2303      	movs	r3, #3
 8001148:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 8001152:	463b      	mov	r3, r7
 8001154:	4619      	mov	r1, r3
 8001156:	4815      	ldr	r0, [pc, #84]	; (80011ac <BNO080_GPIO_SPI_Initialization+0x170>)
 8001158:	f002 fa5b 	bl	8003612 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 800115c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001160:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001166:	2301      	movs	r3, #1
 8001168:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 800116a:	463b      	mov	r3, r7
 800116c:	4619      	mov	r1, r3
 800116e:	480e      	ldr	r0, [pc, #56]	; (80011a8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001170:	f002 fa4f 	bl	8003612 <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 8001174:	480b      	ldr	r0, [pc, #44]	; (80011a4 <BNO080_GPIO_SPI_Initialization+0x168>)
 8001176:	f7ff fe97 	bl	8000ea8 <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 800117a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800117e:	4808      	ldr	r0, [pc, #32]	; (80011a0 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001180:	f7ff ff0f 	bl	8000fa2 <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 8001184:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001188:	4808      	ldr	r0, [pc, #32]	; (80011ac <BNO080_GPIO_SPI_Initialization+0x170>)
 800118a:	f7ff ff0a 	bl	8000fa2 <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 800118e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001192:	4805      	ldr	r0, [pc, #20]	; (80011a8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001194:	f7ff ff05 	bl	8000fa2 <LL_GPIO_SetOutputPin>
}
 8001198:	bf00      	nop
 800119a:	3740      	adds	r7, #64	; 0x40
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40020400 	.word	0x40020400
 80011a4:	40003800 	.word	0x40003800
 80011a8:	40020800 	.word	0x40020800
 80011ac:	40020000 	.word	0x40020000

080011b0 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 80011b6:	f7ff ff41 	bl	800103c <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 80011ba:	482e      	ldr	r0, [pc, #184]	; (8001274 <BNO080_Initialization+0xc4>)
 80011bc:	f003 fe22 	bl	8004e04 <iprintf>
	
	CHIP_DESELECT(BNO080);
 80011c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011c4:	482c      	ldr	r0, [pc, #176]	; (8001278 <BNO080_Initialization+0xc8>)
 80011c6:	f7ff feec 	bl	8000fa2 <LL_GPIO_SetOutputPin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 80011ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ce:	482b      	ldr	r0, [pc, #172]	; (800127c <BNO080_Initialization+0xcc>)
 80011d0:	f7ff fee7 	bl	8000fa2 <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 80011d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011d8:	4829      	ldr	r0, [pc, #164]	; (8001280 <BNO080_Initialization+0xd0>)
 80011da:	f7ff fef0 	bl	8000fbe <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 80011de:	20c8      	movs	r0, #200	; 0xc8
 80011e0:	f001 fbdc 	bl	800299c <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 80011e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011e8:	4825      	ldr	r0, [pc, #148]	; (8001280 <BNO080_Initialization+0xd0>)
 80011ea:	f7ff feda 	bl	8000fa2 <LL_GPIO_SetOutputPin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 80011ee:	f000 f8d7 	bl	80013a0 <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 80011f2:	f000 f8d5 	bl	80013a0 <BNO080_waitForSPI>
	BNO080_receivePacket();
 80011f6:	f000 f8f7 	bl	80013e8 <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 80011fa:	f000 f8d1 	bl	80013a0 <BNO080_waitForSPI>
	BNO080_receivePacket();
 80011fe:	f000 f8f3 	bl	80013e8 <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8001202:	4b20      	ldr	r3, [pc, #128]	; (8001284 <BNO080_Initialization+0xd4>)
 8001204:	22f9      	movs	r2, #249	; 0xf9
 8001206:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 8001208:	4b1e      	ldr	r3, [pc, #120]	; (8001284 <BNO080_Initialization+0xd4>)
 800120a:	2200      	movs	r2, #0
 800120c:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 800120e:	2102      	movs	r1, #2
 8001210:	2002      	movs	r0, #2
 8001212:	f000 f959 	bl	80014c8 <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 8001216:	f000 f8c3 	bl	80013a0 <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 800121a:	f000 f8e5 	bl	80013e8 <BNO080_receivePacket>
 800121e:	4603      	mov	r3, r0
 8001220:	2b01      	cmp	r3, #1
 8001222:	d11b      	bne.n	800125c <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 8001224:	4b18      	ldr	r3, [pc, #96]	; (8001288 <BNO080_Initialization+0xd8>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	4619      	mov	r1, r3
 800122a:	4b17      	ldr	r3, [pc, #92]	; (8001288 <BNO080_Initialization+0xd8>)
 800122c:	785b      	ldrb	r3, [r3, #1]
 800122e:	461a      	mov	r2, r3
 8001230:	4b15      	ldr	r3, [pc, #84]	; (8001288 <BNO080_Initialization+0xd8>)
 8001232:	789b      	ldrb	r3, [r3, #2]
 8001234:	4618      	mov	r0, r3
 8001236:	4b14      	ldr	r3, [pc, #80]	; (8001288 <BNO080_Initialization+0xd8>)
 8001238:	78db      	ldrb	r3, [r3, #3]
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	4603      	mov	r3, r0
 800123e:	4813      	ldr	r0, [pc, #76]	; (800128c <BNO080_Initialization+0xdc>)
 8001240:	f003 fde0 	bl	8004e04 <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <BNO080_Initialization+0xd4>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2bf8      	cmp	r3, #248	; 0xf8
 800124a:	d107      	bne.n	800125c <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 800124c:	4b0d      	ldr	r3, [pc, #52]	; (8001284 <BNO080_Initialization+0xd4>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	4619      	mov	r1, r3
 8001252:	480f      	ldr	r0, [pc, #60]	; (8001290 <BNO080_Initialization+0xe0>)
 8001254:	f003 fdd6 	bl	8004e04 <iprintf>
			return (0);
 8001258:	2300      	movs	r3, #0
 800125a:	e007      	b.n	800126c <BNO080_Initialization+0xbc>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 800125c:	4b09      	ldr	r3, [pc, #36]	; (8001284 <BNO080_Initialization+0xd4>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	22f8      	movs	r2, #248	; 0xf8
 8001262:	4619      	mov	r1, r3
 8001264:	480b      	ldr	r0, [pc, #44]	; (8001294 <BNO080_Initialization+0xe4>)
 8001266:	f003 fdcd 	bl	8004e04 <iprintf>
	return (1); //Something went wrong
 800126a:	2301      	movs	r3, #1
}
 800126c:	4618      	mov	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	08006c80 	.word	0x08006c80
 8001278:	40020400 	.word	0x40020400
 800127c:	40020000 	.word	0x40020000
 8001280:	40020800 	.word	0x40020800
 8001284:	20000264 	.word	0x20000264
 8001288:	20000210 	.word	0x20000210
 800128c:	08006c94 	.word	0x08006c94
 8001290:	08006cac 	.word	0x08006cac
 8001294:	08006ccc 	.word	0x08006ccc

08001298 <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 80012a2:	bf00      	nop
 80012a4:	480c      	ldr	r0, [pc, #48]	; (80012d8 <SPI2_SendByte+0x40>)
 80012a6:	f7ff fe35 	bl	8000f14 <LL_SPI_IsActiveFlag_TXE>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d0f9      	beq.n	80012a4 <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	4619      	mov	r1, r3
 80012b4:	4808      	ldr	r0, [pc, #32]	; (80012d8 <SPI2_SendByte+0x40>)
 80012b6:	f7ff fe4d 	bl	8000f54 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 80012ba:	bf00      	nop
 80012bc:	4806      	ldr	r0, [pc, #24]	; (80012d8 <SPI2_SendByte+0x40>)
 80012be:	f7ff fe16 	bl	8000eee <LL_SPI_IsActiveFlag_RXNE>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d0f9      	beq.n	80012bc <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 80012c8:	4803      	ldr	r0, [pc, #12]	; (80012d8 <SPI2_SendByte+0x40>)
 80012ca:	f7ff fe36 	bl	8000f3a <LL_SPI_ReceiveData8>
 80012ce:	4603      	mov	r3, r0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40003800 	.word	0x40003800

080012dc <BNO080_enableGameRotationVector>:
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
}

//Sends the packet to enable the rotation vector
void BNO080_enableGameRotationVector(uint16_t timeBetweenReports)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_GAME_ROTATION_VECTOR, timeBetweenReports, 0);
 80012e6:	88fb      	ldrh	r3, [r7, #6]
 80012e8:	2200      	movs	r2, #0
 80012ea:	4619      	mov	r1, r3
 80012ec:	2008      	movs	r0, #8
 80012ee:	f000 f805 	bl	80012fc <BNO080_setFeatureCommand>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <BNO080_setFeatureCommand>:
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
 8001308:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 800130a:	4b24      	ldr	r3, [pc, #144]	; (800139c <BNO080_setFeatureCommand+0xa0>)
 800130c:	22fd      	movs	r2, #253	; 0xfd
 800130e:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8001310:	4a22      	ldr	r2, [pc, #136]	; (800139c <BNO080_setFeatureCommand+0xa0>)
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 8001316:	4b21      	ldr	r3, [pc, #132]	; (800139c <BNO080_setFeatureCommand+0xa0>)
 8001318:	2200      	movs	r2, #0
 800131a:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 800131c:	4b1f      	ldr	r3, [pc, #124]	; (800139c <BNO080_setFeatureCommand+0xa0>)
 800131e:	2200      	movs	r2, #0
 8001320:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 8001322:	4b1e      	ldr	r3, [pc, #120]	; (800139c <BNO080_setFeatureCommand+0xa0>)
 8001324:	2200      	movs	r2, #0
 8001326:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	b2da      	uxtb	r2, r3
 800132c:	4b1b      	ldr	r3, [pc, #108]	; (800139c <BNO080_setFeatureCommand+0xa0>)
 800132e:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	0a1b      	lsrs	r3, r3, #8
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4b19      	ldr	r3, [pc, #100]	; (800139c <BNO080_setFeatureCommand+0xa0>)
 8001338:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	0c1b      	lsrs	r3, r3, #16
 800133e:	b2da      	uxtb	r2, r3
 8001340:	4b16      	ldr	r3, [pc, #88]	; (800139c <BNO080_setFeatureCommand+0xa0>)
 8001342:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	0e1b      	lsrs	r3, r3, #24
 8001348:	b2da      	uxtb	r2, r3
 800134a:	4b14      	ldr	r3, [pc, #80]	; (800139c <BNO080_setFeatureCommand+0xa0>)
 800134c:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 800134e:	4b13      	ldr	r3, [pc, #76]	; (800139c <BNO080_setFeatureCommand+0xa0>)
 8001350:	2200      	movs	r2, #0
 8001352:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <BNO080_setFeatureCommand+0xa0>)
 8001356:	2200      	movs	r2, #0
 8001358:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <BNO080_setFeatureCommand+0xa0>)
 800135c:	2200      	movs	r2, #0
 800135e:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8001360:	4b0e      	ldr	r3, [pc, #56]	; (800139c <BNO080_setFeatureCommand+0xa0>)
 8001362:	2200      	movs	r2, #0
 8001364:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	b2da      	uxtb	r2, r3
 800136a:	4b0c      	ldr	r3, [pc, #48]	; (800139c <BNO080_setFeatureCommand+0xa0>)
 800136c:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	0a1b      	lsrs	r3, r3, #8
 8001372:	b2da      	uxtb	r2, r3
 8001374:	4b09      	ldr	r3, [pc, #36]	; (800139c <BNO080_setFeatureCommand+0xa0>)
 8001376:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	0c1b      	lsrs	r3, r3, #16
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4b07      	ldr	r3, [pc, #28]	; (800139c <BNO080_setFeatureCommand+0xa0>)
 8001380:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	0e1b      	lsrs	r3, r3, #24
 8001386:	b2da      	uxtb	r2, r3
 8001388:	4b04      	ldr	r3, [pc, #16]	; (800139c <BNO080_setFeatureCommand+0xa0>)
 800138a:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 800138c:	2111      	movs	r1, #17
 800138e:	2002      	movs	r0, #2
 8001390:	f000 f89a 	bl	80014c8 <BNO080_sendPacket>
}
 8001394:	bf00      	nop
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000264 	.word	0x20000264

080013a0 <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 80013a6:	2300      	movs	r3, #0
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	e00c      	b.n	80013c6 <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 80013ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013b0:	480b      	ldr	r0, [pc, #44]	; (80013e0 <BNO080_waitForSPI+0x40>)
 80013b2:	f7ff fde1 	bl	8000f78 <LL_GPIO_IsInputPinSet>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d101      	bne.n	80013c0 <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 80013bc:	2301      	movs	r3, #1
 80013be:	e00a      	b.n	80013d6 <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3301      	adds	r3, #1
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013cc:	d1ee      	bne.n	80013ac <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 80013ce:	4805      	ldr	r0, [pc, #20]	; (80013e4 <BNO080_waitForSPI+0x44>)
 80013d0:	f003 fd8c 	bl	8004eec <puts>
	return (0);
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40020800 	.word	0x40020800
 80013e4:	08006d18 	.word	0x08006d18

080013e8 <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 80013ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013f2:	4831      	ldr	r0, [pc, #196]	; (80014b8 <BNO080_receivePacket+0xd0>)
 80013f4:	f7ff fdc0 	bl	8000f78 <LL_GPIO_IsInputPinSet>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d101      	bne.n	8001402 <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 80013fe:	2300      	movs	r3, #0
 8001400:	e056      	b.n	80014b0 <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 8001402:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001406:	482d      	ldr	r0, [pc, #180]	; (80014bc <BNO080_receivePacket+0xd4>)
 8001408:	f7ff fdd9 	bl	8000fbe <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 800140c:	2000      	movs	r0, #0
 800140e:	f7ff ff43 	bl	8001298 <SPI2_SendByte>
 8001412:	4603      	mov	r3, r0
 8001414:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 8001416:	2000      	movs	r0, #0
 8001418:	f7ff ff3e 	bl	8001298 <SPI2_SendByte>
 800141c:	4603      	mov	r3, r0
 800141e:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 8001420:	2000      	movs	r0, #0
 8001422:	f7ff ff39 	bl	8001298 <SPI2_SendByte>
 8001426:	4603      	mov	r3, r0
 8001428:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 800142a:	2000      	movs	r0, #0
 800142c:	f7ff ff34 	bl	8001298 <SPI2_SendByte>
 8001430:	4603      	mov	r3, r0
 8001432:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 8001434:	4a22      	ldr	r2, [pc, #136]	; (80014c0 <BNO080_receivePacket+0xd8>)
 8001436:	7b7b      	ldrb	r3, [r7, #13]
 8001438:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 800143a:	4a21      	ldr	r2, [pc, #132]	; (80014c0 <BNO080_receivePacket+0xd8>)
 800143c:	7b3b      	ldrb	r3, [r7, #12]
 800143e:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8001440:	4a1f      	ldr	r2, [pc, #124]	; (80014c0 <BNO080_receivePacket+0xd8>)
 8001442:	7afb      	ldrb	r3, [r7, #11]
 8001444:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 8001446:	4a1e      	ldr	r2, [pc, #120]	; (80014c0 <BNO080_receivePacket+0xd8>)
 8001448:	7abb      	ldrb	r3, [r7, #10]
 800144a:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 800144c:	7b3b      	ldrb	r3, [r7, #12]
 800144e:	021b      	lsls	r3, r3, #8
 8001450:	b21a      	sxth	r2, r3
 8001452:	7b7b      	ldrb	r3, [r7, #13]
 8001454:	b21b      	sxth	r3, r3
 8001456:	4313      	orrs	r3, r2
 8001458:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 800145a:	893b      	ldrh	r3, [r7, #8]
 800145c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001460:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8001462:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 800146a:	2300      	movs	r3, #0
 800146c:	e020      	b.n	80014b0 <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 800146e:	893b      	ldrh	r3, [r7, #8]
 8001470:	3b04      	subs	r3, #4
 8001472:	b29b      	uxth	r3, r3
 8001474:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001476:	2300      	movs	r3, #0
 8001478:	81fb      	strh	r3, [r7, #14]
 800147a:	e00e      	b.n	800149a <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 800147c:	20ff      	movs	r0, #255	; 0xff
 800147e:	f7ff ff0b 	bl	8001298 <SPI2_SendByte>
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 8001486:	89fb      	ldrh	r3, [r7, #14]
 8001488:	2b7f      	cmp	r3, #127	; 0x7f
 800148a:	d803      	bhi.n	8001494 <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 800148c:	89fb      	ldrh	r3, [r7, #14]
 800148e:	490d      	ldr	r1, [pc, #52]	; (80014c4 <BNO080_receivePacket+0xdc>)
 8001490:	79fa      	ldrb	r2, [r7, #7]
 8001492:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001494:	89fb      	ldrh	r3, [r7, #14]
 8001496:	3301      	adds	r3, #1
 8001498:	81fb      	strh	r3, [r7, #14]
 800149a:	89fa      	ldrh	r2, [r7, #14]
 800149c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	dbeb      	blt.n	800147c <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 80014a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014a8:	4804      	ldr	r0, [pc, #16]	; (80014bc <BNO080_receivePacket+0xd4>)
 80014aa:	f7ff fd7a 	bl	8000fa2 <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 80014ae:	2301      	movs	r3, #1
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40020800 	.word	0x40020800
 80014bc:	40020400 	.word	0x40020400
 80014c0:	20000210 	.word	0x20000210
 80014c4:	20000264 	.word	0x20000264

080014c8 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	460a      	mov	r2, r1
 80014d2:	71fb      	strb	r3, [r7, #7]
 80014d4:	4613      	mov	r3, r2
 80014d6:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 80014d8:	79bb      	ldrb	r3, [r7, #6]
 80014da:	3304      	adds	r3, #4
 80014dc:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 80014de:	f7ff ff5f 	bl	80013a0 <BNO080_waitForSPI>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d101      	bne.n	80014ec <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 80014e8:	2300      	movs	r3, #0
 80014ea:	e032      	b.n	8001552 <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 80014ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014f0:	481a      	ldr	r0, [pc, #104]	; (800155c <BNO080_sendPacket+0x94>)
 80014f2:	f7ff fd64 	bl	8000fbe <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 80014f6:	7bbb      	ldrb	r3, [r7, #14]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fecd 	bl	8001298 <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 80014fe:	7bbb      	ldrb	r3, [r7, #14]
 8001500:	121b      	asrs	r3, r3, #8
 8001502:	b2db      	uxtb	r3, r3
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fec7 	bl	8001298 <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fec3 	bl	8001298 <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	4a12      	ldr	r2, [pc, #72]	; (8001560 <BNO080_sendPacket+0x98>)
 8001516:	5cd2      	ldrb	r2, [r2, r3]
 8001518:	1c51      	adds	r1, r2, #1
 800151a:	b2c8      	uxtb	r0, r1
 800151c:	4910      	ldr	r1, [pc, #64]	; (8001560 <BNO080_sendPacket+0x98>)
 800151e:	54c8      	strb	r0, [r1, r3]
 8001520:	4610      	mov	r0, r2
 8001522:	f7ff feb9 	bl	8001298 <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 8001526:	2300      	movs	r3, #0
 8001528:	73fb      	strb	r3, [r7, #15]
 800152a:	e008      	b.n	800153e <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	4a0d      	ldr	r2, [pc, #52]	; (8001564 <BNO080_sendPacket+0x9c>)
 8001530:	5cd3      	ldrb	r3, [r2, r3]
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff feb0 	bl	8001298 <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	3301      	adds	r3, #1
 800153c:	73fb      	strb	r3, [r7, #15]
 800153e:	7bfa      	ldrb	r2, [r7, #15]
 8001540:	79bb      	ldrb	r3, [r7, #6]
 8001542:	429a      	cmp	r2, r3
 8001544:	d3f2      	bcc.n	800152c <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 8001546:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800154a:	4804      	ldr	r0, [pc, #16]	; (800155c <BNO080_sendPacket+0x94>)
 800154c:	f7ff fd29 	bl	8000fa2 <LL_GPIO_SetOutputPin>

	return (1);
 8001550:	2301      	movs	r3, #1
}
 8001552:	4618      	mov	r0, r3
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40020400 	.word	0x40020400
 8001560:	200001f8 	.word	0x200001f8
 8001564:	20000264 	.word	0x20000264

08001568 <LL_SPI_Enable>:
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	601a      	str	r2, [r3, #0]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <LL_SPI_SetStandard>:
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f023 0210 	bic.w	r2, r3, #16
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	431a      	orrs	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	605a      	str	r2, [r3, #4]
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <LL_SPI_IsActiveFlag_RXNE>:
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d101      	bne.n	80015c6 <LL_SPI_IsActiveFlag_RXNE+0x18>
 80015c2:	2301      	movs	r3, #1
 80015c4:	e000      	b.n	80015c8 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <LL_SPI_IsActiveFlag_TXE>:
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d101      	bne.n	80015ec <LL_SPI_IsActiveFlag_TXE+0x18>
 80015e8:	2301      	movs	r3, #1
 80015ea:	e000      	b.n	80015ee <LL_SPI_IsActiveFlag_TXE+0x1a>
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <LL_SPI_ReceiveData8>:
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	b2db      	uxtb	r3, r3
}
 8001608:	4618      	mov	r0, r3
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <LL_SPI_TransmitData8>:
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	460b      	mov	r3, r1
 800161e:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	330c      	adds	r3, #12
 8001624:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	78fa      	ldrb	r2, [r7, #3]
 800162a:	701a      	strb	r2, [r3, #0]
}
 800162c:	bf00      	nop
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <LL_GPIO_IsInputPinSet>:
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	691a      	ldr	r2, [r3, #16]
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	4013      	ands	r3, r2
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	429a      	cmp	r2, r3
 800164e:	bf0c      	ite	eq
 8001650:	2301      	moveq	r3, #1
 8001652:	2300      	movne	r3, #0
 8001654:	b2db      	uxtb	r3, r3
}
 8001656:	4618      	mov	r0, r3
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <LL_GPIO_SetOutputPin>:
{
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
 800166a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	619a      	str	r2, [r3, #24]
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <LL_GPIO_ResetOutputPin>:
{
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	041a      	lsls	r2, r3, #16
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	619a      	str	r2, [r3, #24]
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <LL_AHB1_GRP1_EnableClock>:
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80016a4:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016a8:	4907      	ldr	r1, [pc, #28]	; (80016c8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4013      	ands	r3, r2
 80016b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016ba:	68fb      	ldr	r3, [r7, #12]
}
 80016bc:	bf00      	nop
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	40023800 	.word	0x40023800

080016cc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80016d4:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80016d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016d8:	4907      	ldr	r1, [pc, #28]	; (80016f8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4313      	orrs	r3, r2
 80016de:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80016e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4013      	ands	r3, r2
 80016e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016ea:	68fb      	ldr	r3, [r7, #12]
}
 80016ec:	bf00      	nop
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	40023800 	.word	0x40023800

080016fc <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b090      	sub	sp, #64	; 0x40
 8001700:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001702:	f107 0318 	add.w	r3, r7, #24
 8001706:	2228      	movs	r2, #40	; 0x28
 8001708:	2100      	movs	r1, #0
 800170a:	4618      	mov	r0, r3
 800170c:	f002 ff16 	bl	800453c <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	463b      	mov	r3, r7
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
 800171c:	611a      	str	r2, [r3, #16]
 800171e:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001720:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001724:	f7ff ffd2 	bl	80016cc <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001728:	2001      	movs	r0, #1
 800172a:	f7ff ffb7 	bl	800169c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800172e:	2004      	movs	r0, #4
 8001730:	f7ff ffb4 	bl	800169c <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001734:	23e0      	movs	r3, #224	; 0xe0
 8001736:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001738:	2302      	movs	r3, #2
 800173a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800173c:	2303      	movs	r3, #3
 800173e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001744:	2300      	movs	r3, #0
 8001746:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001748:	2305      	movs	r3, #5
 800174a:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174c:	463b      	mov	r3, r7
 800174e:	4619      	mov	r1, r3
 8001750:	4825      	ldr	r0, [pc, #148]	; (80017e8 <ICM20602_GPIO_SPI_Initialization+0xec>)
 8001752:	f001 ff5e 	bl	8003612 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001756:	2300      	movs	r3, #0
 8001758:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800175a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800175e:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001760:	2300      	movs	r3, #0
 8001762:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001764:	2302      	movs	r3, #2
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001768:	2301      	movs	r3, #1
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800176c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001770:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 8001772:	2310      	movs	r3, #16
 8001774:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001776:	2300      	movs	r3, #0
 8001778:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800177a:	2300      	movs	r3, #0
 800177c:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 800177e:	230a      	movs	r3, #10
 8001780:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 8001782:	f107 0318 	add.w	r3, r7, #24
 8001786:	4619      	mov	r1, r3
 8001788:	4818      	ldr	r0, [pc, #96]	; (80017ec <ICM20602_GPIO_SPI_Initialization+0xf0>)
 800178a:	f002 f910 	bl	80039ae <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 800178e:	2100      	movs	r1, #0
 8001790:	4816      	ldr	r0, [pc, #88]	; (80017ec <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001792:	f7ff fef9 	bl	8001588 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 8001796:	2110      	movs	r1, #16
 8001798:	4815      	ldr	r0, [pc, #84]	; (80017f0 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 800179a:	f7ff ff70 	bl	800167e <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 800179e:	2310      	movs	r3, #16
 80017a0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80017a2:	2301      	movs	r3, #1
 80017a4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80017a6:	2303      	movs	r3, #3
 80017a8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 80017b2:	463b      	mov	r3, r7
 80017b4:	4619      	mov	r1, r3
 80017b6:	480e      	ldr	r0, [pc, #56]	; (80017f0 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80017b8:	f001 ff2b 	bl	8003612 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 80017bc:	2320      	movs	r3, #32
 80017be:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80017c0:	2300      	movs	r3, #0
 80017c2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80017c4:	2301      	movs	r3, #1
 80017c6:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 80017c8:	463b      	mov	r3, r7
 80017ca:	4619      	mov	r1, r3
 80017cc:	4808      	ldr	r0, [pc, #32]	; (80017f0 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80017ce:	f001 ff20 	bl	8003612 <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 80017d2:	4806      	ldr	r0, [pc, #24]	; (80017ec <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80017d4:	f7ff fec8 	bl	8001568 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 80017d8:	2110      	movs	r1, #16
 80017da:	4805      	ldr	r0, [pc, #20]	; (80017f0 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80017dc:	f7ff ff41 	bl	8001662 <LL_GPIO_SetOutputPin>
}
 80017e0:	bf00      	nop
 80017e2:	3740      	adds	r7, #64	; 0x40
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40020000 	.word	0x40020000
 80017ec:	40013000 	.word	0x40013000
 80017f0:	40020800 	.word	0x40020800

080017f4 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 80017fe:	bf00      	nop
 8001800:	480c      	ldr	r0, [pc, #48]	; (8001834 <SPI1_SendByte+0x40>)
 8001802:	f7ff fee7 	bl	80015d4 <LL_SPI_IsActiveFlag_TXE>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0f9      	beq.n	8001800 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	4619      	mov	r1, r3
 8001810:	4808      	ldr	r0, [pc, #32]	; (8001834 <SPI1_SendByte+0x40>)
 8001812:	f7ff feff 	bl	8001614 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 8001816:	bf00      	nop
 8001818:	4806      	ldr	r0, [pc, #24]	; (8001834 <SPI1_SendByte+0x40>)
 800181a:	f7ff fec8 	bl	80015ae <LL_SPI_IsActiveFlag_RXNE>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d0f9      	beq.n	8001818 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 8001824:	4803      	ldr	r0, [pc, #12]	; (8001834 <SPI1_SendByte+0x40>)
 8001826:	f7ff fee8 	bl	80015fa <LL_SPI_ReceiveData8>
 800182a:	4603      	mov	r3, r0
}
 800182c:	4618      	mov	r0, r3
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40013000 	.word	0x40013000

08001838 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 8001842:	2110      	movs	r1, #16
 8001844:	480b      	ldr	r0, [pc, #44]	; (8001874 <ICM20602_Readbyte+0x3c>)
 8001846:	f7ff ff1a 	bl	800167e <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001850:	b2db      	uxtb	r3, r3
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff ffce 	bl	80017f4 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8001858:	2000      	movs	r0, #0
 800185a:	f7ff ffcb 	bl	80017f4 <SPI1_SendByte>
 800185e:	4603      	mov	r3, r0
 8001860:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 8001862:	2110      	movs	r1, #16
 8001864:	4803      	ldr	r0, [pc, #12]	; (8001874 <ICM20602_Readbyte+0x3c>)
 8001866:	f7ff fefc 	bl	8001662 <LL_GPIO_SetOutputPin>
	
	return val;
 800186a:	7bfb      	ldrb	r3, [r7, #15]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3710      	adds	r7, #16
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40020800 	.word	0x40020800

08001878 <ICM20602_Readbytes>:

void ICM20602_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8001878:	b590      	push	{r4, r7, lr}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	603a      	str	r2, [r7, #0]
 8001882:	71fb      	strb	r3, [r7, #7]
 8001884:	460b      	mov	r3, r1
 8001886:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM20602);
 800188c:	2110      	movs	r1, #16
 800188e:	4810      	ldr	r0, [pc, #64]	; (80018d0 <ICM20602_Readbytes+0x58>)
 8001890:	f7ff fef5 	bl	800167e <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800189a:	b2db      	uxtb	r3, r3
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ffa9 	bl	80017f4 <SPI1_SendByte>
	while(i < len)
 80018a2:	e009      	b.n	80018b8 <ICM20602_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	1c5a      	adds	r2, r3, #1
 80018a8:	60fa      	str	r2, [r7, #12]
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	18d4      	adds	r4, r2, r3
 80018ae:	2000      	movs	r0, #0
 80018b0:	f7ff ffa0 	bl	80017f4 <SPI1_SendByte>
 80018b4:	4603      	mov	r3, r0
 80018b6:	7023      	strb	r3, [r4, #0]
	while(i < len)
 80018b8:	79bb      	ldrb	r3, [r7, #6]
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d3f1      	bcc.n	80018a4 <ICM20602_Readbytes+0x2c>
	}
	CHIP_DESELECT(ICM20602);
 80018c0:	2110      	movs	r1, #16
 80018c2:	4803      	ldr	r0, [pc, #12]	; (80018d0 <ICM20602_Readbytes+0x58>)
 80018c4:	f7ff fecd 	bl	8001662 <LL_GPIO_SetOutputPin>
}
 80018c8:	bf00      	nop
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd90      	pop	{r4, r7, pc}
 80018d0:	40020800 	.word	0x40020800

080018d4 <ICM20602_Writebyte>:

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	460a      	mov	r2, r1
 80018de:	71fb      	strb	r3, [r7, #7]
 80018e0:	4613      	mov	r3, r2
 80018e2:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 80018e4:	2110      	movs	r1, #16
 80018e6:	480b      	ldr	r0, [pc, #44]	; (8001914 <ICM20602_Writebyte+0x40>)
 80018e8:	f7ff fec9 	bl	800167e <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff ff7d 	bl	80017f4 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 80018fa:	79bb      	ldrb	r3, [r7, #6]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff ff79 	bl	80017f4 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 8001902:	2110      	movs	r1, #16
 8001904:	4803      	ldr	r0, [pc, #12]	; (8001914 <ICM20602_Writebyte+0x40>)
 8001906:	f7ff feac 	bl	8001662 <LL_GPIO_SetOutputPin>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40020800 	.word	0x40020800

08001918 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 8001922:	f107 0308 	add.w	r3, r7, #8
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 800192c:	463b      	mov	r3, r7
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 8001934:	f7ff fee2 	bl	80016fc <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 8001938:	4833      	ldr	r0, [pc, #204]	; (8001a08 <ICM20602_Initialization+0xf0>)
 800193a:	f003 fa63 	bl	8004e04 <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 800193e:	2075      	movs	r0, #117	; 0x75
 8001940:	f7ff ff7a 	bl	8001838 <ICM20602_Readbyte>
 8001944:	4603      	mov	r3, r0
 8001946:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	2b12      	cmp	r3, #18
 800194c:	d105      	bne.n	800195a <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	4619      	mov	r1, r3
 8001952:	482e      	ldr	r0, [pc, #184]	; (8001a0c <ICM20602_Initialization+0xf4>)
 8001954:	f003 fa56 	bl	8004e04 <iprintf>
 8001958:	e012      	b.n	8001980 <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 800195a:	7bfb      	ldrb	r3, [r7, #15]
 800195c:	2b12      	cmp	r3, #18
 800195e:	d00f      	beq.n	8001980 <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8001960:	2075      	movs	r0, #117	; 0x75
 8001962:	f7ff ff69 	bl	8001838 <ICM20602_Readbyte>
 8001966:	4603      	mov	r3, r0
 8001968:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 800196a:	7bfb      	ldrb	r3, [r7, #15]
 800196c:	2b12      	cmp	r3, #18
 800196e:	d007      	beq.n	8001980 <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 8001970:	7bfb      	ldrb	r3, [r7, #15]
 8001972:	2212      	movs	r2, #18
 8001974:	4619      	mov	r1, r3
 8001976:	4826      	ldr	r0, [pc, #152]	; (8001a10 <ICM20602_Initialization+0xf8>)
 8001978:	f003 fa44 	bl	8004e04 <iprintf>
			return 1; //ERROR
 800197c:	2301      	movs	r3, #1
 800197e:	e03f      	b.n	8001a00 <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 8001980:	2180      	movs	r1, #128	; 0x80
 8001982:	206b      	movs	r0, #107	; 0x6b
 8001984:	f7ff ffa6 	bl	80018d4 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001988:	2032      	movs	r0, #50	; 0x32
 800198a:	f001 f807 	bl	800299c <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 800198e:	2101      	movs	r1, #1
 8001990:	206b      	movs	r0, #107	; 0x6b
 8001992:	f7ff ff9f 	bl	80018d4 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 8001996:	2032      	movs	r0, #50	; 0x32
 8001998:	f001 f800 	bl	800299c <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 800199c:	2138      	movs	r1, #56	; 0x38
 800199e:	206c      	movs	r0, #108	; 0x6c
 80019a0:	f7ff ff98 	bl	80018d4 <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 80019a4:	2032      	movs	r0, #50	; 0x32
 80019a6:	f000 fff9 	bl	800299c <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 80019aa:	2100      	movs	r1, #0
 80019ac:	2019      	movs	r0, #25
 80019ae:	f7ff ff91 	bl	80018d4 <ICM20602_Writebyte>
	HAL_Delay(50);
 80019b2:	2032      	movs	r0, #50	; 0x32
 80019b4:	f000 fff2 	bl	800299c <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 80019b8:	2105      	movs	r1, #5
 80019ba:	201a      	movs	r0, #26
 80019bc:	f7ff ff8a 	bl	80018d4 <ICM20602_Writebyte>
	HAL_Delay(50);
 80019c0:	2032      	movs	r0, #50	; 0x32
 80019c2:	f000 ffeb 	bl	800299c <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 80019c6:	2118      	movs	r1, #24
 80019c8:	201b      	movs	r0, #27
 80019ca:	f7ff ff83 	bl	80018d4 <ICM20602_Writebyte>
	HAL_Delay(50);
 80019ce:	2032      	movs	r0, #50	; 0x32
 80019d0:	f000 ffe4 	bl	800299c <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 80019d4:	2118      	movs	r1, #24
 80019d6:	201c      	movs	r0, #28
 80019d8:	f7ff ff7c 	bl	80018d4 <ICM20602_Writebyte>
	HAL_Delay(50);
 80019dc:	2032      	movs	r0, #50	; 0x32
 80019de:	f000 ffdd 	bl	800299c <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 80019e2:	2103      	movs	r1, #3
 80019e4:	201d      	movs	r0, #29
 80019e6:	f7ff ff75 	bl	80018d4 <ICM20602_Writebyte>
	HAL_Delay(50);
 80019ea:	2032      	movs	r0, #50	; 0x32
 80019ec:	f000 ffd6 	bl	800299c <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 80019f0:	2101      	movs	r1, #1
 80019f2:	2038      	movs	r0, #56	; 0x38
 80019f4:	f7ff ff6e 	bl	80018d4 <ICM20602_Writebyte>
	HAL_Delay(50);
 80019f8:	2032      	movs	r0, #50	; 0x32
 80019fa:	f000 ffcf 	bl	800299c <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	08006d2c 	.word	0x08006d2c
 8001a0c:	08006d44 	.word	0x08006d44
 8001a10:	08006d68 	.word	0x08006d68

08001a14 <ICM20602_Get3AxisGyroRawData>:
	gyro[1] = ((data[10] << 8) | data[11]);
	gyro[2] = ((data[12] << 8) | data[13]);
}

void ICM20602_Get3AxisGyroRawData(short* gyro)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
	unsigned char data[6];
	ICM20602_Readbytes(GYRO_XOUT_H, 6, data);
 8001a1c:	f107 0308 	add.w	r3, r7, #8
 8001a20:	461a      	mov	r2, r3
 8001a22:	2106      	movs	r1, #6
 8001a24:	2043      	movs	r0, #67	; 0x43
 8001a26:	f7ff ff27 	bl	8001878 <ICM20602_Readbytes>
	
	gyro[0] = ((data[0] << 8) | data[1]);
 8001a2a:	7a3b      	ldrb	r3, [r7, #8]
 8001a2c:	021b      	lsls	r3, r3, #8
 8001a2e:	b21a      	sxth	r2, r3
 8001a30:	7a7b      	ldrb	r3, [r7, #9]
 8001a32:	b21b      	sxth	r3, r3
 8001a34:	4313      	orrs	r3, r2
 8001a36:	b21a      	sxth	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	801a      	strh	r2, [r3, #0]
	gyro[1] = ((data[2] << 8) | data[3]);
 8001a3c:	7abb      	ldrb	r3, [r7, #10]
 8001a3e:	021b      	lsls	r3, r3, #8
 8001a40:	b219      	sxth	r1, r3
 8001a42:	7afb      	ldrb	r3, [r7, #11]
 8001a44:	b21a      	sxth	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3302      	adds	r3, #2
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	b212      	sxth	r2, r2
 8001a4e:	801a      	strh	r2, [r3, #0]
	gyro[2] = ((data[4] << 8) | data[5]);
 8001a50:	7b3b      	ldrb	r3, [r7, #12]
 8001a52:	021b      	lsls	r3, r3, #8
 8001a54:	b219      	sxth	r1, r3
 8001a56:	7b7b      	ldrb	r3, [r7, #13]
 8001a58:	b21a      	sxth	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	b212      	sxth	r2, r2
 8001a62:	801a      	strh	r2, [r3, #0]
}
 8001a64:	bf00      	nop
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <ICM20602_DataReady>:
	accel[1] = ((data[2] << 8) | data[3]);
	accel[2] = ((data[4] << 8) | data[5]);
}

int ICM20602_DataReady(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(ICM20602_INT_PORT, ICM20602_INT_PIN);
 8001a70:	2120      	movs	r1, #32
 8001a72:	4803      	ldr	r0, [pc, #12]	; (8001a80 <ICM20602_DataReady+0x14>)
 8001a74:	f7ff fde0 	bl	8001638 <LL_GPIO_IsInputPinSet>
 8001a78:	4603      	mov	r3, r0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40020800 	.word	0x40020800

08001a84 <LL_GPIO_ResetOutputPin>:
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	041a      	lsls	r2, r3, #16
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	619a      	str	r2, [r3, #24]
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
	...

08001aa4 <LL_AHB1_GRP1_EnableClock>:
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001aac:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001aae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ab0:	4907      	ldr	r1, [pc, #28]	; (8001ad0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001ab8:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001aba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
}
 8001ac4:	bf00      	nop
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	40023800 	.word	0x40023800

08001ad4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ada:	463b      	mov	r3, r7
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
 8001ae8:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8001aea:	2080      	movs	r0, #128	; 0x80
 8001aec:	f7ff ffda 	bl	8001aa4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001af0:	2004      	movs	r0, #4
 8001af2:	f7ff ffd7 	bl	8001aa4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001af6:	2001      	movs	r0, #1
 8001af8:	f7ff ffd4 	bl	8001aa4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001afc:	2002      	movs	r0, #2
 8001afe:	f7ff ffd1 	bl	8001aa4 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4 
 8001b02:	f240 2117 	movw	r1, #535	; 0x217
 8001b06:	4826      	ldr	r0, [pc, #152]	; (8001ba0 <MX_GPIO_Init+0xcc>)
 8001b08:	f7ff ffbc 	bl	8001a84 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12);
 8001b0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b10:	4824      	ldr	r0, [pc, #144]	; (8001ba4 <MX_GPIO_Init+0xd0>)
 8001b12:	f7ff ffb7 	bl	8001a84 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8001b16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b1a:	4823      	ldr	r0, [pc, #140]	; (8001ba8 <MX_GPIO_Init+0xd4>)
 8001b1c:	f7ff ffb2 	bl	8001a84 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4 
 8001b20:	f240 2317 	movw	r3, #535	; 0x217
 8001b24:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b26:	2301      	movs	r3, #1
 8001b28:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b32:	2300      	movs	r3, #0
 8001b34:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b36:	463b      	mov	r3, r7
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4819      	ldr	r0, [pc, #100]	; (8001ba0 <MX_GPIO_Init+0xcc>)
 8001b3c:	f001 fd69 	bl	8003612 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_8;
 8001b40:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001b44:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001b46:	2300      	movs	r3, #0
 8001b48:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b4e:	463b      	mov	r3, r7
 8001b50:	4619      	mov	r1, r3
 8001b52:	4813      	ldr	r0, [pc, #76]	; (8001ba0 <MX_GPIO_Init+0xcc>)
 8001b54:	f001 fd5d 	bl	8003612 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8001b58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b5c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001b62:	2300      	movs	r3, #0
 8001b64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b6e:	463b      	mov	r3, r7
 8001b70:	4619      	mov	r1, r3
 8001b72:	480c      	ldr	r0, [pc, #48]	; (8001ba4 <MX_GPIO_Init+0xd0>)
 8001b74:	f001 fd4d 	bl	8003612 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8001b78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b7c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001b82:	2300      	movs	r3, #0
 8001b84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8e:	463b      	mov	r3, r7
 8001b90:	4619      	mov	r1, r3
 8001b92:	4805      	ldr	r0, [pc, #20]	; (8001ba8 <MX_GPIO_Init+0xd4>)
 8001b94:	f001 fd3d 	bl	8003612 <LL_GPIO_Init>

}
 8001b98:	bf00      	nop
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40020800 	.word	0x40020800
 8001ba4:	40020400 	.word	0x40020400
 8001ba8:	40020000 	.word	0x40020000

08001bac <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f043 0201 	orr.w	r2, r3, #1
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	601a      	str	r2, [r3, #0]
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a1a      	ldr	r2, [r3, #32]
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	621a      	str	r2, [r3, #32]
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
 8001bf6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a1a      	ldr	r2, [r3, #32]
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	401a      	ands	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	621a      	str	r2, [r3, #32]
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	f043 0220 	orr.w	r2, r3, #32
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	60da      	str	r2, [r3, #12]
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001c32:	b480      	push	{r7}
 8001c34:	b083      	sub	sp, #12
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001c3e:	78fa      	ldrb	r2, [r7, #3]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	605a      	str	r2, [r3, #4]
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char* p, int len)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
	for(int i=0;i<len;i++)
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	e00d      	b.n	8001c7e <_write+0x2e>
	{
		LL_USART_TransmitData8(USART6,*(p+i));
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	68ba      	ldr	r2, [r7, #8]
 8001c66:	4413      	add	r3, r2
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4808      	ldr	r0, [pc, #32]	; (8001c90 <_write+0x40>)
 8001c6e:	f7ff ffe0 	bl	8001c32 <LL_USART_TransmitData8>
		HAL_Delay(1);
 8001c72:	2001      	movs	r0, #1
 8001c74:	f000 fe92 	bl	800299c <HAL_Delay>
	for(int i=0;i<len;i++)
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	dbed      	blt.n	8001c62 <_write+0x12>
	}
	return len;
 8001c86:	687b      	ldr	r3, [r7, #4]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40011400 	.word	0x40011400

08001c94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int count = 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]
	float f = 1.234;
 8001c9e:	4b3f      	ldr	r3, [pc, #252]	; (8001d9c <main+0x108>)
 8001ca0:	613b      	str	r3, [r7, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ca2:	f000 fe09 	bl	80028b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ca6:	f000 f887 	bl	8001db8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001caa:	f7ff ff13 	bl	8001ad4 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001cae:	f000 fc27 	bl	8002500 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8001cb2:	f000 fd77 	bl	80027a4 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 8001cb6:	f000 f99d 	bl	8001ff4 <MX_SPI2_Init>
  MX_SPI1_Init();
 8001cba:	f000 f949 	bl	8001f50 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM3);
 8001cbe:	4838      	ldr	r0, [pc, #224]	; (8001da0 <main+0x10c>)
 8001cc0:	f7ff ff74 	bl	8001bac <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8001cc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cc8:	4835      	ldr	r0, [pc, #212]	; (8001da0 <main+0x10c>)
 8001cca:	f7ff ff7f 	bl	8001bcc <LL_TIM_CC_EnableChannel>

  TIM3->PSC = 2000; // 2kHz
 8001cce:	4b34      	ldr	r3, [pc, #208]	; (8001da0 <main+0x10c>)
 8001cd0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001cd4:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 8001cd6:	2064      	movs	r0, #100	; 0x64
 8001cd8:	f000 fe60 	bl	800299c <HAL_Delay>
  TIM3->PSC=1500;  // 3kHz
 8001cdc:	4b30      	ldr	r3, [pc, #192]	; (8001da0 <main+0x10c>)
 8001cde:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001ce2:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 8001ce4:	2064      	movs	r0, #100	; 0x64
 8001ce6:	f000 fe59 	bl	800299c <HAL_Delay>
  TIM3->PSC=1000; // 4kHz
 8001cea:	4b2d      	ldr	r3, [pc, #180]	; (8001da0 <main+0x10c>)
 8001cec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cf0:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 8001cf2:	2064      	movs	r0, #100	; 0x64
 8001cf4:	f000 fe52 	bl	800299c <HAL_Delay>

  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8001cf8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cfc:	4828      	ldr	r0, [pc, #160]	; (8001da0 <main+0x10c>)
 8001cfe:	f7ff ff76 	bl	8001bee <LL_TIM_CC_DisableChannel>

  LL_USART_EnableIT_RXNE(USART6);
 8001d02:	4828      	ldr	r0, [pc, #160]	; (8001da4 <main+0x110>)
 8001d04:	f7ff ff85 	bl	8001c12 <LL_USART_EnableIT_RXNE>

  BNO080_Initialization();
 8001d08:	f7ff fa52 	bl	80011b0 <BNO080_Initialization>
  BNO080_enableGameRotationVector(2500); // 400 times per sec
 8001d0c:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8001d10:	f7ff fae4 	bl	80012dc <BNO080_enableGameRotationVector>

  ICM20602_Initialization();
 8001d14:	f7ff fe00 	bl	8001918 <ICM20602_Initialization>
//		  Quaternion_Update(&q[0]);
//
//		  printf("%d,%d,%d\n",(int)(BNO080_Roll*100),(int)(BNO080_Pitch*100),(int)(BNO080_Yaw*100));
//	  }

	  if(ICM20602_DataReady() == 1)
 8001d18:	f7ff fea8 	bl	8001a6c <ICM20602_DataReady>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d1fa      	bne.n	8001d18 <main+0x84>
	  {
		  ICM20602_Get3AxisGyroRawData(&ICM20602.gyro_x_raw);
 8001d22:	4821      	ldr	r0, [pc, #132]	; (8001da8 <main+0x114>)
 8001d24:	f7ff fe76 	bl	8001a14 <ICM20602_Get3AxisGyroRawData>

		  ICM20602.gyro_x = ICM20602.gyro_x_raw = 2000.f / 32768.f;
 8001d28:	4b20      	ldr	r3, [pc, #128]	; (8001dac <main+0x118>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	811a      	strh	r2, [r3, #8]
 8001d2e:	4b1f      	ldr	r3, [pc, #124]	; (8001dac <main+0x118>)
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	61da      	str	r2, [r3, #28]
		  ICM20602.gyro_y = ICM20602.gyro_y_raw = 2000.f / 32768.f;
 8001d36:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <main+0x118>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	815a      	strh	r2, [r3, #10]
 8001d3c:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <main+0x118>)
 8001d3e:	f04f 0200 	mov.w	r2, #0
 8001d42:	621a      	str	r2, [r3, #32]
		  ICM20602.gyro_z = ICM20602.gyro_z_raw = 2000.f / 32768.f;
 8001d44:	4b19      	ldr	r3, [pc, #100]	; (8001dac <main+0x118>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	819a      	strh	r2, [r3, #12]
 8001d4a:	4b18      	ldr	r3, [pc, #96]	; (8001dac <main+0x118>)
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	625a      	str	r2, [r3, #36]	; 0x24

		  //printf("%d, %d, %d\n", ICM20602.gyro_x_raw, ICM20602.gyro_y_raw, ICM20602.gyro_z_raw);
		  printf("%d, %d, %d\n", (int)(ICM20602.gyro_x*100), (int)(ICM20602.gyro_y*100), (int)(ICM20602.gyro_z*100));
 8001d52:	4b16      	ldr	r3, [pc, #88]	; (8001dac <main+0x118>)
 8001d54:	edd3 7a07 	vldr	s15, [r3, #28]
 8001d58:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001db0 <main+0x11c>
 8001d5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d60:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8001d64:	4b11      	ldr	r3, [pc, #68]	; (8001dac <main+0x118>)
 8001d66:	edd3 7a08 	vldr	s15, [r3, #32]
 8001d6a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001db0 <main+0x11c>
 8001d6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d72:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 8001d76:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <main+0x118>)
 8001d78:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001d7c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001db0 <main+0x11c>
 8001d80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d88:	ee17 3a90 	vmov	r3, s15
 8001d8c:	ee16 2a10 	vmov	r2, s12
 8001d90:	ee16 1a90 	vmov	r1, s13
 8001d94:	4807      	ldr	r0, [pc, #28]	; (8001db4 <main+0x120>)
 8001d96:	f003 f835 	bl	8004e04 <iprintf>
	  if(ICM20602_DataReady() == 1)
 8001d9a:	e7bd      	b.n	8001d18 <main+0x84>
 8001d9c:	3f9df3b6 	.word	0x3f9df3b6
 8001da0:	40000400 	.word	0x40000400
 8001da4:	40011400 	.word	0x40011400
 8001da8:	20000308 	.word	0x20000308
 8001dac:	20000300 	.word	0x20000300
 8001db0:	42c80000 	.word	0x42c80000
 8001db4:	08006d94 	.word	0x08006d94

08001db8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b094      	sub	sp, #80	; 0x50
 8001dbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dbe:	f107 0320 	add.w	r3, r7, #32
 8001dc2:	2230      	movs	r2, #48	; 0x30
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f002 fbb8 	bl	800453c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dcc:	f107 030c 	add.w	r3, r7, #12
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	4b28      	ldr	r3, [pc, #160]	; (8001e84 <SystemClock_Config+0xcc>)
 8001de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de4:	4a27      	ldr	r2, [pc, #156]	; (8001e84 <SystemClock_Config+0xcc>)
 8001de6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dea:	6413      	str	r3, [r2, #64]	; 0x40
 8001dec:	4b25      	ldr	r3, [pc, #148]	; (8001e84 <SystemClock_Config+0xcc>)
 8001dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001df8:	2300      	movs	r3, #0
 8001dfa:	607b      	str	r3, [r7, #4]
 8001dfc:	4b22      	ldr	r3, [pc, #136]	; (8001e88 <SystemClock_Config+0xd0>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a21      	ldr	r2, [pc, #132]	; (8001e88 <SystemClock_Config+0xd0>)
 8001e02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e06:	6013      	str	r3, [r2, #0]
 8001e08:	4b1f      	ldr	r3, [pc, #124]	; (8001e88 <SystemClock_Config+0xd0>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e10:	607b      	str	r3, [r7, #4]
 8001e12:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e14:	2301      	movs	r3, #1
 8001e16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001e28:	2304      	movs	r3, #4
 8001e2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001e2c:	23a8      	movs	r3, #168	; 0xa8
 8001e2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e30:	2302      	movs	r3, #2
 8001e32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e34:	2304      	movs	r3, #4
 8001e36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e38:	f107 0320 	add.w	r3, r7, #32
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f000 feb5 	bl	8002bac <HAL_RCC_OscConfig>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e48:	f000 f820 	bl	8001e8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e4c:	230f      	movs	r3, #15
 8001e4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e50:	2302      	movs	r3, #2
 8001e52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e58:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e62:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e64:	f107 030c 	add.w	r3, r7, #12
 8001e68:	2105      	movs	r1, #5
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f001 f90e 	bl	800308c <HAL_RCC_ClockConfig>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001e76:	f000 f809 	bl	8001e8c <Error_Handler>
  }
}
 8001e7a:	bf00      	nop
 8001e7c:	3750      	adds	r7, #80	; 0x50
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40007000 	.word	0x40007000

08001e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <LL_SPI_SetStandard>:
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f023 0210 	bic.w	r2, r3, #16
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	605a      	str	r2, [r3, #4]
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <LL_AHB1_GRP1_EnableClock>:
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001eca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ecc:	4907      	ldr	r1, [pc, #28]	; (8001eec <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001ed4:	4b05      	ldr	r3, [pc, #20]	; (8001eec <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ed6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4013      	ands	r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ede:	68fb      	ldr	r3, [r7, #12]
}
 8001ee0:	bf00      	nop
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	40023800 	.word	0x40023800

08001ef0 <LL_APB1_GRP1_EnableClock>:
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001ef8:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001efa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001efc:	4907      	ldr	r1, [pc, #28]	; (8001f1c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001f04:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
}
 8001f10:	bf00      	nop
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	40023800 	.word	0x40023800

08001f20 <LL_APB2_GRP1_EnableClock>:
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001f28:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f2c:	4907      	ldr	r1, [pc, #28]	; (8001f4c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001f34:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
}
 8001f40:	bf00      	nop
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	40023800 	.word	0x40023800

08001f50 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b090      	sub	sp, #64	; 0x40
 8001f54:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001f56:	f107 0318 	add.w	r3, r7, #24
 8001f5a:	2228      	movs	r2, #40	; 0x28
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f002 faec 	bl	800453c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f64:	463b      	mov	r3, r7
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	605a      	str	r2, [r3, #4]
 8001f6c:	609a      	str	r2, [r3, #8]
 8001f6e:	60da      	str	r2, [r3, #12]
 8001f70:	611a      	str	r2, [r3, #16]
 8001f72:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001f74:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001f78:	f7ff ffd2 	bl	8001f20 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	f7ff ff9f 	bl	8001ec0 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration  
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001f82:	23e0      	movs	r3, #224	; 0xe0
 8001f84:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001f86:	2302      	movs	r3, #2
 8001f88:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f92:	2300      	movs	r3, #0
 8001f94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001f96:	2305      	movs	r3, #5
 8001f98:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9a:	463b      	mov	r3, r7
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4813      	ldr	r0, [pc, #76]	; (8001fec <MX_SPI1_Init+0x9c>)
 8001fa0:	f001 fb37 	bl	8003612 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001fa8:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001fac:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001fba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8001fc0:	2310      	movs	r3, #16
 8001fc2:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001fcc:	230a      	movs	r3, #10
 8001fce:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8001fd0:	f107 0318 	add.w	r3, r7, #24
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4806      	ldr	r0, [pc, #24]	; (8001ff0 <MX_SPI1_Init+0xa0>)
 8001fd8:	f001 fce9 	bl	80039ae <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4804      	ldr	r0, [pc, #16]	; (8001ff0 <MX_SPI1_Init+0xa0>)
 8001fe0:	f7ff ff5b 	bl	8001e9a <LL_SPI_SetStandard>

}
 8001fe4:	bf00      	nop
 8001fe6:	3740      	adds	r7, #64	; 0x40
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40020000 	.word	0x40020000
 8001ff0:	40013000 	.word	0x40013000

08001ff4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b090      	sub	sp, #64	; 0x40
 8001ff8:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001ffa:	f107 0318 	add.w	r3, r7, #24
 8001ffe:	2228      	movs	r2, #40	; 0x28
 8002000:	2100      	movs	r1, #0
 8002002:	4618      	mov	r0, r3
 8002004:	f002 fa9a 	bl	800453c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002008:	463b      	mov	r3, r7
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	605a      	str	r2, [r3, #4]
 8002010:	609a      	str	r2, [r3, #8]
 8002012:	60da      	str	r2, [r3, #12]
 8002014:	611a      	str	r2, [r3, #16]
 8002016:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8002018:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800201c:	f7ff ff68 	bl	8001ef0 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002020:	2002      	movs	r0, #2
 8002022:	f7ff ff4d 	bl	8001ec0 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration  
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8002026:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800202a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800202c:	2302      	movs	r3, #2
 800202e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002030:	2303      	movs	r3, #3
 8002032:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002038:	2300      	movs	r3, #0
 800203a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800203c:	2305      	movs	r3, #5
 800203e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002040:	463b      	mov	r3, r7
 8002042:	4619      	mov	r1, r3
 8002044:	4813      	ldr	r0, [pc, #76]	; (8002094 <MX_SPI2_Init+0xa0>)
 8002046:	f001 fae4 	bl	8003612 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800204a:	2300      	movs	r3, #0
 800204c:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800204e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002052:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002054:	2300      	movs	r3, #0
 8002056:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002058:	2302      	movs	r3, #2
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800205c:	2301      	movs	r3, #1
 800205e:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002060:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002064:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8002066:	2318      	movs	r3, #24
 8002068:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800206a:	2300      	movs	r3, #0
 800206c:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800206e:	2300      	movs	r3, #0
 8002070:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8002072:	230a      	movs	r3, #10
 8002074:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8002076:	f107 0318 	add.w	r3, r7, #24
 800207a:	4619      	mov	r1, r3
 800207c:	4806      	ldr	r0, [pc, #24]	; (8002098 <MX_SPI2_Init+0xa4>)
 800207e:	f001 fc96 	bl	80039ae <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8002082:	2100      	movs	r1, #0
 8002084:	4804      	ldr	r0, [pc, #16]	; (8002098 <MX_SPI2_Init+0xa4>)
 8002086:	f7ff ff08 	bl	8001e9a <LL_SPI_SetStandard>

}
 800208a:	bf00      	nop
 800208c:	3740      	adds	r7, #64	; 0x40
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40020400 	.word	0x40020400
 8002098:	40003800 	.word	0x40003800

0800209c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	607b      	str	r3, [r7, #4]
 80020a6:	4b10      	ldr	r3, [pc, #64]	; (80020e8 <HAL_MspInit+0x4c>)
 80020a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020aa:	4a0f      	ldr	r2, [pc, #60]	; (80020e8 <HAL_MspInit+0x4c>)
 80020ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020b0:	6453      	str	r3, [r2, #68]	; 0x44
 80020b2:	4b0d      	ldr	r3, [pc, #52]	; (80020e8 <HAL_MspInit+0x4c>)
 80020b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ba:	607b      	str	r3, [r7, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	603b      	str	r3, [r7, #0]
 80020c2:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <HAL_MspInit+0x4c>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	4a08      	ldr	r2, [pc, #32]	; (80020e8 <HAL_MspInit+0x4c>)
 80020c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020cc:	6413      	str	r3, [r2, #64]	; 0x40
 80020ce:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_MspInit+0x4c>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d6:	603b      	str	r3, [r7, #0]
 80020d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	40023800 	.word	0x40023800

080020ec <LL_USART_IsActiveFlag_RXNE>:
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0320 	and.w	r3, r3, #32
 80020fc:	2b20      	cmp	r3, #32
 80020fe:	bf0c      	ite	eq
 8002100:	2301      	moveq	r3, #1
 8002102:	2300      	movne	r3, #0
 8002104:	b2db      	uxtb	r3, r3
}
 8002106:	4618      	mov	r0, r3
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <LL_USART_ClearFlag_RXNE>:
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f06f 0220 	mvn.w	r2, #32
 8002120:	601a      	str	r2, [r3, #0]
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <LL_USART_ReceiveData8>:
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	b2db      	uxtb	r3, r3
}
 800213c:	4618      	mov	r0, r3
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002156:	b480      	push	{r7}
 8002158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800215a:	e7fe      	b.n	800215a <HardFault_Handler+0x4>

0800215c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002160:	e7fe      	b.n	8002160 <MemManage_Handler+0x4>

08002162 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002162:	b480      	push	{r7}
 8002164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002166:	e7fe      	b.n	8002166 <BusFault_Handler+0x4>

08002168 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800216c:	e7fe      	b.n	800216c <UsageFault_Handler+0x4>

0800216e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800216e:	b480      	push	{r7}
 8002170:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800218a:	b480      	push	{r7}
 800218c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800219c:	f000 fbde 	bl	800295c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021a0:	bf00      	nop
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART6))
 80021a8:	480a      	ldr	r0, [pc, #40]	; (80021d4 <USART6_IRQHandler+0x30>)
 80021aa:	f7ff ff9f 	bl	80020ec <LL_USART_IsActiveFlag_RXNE>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00c      	beq.n	80021ce <USART6_IRQHandler+0x2a>
	{
		LL_USART_ClearFlag_RXNE(USART6); // For HAL, it doens't needs to be clear like this
 80021b4:	4807      	ldr	r0, [pc, #28]	; (80021d4 <USART6_IRQHandler+0x30>)
 80021b6:	f7ff ffac 	bl	8002112 <LL_USART_ClearFlag_RXNE>
		uart6_rx_data = LL_USART_ReceiveData8(USART6);
 80021ba:	4806      	ldr	r0, [pc, #24]	; (80021d4 <USART6_IRQHandler+0x30>)
 80021bc:	f7ff ffb7 	bl	800212e <LL_USART_ReceiveData8>
 80021c0:	4603      	mov	r3, r0
 80021c2:	461a      	mov	r2, r3
 80021c4:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <USART6_IRQHandler+0x34>)
 80021c6:	701a      	strb	r2, [r3, #0]
		uart6_rx_flag = 1;
 80021c8:	4b04      	ldr	r3, [pc, #16]	; (80021dc <USART6_IRQHandler+0x38>)
 80021ca:	2201      	movs	r2, #1
 80021cc:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40011400 	.word	0x40011400
 80021d8:	200001ff 	.word	0x200001ff
 80021dc:	200001fe 	.word	0x200001fe

080021e0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]
 80021f0:	e00a      	b.n	8002208 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021f2:	f3af 8000 	nop.w
 80021f6:	4601      	mov	r1, r0
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	1c5a      	adds	r2, r3, #1
 80021fc:	60ba      	str	r2, [r7, #8]
 80021fe:	b2ca      	uxtb	r2, r1
 8002200:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	3301      	adds	r3, #1
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	697a      	ldr	r2, [r7, #20]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	429a      	cmp	r2, r3
 800220e:	dbf0      	blt.n	80021f2 <_read+0x12>
	}

return len;
 8002210:	687b      	ldr	r3, [r7, #4]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <_close>:
	}
	return len;
}

int _close(int file)
{
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
	return -1;
 8002222:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002226:	4618      	mov	r0, r3
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002242:	605a      	str	r2, [r3, #4]
	return 0;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <_isatty>:

int _isatty(int file)
{
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
	return 1;
 800225a:	2301      	movs	r3, #1
}
 800225c:	4618      	mov	r0, r3
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
	return 0;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
	...

08002284 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800228c:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <_sbrk+0x50>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d102      	bne.n	800229a <_sbrk+0x16>
		heap_end = &end;
 8002294:	4b0f      	ldr	r3, [pc, #60]	; (80022d4 <_sbrk+0x50>)
 8002296:	4a10      	ldr	r2, [pc, #64]	; (80022d8 <_sbrk+0x54>)
 8002298:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800229a:	4b0e      	ldr	r3, [pc, #56]	; (80022d4 <_sbrk+0x50>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80022a0:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <_sbrk+0x50>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4413      	add	r3, r2
 80022a8:	466a      	mov	r2, sp
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d907      	bls.n	80022be <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80022ae:	f002 f91b 	bl	80044e8 <__errno>
 80022b2:	4602      	mov	r2, r0
 80022b4:	230c      	movs	r3, #12
 80022b6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80022b8:	f04f 33ff 	mov.w	r3, #4294967295
 80022bc:	e006      	b.n	80022cc <_sbrk+0x48>
	}

	heap_end += incr;
 80022be:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <_sbrk+0x50>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4413      	add	r3, r2
 80022c6:	4a03      	ldr	r2, [pc, #12]	; (80022d4 <_sbrk+0x50>)
 80022c8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80022ca:	68fb      	ldr	r3, [r7, #12]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20000200 	.word	0x20000200
 80022d8:	20000330 	.word	0x20000330

080022dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022e0:	4b08      	ldr	r3, [pc, #32]	; (8002304 <SystemInit+0x28>)
 80022e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e6:	4a07      	ldr	r2, [pc, #28]	; (8002304 <SystemInit+0x28>)
 80022e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022f0:	4b04      	ldr	r3, [pc, #16]	; (8002304 <SystemInit+0x28>)
 80022f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022f6:	609a      	str	r2, [r3, #8]
#endif
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <LL_TIM_EnableARRPreload>:
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	601a      	str	r2, [r3, #0]
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <LL_TIM_OC_EnableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8002328:	b4b0      	push	{r4, r5, r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d01c      	beq.n	8002372 <LL_TIM_OC_EnableFast+0x4a>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	2b04      	cmp	r3, #4
 800233c:	d017      	beq.n	800236e <LL_TIM_OC_EnableFast+0x46>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	2b10      	cmp	r3, #16
 8002342:	d012      	beq.n	800236a <LL_TIM_OC_EnableFast+0x42>
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	2b40      	cmp	r3, #64	; 0x40
 8002348:	d00d      	beq.n	8002366 <LL_TIM_OC_EnableFast+0x3e>
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002350:	d007      	beq.n	8002362 <LL_TIM_OC_EnableFast+0x3a>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002358:	d101      	bne.n	800235e <LL_TIM_OC_EnableFast+0x36>
 800235a:	2305      	movs	r3, #5
 800235c:	e00a      	b.n	8002374 <LL_TIM_OC_EnableFast+0x4c>
 800235e:	2306      	movs	r3, #6
 8002360:	e008      	b.n	8002374 <LL_TIM_OC_EnableFast+0x4c>
 8002362:	2304      	movs	r3, #4
 8002364:	e006      	b.n	8002374 <LL_TIM_OC_EnableFast+0x4c>
 8002366:	2303      	movs	r3, #3
 8002368:	e004      	b.n	8002374 <LL_TIM_OC_EnableFast+0x4c>
 800236a:	2302      	movs	r3, #2
 800236c:	e002      	b.n	8002374 <LL_TIM_OC_EnableFast+0x4c>
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <LL_TIM_OC_EnableFast+0x4c>
 8002372:	2300      	movs	r3, #0
 8002374:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3318      	adds	r3, #24
 800237a:	461a      	mov	r2, r3
 800237c:	4629      	mov	r1, r5
 800237e:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <LL_TIM_OC_EnableFast+0x7c>)
 8002380:	5c5b      	ldrb	r3, [r3, r1]
 8002382:	4413      	add	r3, r2
 8002384:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002386:	6822      	ldr	r2, [r4, #0]
 8002388:	4629      	mov	r1, r5
 800238a:	4b07      	ldr	r3, [pc, #28]	; (80023a8 <LL_TIM_OC_EnableFast+0x80>)
 800238c:	5c5b      	ldrb	r3, [r3, r1]
 800238e:	4619      	mov	r1, r3
 8002390:	2304      	movs	r3, #4
 8002392:	408b      	lsls	r3, r1
 8002394:	4313      	orrs	r3, r2
 8002396:	6023      	str	r3, [r4, #0]

}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	bcb0      	pop	{r4, r5, r7}
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	08006db8 	.word	0x08006db8
 80023a8:	08006dc0 	.word	0x08006dc0

080023ac <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80023ac:	b4b0      	push	{r4, r5, r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d01c      	beq.n	80023f6 <LL_TIM_OC_EnablePreload+0x4a>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	2b04      	cmp	r3, #4
 80023c0:	d017      	beq.n	80023f2 <LL_TIM_OC_EnablePreload+0x46>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	2b10      	cmp	r3, #16
 80023c6:	d012      	beq.n	80023ee <LL_TIM_OC_EnablePreload+0x42>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	2b40      	cmp	r3, #64	; 0x40
 80023cc:	d00d      	beq.n	80023ea <LL_TIM_OC_EnablePreload+0x3e>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023d4:	d007      	beq.n	80023e6 <LL_TIM_OC_EnablePreload+0x3a>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023dc:	d101      	bne.n	80023e2 <LL_TIM_OC_EnablePreload+0x36>
 80023de:	2305      	movs	r3, #5
 80023e0:	e00a      	b.n	80023f8 <LL_TIM_OC_EnablePreload+0x4c>
 80023e2:	2306      	movs	r3, #6
 80023e4:	e008      	b.n	80023f8 <LL_TIM_OC_EnablePreload+0x4c>
 80023e6:	2304      	movs	r3, #4
 80023e8:	e006      	b.n	80023f8 <LL_TIM_OC_EnablePreload+0x4c>
 80023ea:	2303      	movs	r3, #3
 80023ec:	e004      	b.n	80023f8 <LL_TIM_OC_EnablePreload+0x4c>
 80023ee:	2302      	movs	r3, #2
 80023f0:	e002      	b.n	80023f8 <LL_TIM_OC_EnablePreload+0x4c>
 80023f2:	2301      	movs	r3, #1
 80023f4:	e000      	b.n	80023f8 <LL_TIM_OC_EnablePreload+0x4c>
 80023f6:	2300      	movs	r3, #0
 80023f8:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3318      	adds	r3, #24
 80023fe:	461a      	mov	r2, r3
 8002400:	4629      	mov	r1, r5
 8002402:	4b09      	ldr	r3, [pc, #36]	; (8002428 <LL_TIM_OC_EnablePreload+0x7c>)
 8002404:	5c5b      	ldrb	r3, [r3, r1]
 8002406:	4413      	add	r3, r2
 8002408:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800240a:	6822      	ldr	r2, [r4, #0]
 800240c:	4629      	mov	r1, r5
 800240e:	4b07      	ldr	r3, [pc, #28]	; (800242c <LL_TIM_OC_EnablePreload+0x80>)
 8002410:	5c5b      	ldrb	r3, [r3, r1]
 8002412:	4619      	mov	r1, r3
 8002414:	2308      	movs	r3, #8
 8002416:	408b      	lsls	r3, r1
 8002418:	4313      	orrs	r3, r2
 800241a:	6023      	str	r3, [r4, #0]
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	bcb0      	pop	{r4, r5, r7}
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	08006db8 	.word	0x08006db8
 800242c:	08006dc0 	.word	0x08006dc0

08002430 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002442:	f023 0307 	bic.w	r3, r3, #7
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	431a      	orrs	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	609a      	str	r2, [r3, #8]
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
 8002462:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	431a      	orrs	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	605a      	str	r2, [r3, #4]
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	609a      	str	r2, [r3, #8]
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <LL_AHB1_GRP1_EnableClock>:
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80024a8:	4b08      	ldr	r3, [pc, #32]	; (80024cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80024aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024ac:	4907      	ldr	r1, [pc, #28]	; (80024cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80024b4:	4b05      	ldr	r3, [pc, #20]	; (80024cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80024b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4013      	ands	r3, r2
 80024bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024be:	68fb      	ldr	r3, [r7, #12]
}
 80024c0:	bf00      	nop
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	40023800 	.word	0x40023800

080024d0 <LL_APB1_GRP1_EnableClock>:
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80024d8:	4b08      	ldr	r3, [pc, #32]	; (80024fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80024da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024dc:	4907      	ldr	r1, [pc, #28]	; (80024fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80024e4:	4b05      	ldr	r3, [pc, #20]	; (80024fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80024e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4013      	ands	r3, r2
 80024ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024ee:	68fb      	ldr	r3, [r7, #12]
}
 80024f0:	bf00      	nop
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	40023800 	.word	0x40023800

08002500 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b094      	sub	sp, #80	; 0x50
 8002504:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002506:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	605a      	str	r2, [r3, #4]
 8002510:	609a      	str	r2, [r3, #8]
 8002512:	60da      	str	r2, [r3, #12]
 8002514:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002516:	f107 031c 	add.w	r3, r7, #28
 800251a:	2220      	movs	r2, #32
 800251c:	2100      	movs	r1, #0
 800251e:	4618      	mov	r0, r3
 8002520:	f002 f80c 	bl	800453c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002524:	1d3b      	adds	r3, r7, #4
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	605a      	str	r2, [r3, #4]
 800252c:	609a      	str	r2, [r3, #8]
 800252e:	60da      	str	r2, [r3, #12]
 8002530:	611a      	str	r2, [r3, #16]
 8002532:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002534:	2002      	movs	r0, #2
 8002536:	f7ff ffcb 	bl	80024d0 <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 1000-1;
 800253a:	f240 33e7 	movw	r3, #999	; 0x3e7
 800253e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002540:	2300      	movs	r3, #0
 8002542:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 21-1;
 8002544:	2314      	movs	r3, #20
 8002546:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002548:	2300      	movs	r3, #0
 800254a:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 800254c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002550:	4619      	mov	r1, r3
 8002552:	4822      	ldr	r0, [pc, #136]	; (80025dc <MX_TIM3_Init+0xdc>)
 8002554:	f001 faf0 	bl	8003b38 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 8002558:	4820      	ldr	r0, [pc, #128]	; (80025dc <MX_TIM3_Init+0xdc>)
 800255a:	f7ff fed5 	bl	8002308 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 800255e:	2100      	movs	r1, #0
 8002560:	481e      	ldr	r0, [pc, #120]	; (80025dc <MX_TIM3_Init+0xdc>)
 8002562:	f7ff ff65 	bl	8002430 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8002566:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800256a:	481c      	ldr	r0, [pc, #112]	; (80025dc <MX_TIM3_Init+0xdc>)
 800256c:	f7ff ff1e 	bl	80023ac <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002570:	2360      	movs	r3, #96	; 0x60
 8002572:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002574:	2300      	movs	r3, #0
 8002576:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002578:	2300      	movs	r3, #0
 800257a:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 10;
 800257c:	230a      	movs	r3, #10
 800257e:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002580:	2300      	movs	r3, #0
 8002582:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8002584:	f107 031c 	add.w	r3, r7, #28
 8002588:	461a      	mov	r2, r3
 800258a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800258e:	4813      	ldr	r0, [pc, #76]	; (80025dc <MX_TIM3_Init+0xdc>)
 8002590:	f001 fb6c 	bl	8003c6c <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8002594:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002598:	4810      	ldr	r0, [pc, #64]	; (80025dc <MX_TIM3_Init+0xdc>)
 800259a:	f7ff fec5 	bl	8002328 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 800259e:	2100      	movs	r1, #0
 80025a0:	480e      	ldr	r0, [pc, #56]	; (80025dc <MX_TIM3_Init+0xdc>)
 80025a2:	f7ff ff5a 	bl	800245a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80025a6:	480d      	ldr	r0, [pc, #52]	; (80025dc <MX_TIM3_Init+0xdc>)
 80025a8:	f7ff ff6a 	bl	8002480 <LL_TIM_DisableMasterSlaveMode>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80025ac:	2002      	movs	r0, #2
 80025ae:	f7ff ff77 	bl	80024a0 <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration    
    PB1     ------> TIM3_CH4 
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80025b2:	2302      	movs	r3, #2
 80025b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80025b6:	2302      	movs	r3, #2
 80025b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80025ba:	2300      	movs	r3, #0
 80025bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80025c2:	2300      	movs	r3, #0
 80025c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80025c6:	2302      	movs	r3, #2
 80025c8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ca:	1d3b      	adds	r3, r7, #4
 80025cc:	4619      	mov	r1, r3
 80025ce:	4804      	ldr	r0, [pc, #16]	; (80025e0 <MX_TIM3_Init+0xe0>)
 80025d0:	f001 f81f 	bl	8003612 <LL_GPIO_Init>

}
 80025d4:	bf00      	nop
 80025d6:	3750      	adds	r7, #80	; 0x50
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40000400 	.word	0x40000400
 80025e0:	40020400 	.word	0x40020400

080025e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025e8:	4b04      	ldr	r3, [pc, #16]	; (80025fc <__NVIC_GetPriorityGrouping+0x18>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	0a1b      	lsrs	r3, r3, #8
 80025ee:	f003 0307 	and.w	r3, r3, #7
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	e000ed00 	.word	0xe000ed00

08002600 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800260a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260e:	2b00      	cmp	r3, #0
 8002610:	db0b      	blt.n	800262a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	f003 021f 	and.w	r2, r3, #31
 8002618:	4907      	ldr	r1, [pc, #28]	; (8002638 <__NVIC_EnableIRQ+0x38>)
 800261a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	2001      	movs	r0, #1
 8002622:	fa00 f202 	lsl.w	r2, r0, r2
 8002626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	e000e100 	.word	0xe000e100

0800263c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	6039      	str	r1, [r7, #0]
 8002646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264c:	2b00      	cmp	r3, #0
 800264e:	db0a      	blt.n	8002666 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	b2da      	uxtb	r2, r3
 8002654:	490c      	ldr	r1, [pc, #48]	; (8002688 <__NVIC_SetPriority+0x4c>)
 8002656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265a:	0112      	lsls	r2, r2, #4
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	440b      	add	r3, r1
 8002660:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002664:	e00a      	b.n	800267c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	b2da      	uxtb	r2, r3
 800266a:	4908      	ldr	r1, [pc, #32]	; (800268c <__NVIC_SetPriority+0x50>)
 800266c:	79fb      	ldrb	r3, [r7, #7]
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	3b04      	subs	r3, #4
 8002674:	0112      	lsls	r2, r2, #4
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	440b      	add	r3, r1
 800267a:	761a      	strb	r2, [r3, #24]
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	e000e100 	.word	0xe000e100
 800268c:	e000ed00 	.word	0xe000ed00

08002690 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002690:	b480      	push	{r7}
 8002692:	b089      	sub	sp, #36	; 0x24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f1c3 0307 	rsb	r3, r3, #7
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	bf28      	it	cs
 80026ae:	2304      	movcs	r3, #4
 80026b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3304      	adds	r3, #4
 80026b6:	2b06      	cmp	r3, #6
 80026b8:	d902      	bls.n	80026c0 <NVIC_EncodePriority+0x30>
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	3b03      	subs	r3, #3
 80026be:	e000      	b.n	80026c2 <NVIC_EncodePriority+0x32>
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c4:	f04f 32ff 	mov.w	r2, #4294967295
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43da      	mvns	r2, r3
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	401a      	ands	r2, r3
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026d8:	f04f 31ff 	mov.w	r1, #4294967295
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	fa01 f303 	lsl.w	r3, r1, r3
 80026e2:	43d9      	mvns	r1, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e8:	4313      	orrs	r3, r2
         );
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3724      	adds	r7, #36	; 0x24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <LL_USART_Enable>:
{
 80026f6:	b480      	push	{r7}
 80026f8:	b083      	sub	sp, #12
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	60da      	str	r2, [r3, #12]
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <LL_USART_ConfigAsyncMode>:
{
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	615a      	str	r2, [r3, #20]
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
	...

08002744 <LL_AHB1_GRP1_EnableClock>:
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800274c:	4b08      	ldr	r3, [pc, #32]	; (8002770 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800274e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002750:	4907      	ldr	r1, [pc, #28]	; (8002770 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4313      	orrs	r3, r2
 8002756:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002758:	4b05      	ldr	r3, [pc, #20]	; (8002770 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800275a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4013      	ands	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002762:	68fb      	ldr	r3, [r7, #12]
}
 8002764:	bf00      	nop
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	40023800 	.word	0x40023800

08002774 <LL_APB2_GRP1_EnableClock>:
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800277c:	4b08      	ldr	r3, [pc, #32]	; (80027a0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800277e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002780:	4907      	ldr	r1, [pc, #28]	; (80027a0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4313      	orrs	r3, r2
 8002786:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002788:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800278a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4013      	ands	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002792:	68fb      	ldr	r3, [r7, #12]
}
 8002794:	bf00      	nop
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	40023800 	.word	0x40023800

080027a4 <MX_USART6_UART_Init>:
/* USER CODE END 0 */

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08e      	sub	sp, #56	; 0x38
 80027a8:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80027aa:	f107 031c 	add.w	r3, r7, #28
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	605a      	str	r2, [r3, #4]
 80027b4:	609a      	str	r2, [r3, #8]
 80027b6:	60da      	str	r2, [r3, #12]
 80027b8:	611a      	str	r2, [r3, #16]
 80027ba:	615a      	str	r2, [r3, #20]
 80027bc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027be:	1d3b      	adds	r3, r7, #4
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	605a      	str	r2, [r3, #4]
 80027c6:	609a      	str	r2, [r3, #8]
 80027c8:	60da      	str	r2, [r3, #12]
 80027ca:	611a      	str	r2, [r3, #16]
 80027cc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 80027ce:	2020      	movs	r0, #32
 80027d0:	f7ff ffd0 	bl	8002774 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80027d4:	2004      	movs	r0, #4
 80027d6:	f7ff ffb5 	bl	8002744 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration  
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80027da:	23c0      	movs	r3, #192	; 0xc0
 80027dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80027de:	2302      	movs	r3, #2
 80027e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80027e2:	2303      	movs	r3, #3
 80027e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80027ea:	2300      	movs	r3, #0
 80027ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80027ee:	2308      	movs	r3, #8
 80027f0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027f2:	1d3b      	adds	r3, r7, #4
 80027f4:	4619      	mov	r1, r3
 80027f6:	4819      	ldr	r0, [pc, #100]	; (800285c <MX_USART6_UART_Init+0xb8>)
 80027f8:	f000 ff0b 	bl	8003612 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80027fc:	f7ff fef2 	bl	80025e4 <__NVIC_GetPriorityGrouping>
 8002800:	4603      	mov	r3, r0
 8002802:	2200      	movs	r2, #0
 8002804:	2100      	movs	r1, #0
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff ff42 	bl	8002690 <NVIC_EncodePriority>
 800280c:	4603      	mov	r3, r0
 800280e:	4619      	mov	r1, r3
 8002810:	2047      	movs	r0, #71	; 0x47
 8002812:	f7ff ff13 	bl	800263c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8002816:	2047      	movs	r0, #71	; 0x47
 8002818:	f7ff fef2 	bl	8002600 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 921600;
 800281c:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 8002820:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002822:	2300      	movs	r3, #0
 8002824:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002826:	2300      	movs	r3, #0
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800282a:	2300      	movs	r3, #0
 800282c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800282e:	230c      	movs	r3, #12
 8002830:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002832:	2300      	movs	r3, #0
 8002834:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002836:	2300      	movs	r3, #0
 8002838:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 800283a:	f107 031c 	add.w	r3, r7, #28
 800283e:	4619      	mov	r1, r3
 8002840:	4807      	ldr	r0, [pc, #28]	; (8002860 <MX_USART6_UART_Init+0xbc>)
 8002842:	f001 fdd1 	bl	80043e8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8002846:	4806      	ldr	r0, [pc, #24]	; (8002860 <MX_USART6_UART_Init+0xbc>)
 8002848:	f7ff ff65 	bl	8002716 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 800284c:	4804      	ldr	r0, [pc, #16]	; (8002860 <MX_USART6_UART_Init+0xbc>)
 800284e:	f7ff ff52 	bl	80026f6 <LL_USART_Enable>

}
 8002852:	bf00      	nop
 8002854:	3738      	adds	r7, #56	; 0x38
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40020800 	.word	0x40020800
 8002860:	40011400 	.word	0x40011400

08002864 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002864:	f8df d034 	ldr.w	sp, [pc, #52]	; 800289c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002868:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800286a:	e003      	b.n	8002874 <LoopCopyDataInit>

0800286c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800286c:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800286e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002870:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002872:	3104      	adds	r1, #4

08002874 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002874:	480b      	ldr	r0, [pc, #44]	; (80028a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002876:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002878:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800287a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800287c:	d3f6      	bcc.n	800286c <CopyDataInit>
  ldr  r2, =_sbss
 800287e:	4a0b      	ldr	r2, [pc, #44]	; (80028ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002880:	e002      	b.n	8002888 <LoopFillZerobss>

08002882 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002882:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002884:	f842 3b04 	str.w	r3, [r2], #4

08002888 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002888:	4b09      	ldr	r3, [pc, #36]	; (80028b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800288a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800288c:	d3f9      	bcc.n	8002882 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800288e:	f7ff fd25 	bl	80022dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002892:	f001 fe2f 	bl	80044f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002896:	f7ff f9fd 	bl	8001c94 <main>
  bx  lr    
 800289a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800289c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80028a0:	08007098 	.word	0x08007098
  ldr  r0, =_sdata
 80028a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80028a8:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80028ac:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 80028b0:	20000330 	.word	0x20000330

080028b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028b4:	e7fe      	b.n	80028b4 <ADC_IRQHandler>
	...

080028b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028bc:	4b0e      	ldr	r3, [pc, #56]	; (80028f8 <HAL_Init+0x40>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a0d      	ldr	r2, [pc, #52]	; (80028f8 <HAL_Init+0x40>)
 80028c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028c8:	4b0b      	ldr	r3, [pc, #44]	; (80028f8 <HAL_Init+0x40>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a0a      	ldr	r2, [pc, #40]	; (80028f8 <HAL_Init+0x40>)
 80028ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028d4:	4b08      	ldr	r3, [pc, #32]	; (80028f8 <HAL_Init+0x40>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a07      	ldr	r2, [pc, #28]	; (80028f8 <HAL_Init+0x40>)
 80028da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028e0:	2003      	movs	r0, #3
 80028e2:	f000 f92f 	bl	8002b44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028e6:	2000      	movs	r0, #0
 80028e8:	f000 f808 	bl	80028fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028ec:	f7ff fbd6 	bl	800209c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40023c00 	.word	0x40023c00

080028fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002904:	4b12      	ldr	r3, [pc, #72]	; (8002950 <HAL_InitTick+0x54>)
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	4b12      	ldr	r3, [pc, #72]	; (8002954 <HAL_InitTick+0x58>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	4619      	mov	r1, r3
 800290e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002912:	fbb3 f3f1 	udiv	r3, r3, r1
 8002916:	fbb2 f3f3 	udiv	r3, r2, r3
 800291a:	4618      	mov	r0, r3
 800291c:	f000 f939 	bl	8002b92 <HAL_SYSTICK_Config>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e00e      	b.n	8002948 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b0f      	cmp	r3, #15
 800292e:	d80a      	bhi.n	8002946 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002930:	2200      	movs	r2, #0
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	f04f 30ff 	mov.w	r0, #4294967295
 8002938:	f000 f90f 	bl	8002b5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800293c:	4a06      	ldr	r2, [pc, #24]	; (8002958 <HAL_InitTick+0x5c>)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	e000      	b.n	8002948 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
}
 8002948:	4618      	mov	r0, r3
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	20000000 	.word	0x20000000
 8002954:	20000008 	.word	0x20000008
 8002958:	20000004 	.word	0x20000004

0800295c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002960:	4b06      	ldr	r3, [pc, #24]	; (800297c <HAL_IncTick+0x20>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	461a      	mov	r2, r3
 8002966:	4b06      	ldr	r3, [pc, #24]	; (8002980 <HAL_IncTick+0x24>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4413      	add	r3, r2
 800296c:	4a04      	ldr	r2, [pc, #16]	; (8002980 <HAL_IncTick+0x24>)
 800296e:	6013      	str	r3, [r2, #0]
}
 8002970:	bf00      	nop
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	20000008 	.word	0x20000008
 8002980:	20000328 	.word	0x20000328

08002984 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  return uwTick;
 8002988:	4b03      	ldr	r3, [pc, #12]	; (8002998 <HAL_GetTick+0x14>)
 800298a:	681b      	ldr	r3, [r3, #0]
}
 800298c:	4618      	mov	r0, r3
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	20000328 	.word	0x20000328

0800299c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029a4:	f7ff ffee 	bl	8002984 <HAL_GetTick>
 80029a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b4:	d005      	beq.n	80029c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029b6:	4b09      	ldr	r3, [pc, #36]	; (80029dc <HAL_Delay+0x40>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	461a      	mov	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4413      	add	r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029c2:	bf00      	nop
 80029c4:	f7ff ffde 	bl	8002984 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d8f7      	bhi.n	80029c4 <HAL_Delay+0x28>
  {
  }
}
 80029d4:	bf00      	nop
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	20000008 	.word	0x20000008

080029e0 <__NVIC_SetPriorityGrouping>:
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029f0:	4b0c      	ldr	r3, [pc, #48]	; (8002a24 <__NVIC_SetPriorityGrouping+0x44>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029fc:	4013      	ands	r3, r2
 80029fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a12:	4a04      	ldr	r2, [pc, #16]	; (8002a24 <__NVIC_SetPriorityGrouping+0x44>)
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	60d3      	str	r3, [r2, #12]
}
 8002a18:	bf00      	nop
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	e000ed00 	.word	0xe000ed00

08002a28 <__NVIC_GetPriorityGrouping>:
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a2c:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <__NVIC_GetPriorityGrouping+0x18>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	0a1b      	lsrs	r3, r3, #8
 8002a32:	f003 0307 	and.w	r3, r3, #7
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	e000ed00 	.word	0xe000ed00

08002a44 <__NVIC_SetPriority>:
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	6039      	str	r1, [r7, #0]
 8002a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	db0a      	blt.n	8002a6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	490c      	ldr	r1, [pc, #48]	; (8002a90 <__NVIC_SetPriority+0x4c>)
 8002a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a62:	0112      	lsls	r2, r2, #4
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	440b      	add	r3, r1
 8002a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002a6c:	e00a      	b.n	8002a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	4908      	ldr	r1, [pc, #32]	; (8002a94 <__NVIC_SetPriority+0x50>)
 8002a74:	79fb      	ldrb	r3, [r7, #7]
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	3b04      	subs	r3, #4
 8002a7c:	0112      	lsls	r2, r2, #4
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	440b      	add	r3, r1
 8002a82:	761a      	strb	r2, [r3, #24]
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	e000e100 	.word	0xe000e100
 8002a94:	e000ed00 	.word	0xe000ed00

08002a98 <NVIC_EncodePriority>:
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b089      	sub	sp, #36	; 0x24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	f1c3 0307 	rsb	r3, r3, #7
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	bf28      	it	cs
 8002ab6:	2304      	movcs	r3, #4
 8002ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	3304      	adds	r3, #4
 8002abe:	2b06      	cmp	r3, #6
 8002ac0:	d902      	bls.n	8002ac8 <NVIC_EncodePriority+0x30>
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	3b03      	subs	r3, #3
 8002ac6:	e000      	b.n	8002aca <NVIC_EncodePriority+0x32>
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002acc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43da      	mvns	r2, r3
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	401a      	ands	r2, r3
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aea:	43d9      	mvns	r1, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af0:	4313      	orrs	r3, r2
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3724      	adds	r7, #36	; 0x24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
	...

08002b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b10:	d301      	bcc.n	8002b16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b12:	2301      	movs	r3, #1
 8002b14:	e00f      	b.n	8002b36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b16:	4a0a      	ldr	r2, [pc, #40]	; (8002b40 <SysTick_Config+0x40>)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b1e:	210f      	movs	r1, #15
 8002b20:	f04f 30ff 	mov.w	r0, #4294967295
 8002b24:	f7ff ff8e 	bl	8002a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b28:	4b05      	ldr	r3, [pc, #20]	; (8002b40 <SysTick_Config+0x40>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b2e:	4b04      	ldr	r3, [pc, #16]	; (8002b40 <SysTick_Config+0x40>)
 8002b30:	2207      	movs	r2, #7
 8002b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	e000e010 	.word	0xe000e010

08002b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f7ff ff47 	bl	80029e0 <__NVIC_SetPriorityGrouping>
}
 8002b52:	bf00      	nop
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b086      	sub	sp, #24
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	4603      	mov	r3, r0
 8002b62:	60b9      	str	r1, [r7, #8]
 8002b64:	607a      	str	r2, [r7, #4]
 8002b66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b6c:	f7ff ff5c 	bl	8002a28 <__NVIC_GetPriorityGrouping>
 8002b70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	68b9      	ldr	r1, [r7, #8]
 8002b76:	6978      	ldr	r0, [r7, #20]
 8002b78:	f7ff ff8e 	bl	8002a98 <NVIC_EncodePriority>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b82:	4611      	mov	r1, r2
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff ff5d 	bl	8002a44 <__NVIC_SetPriority>
}
 8002b8a:	bf00      	nop
 8002b8c:	3718      	adds	r7, #24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b082      	sub	sp, #8
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7ff ffb0 	bl	8002b00 <SysTick_Config>
 8002ba0:	4603      	mov	r3, r0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
	...

08002bac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e25b      	b.n	8003076 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d075      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bca:	4ba3      	ldr	r3, [pc, #652]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 030c 	and.w	r3, r3, #12
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	d00c      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bd6:	4ba0      	ldr	r3, [pc, #640]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bde:	2b08      	cmp	r3, #8
 8002be0:	d112      	bne.n	8002c08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002be2:	4b9d      	ldr	r3, [pc, #628]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bee:	d10b      	bne.n	8002c08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf0:	4b99      	ldr	r3, [pc, #612]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d05b      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x108>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d157      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e236      	b.n	8003076 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c10:	d106      	bne.n	8002c20 <HAL_RCC_OscConfig+0x74>
 8002c12:	4b91      	ldr	r3, [pc, #580]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a90      	ldr	r2, [pc, #576]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	e01d      	b.n	8002c5c <HAL_RCC_OscConfig+0xb0>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c28:	d10c      	bne.n	8002c44 <HAL_RCC_OscConfig+0x98>
 8002c2a:	4b8b      	ldr	r3, [pc, #556]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a8a      	ldr	r2, [pc, #552]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	4b88      	ldr	r3, [pc, #544]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a87      	ldr	r2, [pc, #540]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	e00b      	b.n	8002c5c <HAL_RCC_OscConfig+0xb0>
 8002c44:	4b84      	ldr	r3, [pc, #528]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a83      	ldr	r2, [pc, #524]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c4e:	6013      	str	r3, [r2, #0]
 8002c50:	4b81      	ldr	r3, [pc, #516]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a80      	ldr	r2, [pc, #512]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d013      	beq.n	8002c8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c64:	f7ff fe8e 	bl	8002984 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c6c:	f7ff fe8a 	bl	8002984 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b64      	cmp	r3, #100	; 0x64
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e1fb      	b.n	8003076 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7e:	4b76      	ldr	r3, [pc, #472]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0f0      	beq.n	8002c6c <HAL_RCC_OscConfig+0xc0>
 8002c8a:	e014      	b.n	8002cb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8c:	f7ff fe7a 	bl	8002984 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c94:	f7ff fe76 	bl	8002984 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b64      	cmp	r3, #100	; 0x64
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e1e7      	b.n	8003076 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ca6:	4b6c      	ldr	r3, [pc, #432]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f0      	bne.n	8002c94 <HAL_RCC_OscConfig+0xe8>
 8002cb2:	e000      	b.n	8002cb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d063      	beq.n	8002d8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cc2:	4b65      	ldr	r3, [pc, #404]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00b      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cce:	4b62      	ldr	r3, [pc, #392]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cd6:	2b08      	cmp	r3, #8
 8002cd8:	d11c      	bne.n	8002d14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cda:	4b5f      	ldr	r3, [pc, #380]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d116      	bne.n	8002d14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ce6:	4b5c      	ldr	r3, [pc, #368]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d005      	beq.n	8002cfe <HAL_RCC_OscConfig+0x152>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d001      	beq.n	8002cfe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e1bb      	b.n	8003076 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cfe:	4b56      	ldr	r3, [pc, #344]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	4952      	ldr	r1, [pc, #328]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d12:	e03a      	b.n	8002d8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d020      	beq.n	8002d5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d1c:	4b4f      	ldr	r3, [pc, #316]	; (8002e5c <HAL_RCC_OscConfig+0x2b0>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d22:	f7ff fe2f 	bl	8002984 <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d2a:	f7ff fe2b 	bl	8002984 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e19c      	b.n	8003076 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d3c:	4b46      	ldr	r3, [pc, #280]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0f0      	beq.n	8002d2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d48:	4b43      	ldr	r3, [pc, #268]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	4940      	ldr	r1, [pc, #256]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	600b      	str	r3, [r1, #0]
 8002d5c:	e015      	b.n	8002d8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d5e:	4b3f      	ldr	r3, [pc, #252]	; (8002e5c <HAL_RCC_OscConfig+0x2b0>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d64:	f7ff fe0e 	bl	8002984 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d6c:	f7ff fe0a 	bl	8002984 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e17b      	b.n	8003076 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d7e:	4b36      	ldr	r3, [pc, #216]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f0      	bne.n	8002d6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d030      	beq.n	8002df8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d016      	beq.n	8002dcc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d9e:	4b30      	ldr	r3, [pc, #192]	; (8002e60 <HAL_RCC_OscConfig+0x2b4>)
 8002da0:	2201      	movs	r2, #1
 8002da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da4:	f7ff fdee 	bl	8002984 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dac:	f7ff fdea 	bl	8002984 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e15b      	b.n	8003076 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dbe:	4b26      	ldr	r3, [pc, #152]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0f0      	beq.n	8002dac <HAL_RCC_OscConfig+0x200>
 8002dca:	e015      	b.n	8002df8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dcc:	4b24      	ldr	r3, [pc, #144]	; (8002e60 <HAL_RCC_OscConfig+0x2b4>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd2:	f7ff fdd7 	bl	8002984 <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd8:	e008      	b.n	8002dec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dda:	f7ff fdd3 	bl	8002984 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e144      	b.n	8003076 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dec:	4b1a      	ldr	r3, [pc, #104]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1f0      	bne.n	8002dda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 80a0 	beq.w	8002f46 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e06:	2300      	movs	r3, #0
 8002e08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e0a:	4b13      	ldr	r3, [pc, #76]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10f      	bne.n	8002e36 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e16:	2300      	movs	r3, #0
 8002e18:	60bb      	str	r3, [r7, #8]
 8002e1a:	4b0f      	ldr	r3, [pc, #60]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	4a0e      	ldr	r2, [pc, #56]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e24:	6413      	str	r3, [r2, #64]	; 0x40
 8002e26:	4b0c      	ldr	r3, [pc, #48]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2e:	60bb      	str	r3, [r7, #8]
 8002e30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e32:	2301      	movs	r3, #1
 8002e34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e36:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <HAL_RCC_OscConfig+0x2b8>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d121      	bne.n	8002e86 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e42:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <HAL_RCC_OscConfig+0x2b8>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a07      	ldr	r2, [pc, #28]	; (8002e64 <HAL_RCC_OscConfig+0x2b8>)
 8002e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e4e:	f7ff fd99 	bl	8002984 <HAL_GetTick>
 8002e52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e54:	e011      	b.n	8002e7a <HAL_RCC_OscConfig+0x2ce>
 8002e56:	bf00      	nop
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	42470000 	.word	0x42470000
 8002e60:	42470e80 	.word	0x42470e80
 8002e64:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e68:	f7ff fd8c 	bl	8002984 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e0fd      	b.n	8003076 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7a:	4b81      	ldr	r3, [pc, #516]	; (8003080 <HAL_RCC_OscConfig+0x4d4>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0f0      	beq.n	8002e68 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d106      	bne.n	8002e9c <HAL_RCC_OscConfig+0x2f0>
 8002e8e:	4b7d      	ldr	r3, [pc, #500]	; (8003084 <HAL_RCC_OscConfig+0x4d8>)
 8002e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e92:	4a7c      	ldr	r2, [pc, #496]	; (8003084 <HAL_RCC_OscConfig+0x4d8>)
 8002e94:	f043 0301 	orr.w	r3, r3, #1
 8002e98:	6713      	str	r3, [r2, #112]	; 0x70
 8002e9a:	e01c      	b.n	8002ed6 <HAL_RCC_OscConfig+0x32a>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	2b05      	cmp	r3, #5
 8002ea2:	d10c      	bne.n	8002ebe <HAL_RCC_OscConfig+0x312>
 8002ea4:	4b77      	ldr	r3, [pc, #476]	; (8003084 <HAL_RCC_OscConfig+0x4d8>)
 8002ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea8:	4a76      	ldr	r2, [pc, #472]	; (8003084 <HAL_RCC_OscConfig+0x4d8>)
 8002eaa:	f043 0304 	orr.w	r3, r3, #4
 8002eae:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb0:	4b74      	ldr	r3, [pc, #464]	; (8003084 <HAL_RCC_OscConfig+0x4d8>)
 8002eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb4:	4a73      	ldr	r2, [pc, #460]	; (8003084 <HAL_RCC_OscConfig+0x4d8>)
 8002eb6:	f043 0301 	orr.w	r3, r3, #1
 8002eba:	6713      	str	r3, [r2, #112]	; 0x70
 8002ebc:	e00b      	b.n	8002ed6 <HAL_RCC_OscConfig+0x32a>
 8002ebe:	4b71      	ldr	r3, [pc, #452]	; (8003084 <HAL_RCC_OscConfig+0x4d8>)
 8002ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec2:	4a70      	ldr	r2, [pc, #448]	; (8003084 <HAL_RCC_OscConfig+0x4d8>)
 8002ec4:	f023 0301 	bic.w	r3, r3, #1
 8002ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eca:	4b6e      	ldr	r3, [pc, #440]	; (8003084 <HAL_RCC_OscConfig+0x4d8>)
 8002ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ece:	4a6d      	ldr	r2, [pc, #436]	; (8003084 <HAL_RCC_OscConfig+0x4d8>)
 8002ed0:	f023 0304 	bic.w	r3, r3, #4
 8002ed4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d015      	beq.n	8002f0a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ede:	f7ff fd51 	bl	8002984 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee4:	e00a      	b.n	8002efc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ee6:	f7ff fd4d 	bl	8002984 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e0bc      	b.n	8003076 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002efc:	4b61      	ldr	r3, [pc, #388]	; (8003084 <HAL_RCC_OscConfig+0x4d8>)
 8002efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0ee      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x33a>
 8002f08:	e014      	b.n	8002f34 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f0a:	f7ff fd3b 	bl	8002984 <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f10:	e00a      	b.n	8002f28 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f12:	f7ff fd37 	bl	8002984 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e0a6      	b.n	8003076 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f28:	4b56      	ldr	r3, [pc, #344]	; (8003084 <HAL_RCC_OscConfig+0x4d8>)
 8002f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1ee      	bne.n	8002f12 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f34:	7dfb      	ldrb	r3, [r7, #23]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d105      	bne.n	8002f46 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f3a:	4b52      	ldr	r3, [pc, #328]	; (8003084 <HAL_RCC_OscConfig+0x4d8>)
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	4a51      	ldr	r2, [pc, #324]	; (8003084 <HAL_RCC_OscConfig+0x4d8>)
 8002f40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f000 8092 	beq.w	8003074 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f50:	4b4c      	ldr	r3, [pc, #304]	; (8003084 <HAL_RCC_OscConfig+0x4d8>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f003 030c 	and.w	r3, r3, #12
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d05c      	beq.n	8003016 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d141      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f64:	4b48      	ldr	r3, [pc, #288]	; (8003088 <HAL_RCC_OscConfig+0x4dc>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6a:	f7ff fd0b 	bl	8002984 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f72:	f7ff fd07 	bl	8002984 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e078      	b.n	8003076 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f84:	4b3f      	ldr	r3, [pc, #252]	; (8003084 <HAL_RCC_OscConfig+0x4d8>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1f0      	bne.n	8002f72 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	69da      	ldr	r2, [r3, #28]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	019b      	lsls	r3, r3, #6
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa6:	085b      	lsrs	r3, r3, #1
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	041b      	lsls	r3, r3, #16
 8002fac:	431a      	orrs	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb2:	061b      	lsls	r3, r3, #24
 8002fb4:	4933      	ldr	r1, [pc, #204]	; (8003084 <HAL_RCC_OscConfig+0x4d8>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fba:	4b33      	ldr	r3, [pc, #204]	; (8003088 <HAL_RCC_OscConfig+0x4dc>)
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc0:	f7ff fce0 	bl	8002984 <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fc8:	f7ff fcdc 	bl	8002984 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e04d      	b.n	8003076 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fda:	4b2a      	ldr	r3, [pc, #168]	; (8003084 <HAL_RCC_OscConfig+0x4d8>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d0f0      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x41c>
 8002fe6:	e045      	b.n	8003074 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe8:	4b27      	ldr	r3, [pc, #156]	; (8003088 <HAL_RCC_OscConfig+0x4dc>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fee:	f7ff fcc9 	bl	8002984 <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ff6:	f7ff fcc5 	bl	8002984 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e036      	b.n	8003076 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003008:	4b1e      	ldr	r3, [pc, #120]	; (8003084 <HAL_RCC_OscConfig+0x4d8>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1f0      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x44a>
 8003014:	e02e      	b.n	8003074 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d101      	bne.n	8003022 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e029      	b.n	8003076 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003022:	4b18      	ldr	r3, [pc, #96]	; (8003084 <HAL_RCC_OscConfig+0x4d8>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	429a      	cmp	r2, r3
 8003034:	d11c      	bne.n	8003070 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003040:	429a      	cmp	r2, r3
 8003042:	d115      	bne.n	8003070 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800304a:	4013      	ands	r3, r2
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003050:	4293      	cmp	r3, r2
 8003052:	d10d      	bne.n	8003070 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800305e:	429a      	cmp	r2, r3
 8003060:	d106      	bne.n	8003070 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800306c:	429a      	cmp	r2, r3
 800306e:	d001      	beq.n	8003074 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e000      	b.n	8003076 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40007000 	.word	0x40007000
 8003084:	40023800 	.word	0x40023800
 8003088:	42470060 	.word	0x42470060

0800308c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e0cc      	b.n	800323a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030a0:	4b68      	ldr	r3, [pc, #416]	; (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 030f 	and.w	r3, r3, #15
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d90c      	bls.n	80030c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ae:	4b65      	ldr	r3, [pc, #404]	; (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b6:	4b63      	ldr	r3, [pc, #396]	; (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d001      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0b8      	b.n	800323a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d020      	beq.n	8003116 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d005      	beq.n	80030ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030e0:	4b59      	ldr	r3, [pc, #356]	; (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	4a58      	ldr	r2, [pc, #352]	; (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 80030e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0308 	and.w	r3, r3, #8
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d005      	beq.n	8003104 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030f8:	4b53      	ldr	r3, [pc, #332]	; (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	4a52      	ldr	r2, [pc, #328]	; (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003102:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003104:	4b50      	ldr	r3, [pc, #320]	; (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	494d      	ldr	r1, [pc, #308]	; (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	4313      	orrs	r3, r2
 8003114:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d044      	beq.n	80031ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d107      	bne.n	800313a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312a:	4b47      	ldr	r3, [pc, #284]	; (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d119      	bne.n	800316a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e07f      	b.n	800323a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b02      	cmp	r3, #2
 8003140:	d003      	beq.n	800314a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003146:	2b03      	cmp	r3, #3
 8003148:	d107      	bne.n	800315a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800314a:	4b3f      	ldr	r3, [pc, #252]	; (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d109      	bne.n	800316a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e06f      	b.n	800323a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800315a:	4b3b      	ldr	r3, [pc, #236]	; (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e067      	b.n	800323a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800316a:	4b37      	ldr	r3, [pc, #220]	; (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f023 0203 	bic.w	r2, r3, #3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	4934      	ldr	r1, [pc, #208]	; (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 8003178:	4313      	orrs	r3, r2
 800317a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800317c:	f7ff fc02 	bl	8002984 <HAL_GetTick>
 8003180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003182:	e00a      	b.n	800319a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003184:	f7ff fbfe 	bl	8002984 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003192:	4293      	cmp	r3, r2
 8003194:	d901      	bls.n	800319a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e04f      	b.n	800323a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319a:	4b2b      	ldr	r3, [pc, #172]	; (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 020c 	and.w	r2, r3, #12
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d1eb      	bne.n	8003184 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031ac:	4b25      	ldr	r3, [pc, #148]	; (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 030f 	and.w	r3, r3, #15
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d20c      	bcs.n	80031d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ba:	4b22      	ldr	r3, [pc, #136]	; (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c2:	4b20      	ldr	r3, [pc, #128]	; (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d001      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e032      	b.n	800323a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d008      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e0:	4b19      	ldr	r3, [pc, #100]	; (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	4916      	ldr	r1, [pc, #88]	; (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d009      	beq.n	8003212 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031fe:	4b12      	ldr	r3, [pc, #72]	; (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	490e      	ldr	r1, [pc, #56]	; (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	4313      	orrs	r3, r2
 8003210:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003212:	f000 f821 	bl	8003258 <HAL_RCC_GetSysClockFreq>
 8003216:	4601      	mov	r1, r0
 8003218:	4b0b      	ldr	r3, [pc, #44]	; (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	091b      	lsrs	r3, r3, #4
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	4a0a      	ldr	r2, [pc, #40]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 8003224:	5cd3      	ldrb	r3, [r2, r3]
 8003226:	fa21 f303 	lsr.w	r3, r1, r3
 800322a:	4a09      	ldr	r2, [pc, #36]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 800322c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800322e:	4b09      	ldr	r3, [pc, #36]	; (8003254 <HAL_RCC_ClockConfig+0x1c8>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff fb62 	bl	80028fc <HAL_InitTick>

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40023c00 	.word	0x40023c00
 8003248:	40023800 	.word	0x40023800
 800324c:	08006da0 	.word	0x08006da0
 8003250:	20000000 	.word	0x20000000
 8003254:	20000004 	.word	0x20000004

08003258 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800325e:	2300      	movs	r3, #0
 8003260:	607b      	str	r3, [r7, #4]
 8003262:	2300      	movs	r3, #0
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	2300      	movs	r3, #0
 8003268:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800326a:	2300      	movs	r3, #0
 800326c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800326e:	4b63      	ldr	r3, [pc, #396]	; (80033fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 030c 	and.w	r3, r3, #12
 8003276:	2b04      	cmp	r3, #4
 8003278:	d007      	beq.n	800328a <HAL_RCC_GetSysClockFreq+0x32>
 800327a:	2b08      	cmp	r3, #8
 800327c:	d008      	beq.n	8003290 <HAL_RCC_GetSysClockFreq+0x38>
 800327e:	2b00      	cmp	r3, #0
 8003280:	f040 80b4 	bne.w	80033ec <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003284:	4b5e      	ldr	r3, [pc, #376]	; (8003400 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003286:	60bb      	str	r3, [r7, #8]
       break;
 8003288:	e0b3      	b.n	80033f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800328a:	4b5e      	ldr	r3, [pc, #376]	; (8003404 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800328c:	60bb      	str	r3, [r7, #8]
      break;
 800328e:	e0b0      	b.n	80033f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003290:	4b5a      	ldr	r3, [pc, #360]	; (80033fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003298:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800329a:	4b58      	ldr	r3, [pc, #352]	; (80033fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d04a      	beq.n	800333c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032a6:	4b55      	ldr	r3, [pc, #340]	; (80033fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	099b      	lsrs	r3, r3, #6
 80032ac:	f04f 0400 	mov.w	r4, #0
 80032b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032b4:	f04f 0200 	mov.w	r2, #0
 80032b8:	ea03 0501 	and.w	r5, r3, r1
 80032bc:	ea04 0602 	and.w	r6, r4, r2
 80032c0:	4629      	mov	r1, r5
 80032c2:	4632      	mov	r2, r6
 80032c4:	f04f 0300 	mov.w	r3, #0
 80032c8:	f04f 0400 	mov.w	r4, #0
 80032cc:	0154      	lsls	r4, r2, #5
 80032ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032d2:	014b      	lsls	r3, r1, #5
 80032d4:	4619      	mov	r1, r3
 80032d6:	4622      	mov	r2, r4
 80032d8:	1b49      	subs	r1, r1, r5
 80032da:	eb62 0206 	sbc.w	r2, r2, r6
 80032de:	f04f 0300 	mov.w	r3, #0
 80032e2:	f04f 0400 	mov.w	r4, #0
 80032e6:	0194      	lsls	r4, r2, #6
 80032e8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80032ec:	018b      	lsls	r3, r1, #6
 80032ee:	1a5b      	subs	r3, r3, r1
 80032f0:	eb64 0402 	sbc.w	r4, r4, r2
 80032f4:	f04f 0100 	mov.w	r1, #0
 80032f8:	f04f 0200 	mov.w	r2, #0
 80032fc:	00e2      	lsls	r2, r4, #3
 80032fe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003302:	00d9      	lsls	r1, r3, #3
 8003304:	460b      	mov	r3, r1
 8003306:	4614      	mov	r4, r2
 8003308:	195b      	adds	r3, r3, r5
 800330a:	eb44 0406 	adc.w	r4, r4, r6
 800330e:	f04f 0100 	mov.w	r1, #0
 8003312:	f04f 0200 	mov.w	r2, #0
 8003316:	0262      	lsls	r2, r4, #9
 8003318:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800331c:	0259      	lsls	r1, r3, #9
 800331e:	460b      	mov	r3, r1
 8003320:	4614      	mov	r4, r2
 8003322:	4618      	mov	r0, r3
 8003324:	4621      	mov	r1, r4
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f04f 0400 	mov.w	r4, #0
 800332c:	461a      	mov	r2, r3
 800332e:	4623      	mov	r3, r4
 8003330:	f7fd fc3a 	bl	8000ba8 <__aeabi_uldivmod>
 8003334:	4603      	mov	r3, r0
 8003336:	460c      	mov	r4, r1
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	e049      	b.n	80033d0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800333c:	4b2f      	ldr	r3, [pc, #188]	; (80033fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	099b      	lsrs	r3, r3, #6
 8003342:	f04f 0400 	mov.w	r4, #0
 8003346:	f240 11ff 	movw	r1, #511	; 0x1ff
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	ea03 0501 	and.w	r5, r3, r1
 8003352:	ea04 0602 	and.w	r6, r4, r2
 8003356:	4629      	mov	r1, r5
 8003358:	4632      	mov	r2, r6
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	f04f 0400 	mov.w	r4, #0
 8003362:	0154      	lsls	r4, r2, #5
 8003364:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003368:	014b      	lsls	r3, r1, #5
 800336a:	4619      	mov	r1, r3
 800336c:	4622      	mov	r2, r4
 800336e:	1b49      	subs	r1, r1, r5
 8003370:	eb62 0206 	sbc.w	r2, r2, r6
 8003374:	f04f 0300 	mov.w	r3, #0
 8003378:	f04f 0400 	mov.w	r4, #0
 800337c:	0194      	lsls	r4, r2, #6
 800337e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003382:	018b      	lsls	r3, r1, #6
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	eb64 0402 	sbc.w	r4, r4, r2
 800338a:	f04f 0100 	mov.w	r1, #0
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	00e2      	lsls	r2, r4, #3
 8003394:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003398:	00d9      	lsls	r1, r3, #3
 800339a:	460b      	mov	r3, r1
 800339c:	4614      	mov	r4, r2
 800339e:	195b      	adds	r3, r3, r5
 80033a0:	eb44 0406 	adc.w	r4, r4, r6
 80033a4:	f04f 0100 	mov.w	r1, #0
 80033a8:	f04f 0200 	mov.w	r2, #0
 80033ac:	02a2      	lsls	r2, r4, #10
 80033ae:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80033b2:	0299      	lsls	r1, r3, #10
 80033b4:	460b      	mov	r3, r1
 80033b6:	4614      	mov	r4, r2
 80033b8:	4618      	mov	r0, r3
 80033ba:	4621      	mov	r1, r4
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f04f 0400 	mov.w	r4, #0
 80033c2:	461a      	mov	r2, r3
 80033c4:	4623      	mov	r3, r4
 80033c6:	f7fd fbef 	bl	8000ba8 <__aeabi_uldivmod>
 80033ca:	4603      	mov	r3, r0
 80033cc:	460c      	mov	r4, r1
 80033ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033d0:	4b0a      	ldr	r3, [pc, #40]	; (80033fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	0c1b      	lsrs	r3, r3, #16
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	3301      	adds	r3, #1
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e8:	60bb      	str	r3, [r7, #8]
      break;
 80033ea:	e002      	b.n	80033f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033ec:	4b04      	ldr	r3, [pc, #16]	; (8003400 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80033ee:	60bb      	str	r3, [r7, #8]
      break;
 80033f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033f2:	68bb      	ldr	r3, [r7, #8]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033fc:	40023800 	.word	0x40023800
 8003400:	00f42400 	.word	0x00f42400
 8003404:	007a1200 	.word	0x007a1200

08003408 <LL_GPIO_SetPinMode>:
{
 8003408:	b480      	push	{r7}
 800340a:	b089      	sub	sp, #36	; 0x24
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	fa93 f3a3 	rbit	r3, r3
 8003422:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	fab3 f383 	clz	r3, r3
 800342a:	b2db      	uxtb	r3, r3
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	2103      	movs	r1, #3
 8003430:	fa01 f303 	lsl.w	r3, r1, r3
 8003434:	43db      	mvns	r3, r3
 8003436:	401a      	ands	r2, r3
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	fa93 f3a3 	rbit	r3, r3
 8003442:	61bb      	str	r3, [r7, #24]
  return result;
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	fab3 f383 	clz	r3, r3
 800344a:	b2db      	uxtb	r3, r3
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	fa01 f303 	lsl.w	r3, r1, r3
 8003454:	431a      	orrs	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	601a      	str	r2, [r3, #0]
}
 800345a:	bf00      	nop
 800345c:	3724      	adds	r7, #36	; 0x24
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <LL_GPIO_SetPinOutputType>:
{
 8003466:	b480      	push	{r7}
 8003468:	b085      	sub	sp, #20
 800346a:	af00      	add	r7, sp, #0
 800346c:	60f8      	str	r0, [r7, #12]
 800346e:	60b9      	str	r1, [r7, #8]
 8003470:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	43db      	mvns	r3, r3
 800347a:	401a      	ands	r2, r3
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	fb01 f303 	mul.w	r3, r1, r3
 8003484:	431a      	orrs	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	605a      	str	r2, [r3, #4]
}
 800348a:	bf00      	nop
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <LL_GPIO_SetPinSpeed>:
{
 8003496:	b480      	push	{r7}
 8003498:	b089      	sub	sp, #36	; 0x24
 800349a:	af00      	add	r7, sp, #0
 800349c:	60f8      	str	r0, [r7, #12]
 800349e:	60b9      	str	r1, [r7, #8]
 80034a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	fa93 f3a3 	rbit	r3, r3
 80034b0:	613b      	str	r3, [r7, #16]
  return result;
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	fab3 f383 	clz	r3, r3
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	2103      	movs	r1, #3
 80034be:	fa01 f303 	lsl.w	r3, r1, r3
 80034c2:	43db      	mvns	r3, r3
 80034c4:	401a      	ands	r2, r3
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	fa93 f3a3 	rbit	r3, r3
 80034d0:	61bb      	str	r3, [r7, #24]
  return result;
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	fab3 f383 	clz	r3, r3
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	fa01 f303 	lsl.w	r3, r1, r3
 80034e2:	431a      	orrs	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	609a      	str	r2, [r3, #8]
}
 80034e8:	bf00      	nop
 80034ea:	3724      	adds	r7, #36	; 0x24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <LL_GPIO_SetPinPull>:
{
 80034f4:	b480      	push	{r7}
 80034f6:	b089      	sub	sp, #36	; 0x24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	68da      	ldr	r2, [r3, #12]
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	fa93 f3a3 	rbit	r3, r3
 800350e:	613b      	str	r3, [r7, #16]
  return result;
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	fab3 f383 	clz	r3, r3
 8003516:	b2db      	uxtb	r3, r3
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	2103      	movs	r1, #3
 800351c:	fa01 f303 	lsl.w	r3, r1, r3
 8003520:	43db      	mvns	r3, r3
 8003522:	401a      	ands	r2, r3
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	fa93 f3a3 	rbit	r3, r3
 800352e:	61bb      	str	r3, [r7, #24]
  return result;
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	fab3 f383 	clz	r3, r3
 8003536:	b2db      	uxtb	r3, r3
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	fa01 f303 	lsl.w	r3, r1, r3
 8003540:	431a      	orrs	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	60da      	str	r2, [r3, #12]
}
 8003546:	bf00      	nop
 8003548:	3724      	adds	r7, #36	; 0x24
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <LL_GPIO_SetAFPin_0_7>:
{
 8003552:	b480      	push	{r7}
 8003554:	b089      	sub	sp, #36	; 0x24
 8003556:	af00      	add	r7, sp, #0
 8003558:	60f8      	str	r0, [r7, #12]
 800355a:	60b9      	str	r1, [r7, #8]
 800355c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6a1a      	ldr	r2, [r3, #32]
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	fa93 f3a3 	rbit	r3, r3
 800356c:	613b      	str	r3, [r7, #16]
  return result;
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	fab3 f383 	clz	r3, r3
 8003574:	b2db      	uxtb	r3, r3
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	210f      	movs	r1, #15
 800357a:	fa01 f303 	lsl.w	r3, r1, r3
 800357e:	43db      	mvns	r3, r3
 8003580:	401a      	ands	r2, r3
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	fa93 f3a3 	rbit	r3, r3
 800358c:	61bb      	str	r3, [r7, #24]
  return result;
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	fab3 f383 	clz	r3, r3
 8003594:	b2db      	uxtb	r3, r3
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	fa01 f303 	lsl.w	r3, r1, r3
 800359e:	431a      	orrs	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	621a      	str	r2, [r3, #32]
}
 80035a4:	bf00      	nop
 80035a6:	3724      	adds	r7, #36	; 0x24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <LL_GPIO_SetAFPin_8_15>:
{
 80035b0:	b480      	push	{r7}
 80035b2:	b089      	sub	sp, #36	; 0x24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	0a1b      	lsrs	r3, r3, #8
 80035c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	fa93 f3a3 	rbit	r3, r3
 80035cc:	613b      	str	r3, [r7, #16]
  return result;
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	fab3 f383 	clz	r3, r3
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	210f      	movs	r1, #15
 80035da:	fa01 f303 	lsl.w	r3, r1, r3
 80035de:	43db      	mvns	r3, r3
 80035e0:	401a      	ands	r2, r3
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	0a1b      	lsrs	r3, r3, #8
 80035e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	fa93 f3a3 	rbit	r3, r3
 80035ee:	61bb      	str	r3, [r7, #24]
  return result;
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	fab3 f383 	clz	r3, r3
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003600:	431a      	orrs	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003606:	bf00      	nop
 8003608:	3724      	adds	r7, #36	; 0x24
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b088      	sub	sp, #32
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
 800361a:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800361c:	2300      	movs	r3, #0
 800361e:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8003620:	2300      	movs	r3, #0
 8003622:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	fa93 f3a3 	rbit	r3, r3
 8003630:	613b      	str	r3, [r7, #16]
  return result;
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	fab3 f383 	clz	r3, r3
 8003638:	b2db      	uxtb	r3, r3
 800363a:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800363c:	e050      	b.n	80036e0 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	2101      	movs	r1, #1
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	fa01 f303 	lsl.w	r3, r1, r3
 800364a:	4013      	ands	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d042      	beq.n	80036da <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d003      	beq.n	8003664 <LL_GPIO_Init+0x52>
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	2b02      	cmp	r3, #2
 8003662:	d10d      	bne.n	8003680 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	461a      	mov	r2, r3
 800366a:	69b9      	ldr	r1, [r7, #24]
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f7ff ff12 	bl	8003496 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	461a      	mov	r2, r3
 8003678:	69b9      	ldr	r1, [r7, #24]
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7ff fef3 	bl	8003466 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	461a      	mov	r2, r3
 8003686:	69b9      	ldr	r1, [r7, #24]
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7ff ff33 	bl	80034f4 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2b02      	cmp	r3, #2
 8003694:	d11a      	bne.n	80036cc <LL_GPIO_Init+0xba>
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	fa93 f3a3 	rbit	r3, r3
 80036a0:	60bb      	str	r3, [r7, #8]
  return result;
 80036a2:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80036a4:	fab3 f383 	clz	r3, r3
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b07      	cmp	r3, #7
 80036ac:	d807      	bhi.n	80036be <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	461a      	mov	r2, r3
 80036b4:	69b9      	ldr	r1, [r7, #24]
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7ff ff4b 	bl	8003552 <LL_GPIO_SetAFPin_0_7>
 80036bc:	e006      	b.n	80036cc <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	461a      	mov	r2, r3
 80036c4:	69b9      	ldr	r1, [r7, #24]
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7ff ff72 	bl	80035b0 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	461a      	mov	r2, r3
 80036d2:	69b9      	ldr	r1, [r7, #24]
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f7ff fe97 	bl	8003408 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	3301      	adds	r3, #1
 80036de:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	fa22 f303 	lsr.w	r3, r2, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1a7      	bne.n	800363e <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3720      	adds	r7, #32
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80036fc:	4b04      	ldr	r3, [pc, #16]	; (8003710 <LL_RCC_GetSysClkSource+0x18>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 030c 	and.w	r3, r3, #12
}
 8003704:	4618      	mov	r0, r3
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	40023800 	.word	0x40023800

08003714 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003718:	4b04      	ldr	r3, [pc, #16]	; (800372c <LL_RCC_GetAHBPrescaler+0x18>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003720:	4618      	mov	r0, r3
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	40023800 	.word	0x40023800

08003730 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003734:	4b04      	ldr	r3, [pc, #16]	; (8003748 <LL_RCC_GetAPB1Prescaler+0x18>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 800373c:	4618      	mov	r0, r3
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	40023800 	.word	0x40023800

0800374c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003750:	4b04      	ldr	r3, [pc, #16]	; (8003764 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003758:	4618      	mov	r0, r3
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	40023800 	.word	0x40023800

08003768 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800376c:	4b04      	ldr	r3, [pc, #16]	; (8003780 <LL_RCC_PLL_GetMainSource+0x18>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8003774:	4618      	mov	r0, r3
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	40023800 	.word	0x40023800

08003784 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003788:	4b04      	ldr	r3, [pc, #16]	; (800379c <LL_RCC_PLL_GetN+0x18>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	099b      	lsrs	r3, r3, #6
 800378e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8003792:	4618      	mov	r0, r3
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	40023800 	.word	0x40023800

080037a0 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80037a4:	4b04      	ldr	r3, [pc, #16]	; (80037b8 <LL_RCC_PLL_GetP+0x18>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	40023800 	.word	0x40023800

080037bc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80037c0:	4b04      	ldr	r3, [pc, #16]	; (80037d4 <LL_RCC_PLL_GetDivider+0x18>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	40023800 	.word	0x40023800

080037d8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80037e0:	f000 f820 	bl	8003824 <RCC_GetSystemClockFreq>
 80037e4:	4602      	mov	r2, r0
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 f83e 	bl	8003870 <RCC_GetHCLKClockFreq>
 80037f4:	4602      	mov	r2, r0
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 f84c 	bl	800389c <RCC_GetPCLK1ClockFreq>
 8003804:	4602      	mov	r2, r0
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	4618      	mov	r0, r3
 8003810:	f000 f858 	bl	80038c4 <RCC_GetPCLK2ClockFreq>
 8003814:	4602      	mov	r2, r0
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	60da      	str	r2, [r3, #12]
}
 800381a:	bf00      	nop
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
	...

08003824 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800382a:	2300      	movs	r3, #0
 800382c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800382e:	f7ff ff63 	bl	80036f8 <LL_RCC_GetSysClkSource>
 8003832:	4603      	mov	r3, r0
 8003834:	2b04      	cmp	r3, #4
 8003836:	d006      	beq.n	8003846 <RCC_GetSystemClockFreq+0x22>
 8003838:	2b08      	cmp	r3, #8
 800383a:	d007      	beq.n	800384c <RCC_GetSystemClockFreq+0x28>
 800383c:	2b00      	cmp	r3, #0
 800383e:	d10a      	bne.n	8003856 <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003840:	4b09      	ldr	r3, [pc, #36]	; (8003868 <RCC_GetSystemClockFreq+0x44>)
 8003842:	607b      	str	r3, [r7, #4]
      break;
 8003844:	e00a      	b.n	800385c <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003846:	4b09      	ldr	r3, [pc, #36]	; (800386c <RCC_GetSystemClockFreq+0x48>)
 8003848:	607b      	str	r3, [r7, #4]
      break;
 800384a:	e007      	b.n	800385c <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800384c:	2008      	movs	r0, #8
 800384e:	f000 f84d 	bl	80038ec <RCC_PLL_GetFreqDomain_SYS>
 8003852:	6078      	str	r0, [r7, #4]
      break;
 8003854:	e002      	b.n	800385c <RCC_GetSystemClockFreq+0x38>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003856:	4b04      	ldr	r3, [pc, #16]	; (8003868 <RCC_GetSystemClockFreq+0x44>)
 8003858:	607b      	str	r3, [r7, #4]
      break;
 800385a:	bf00      	nop
  }

  return frequency;
 800385c:	687b      	ldr	r3, [r7, #4]
}
 800385e:	4618      	mov	r0, r3
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	00f42400 	.word	0x00f42400
 800386c:	007a1200 	.word	0x007a1200

08003870 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003878:	f7ff ff4c 	bl	8003714 <LL_RCC_GetAHBPrescaler>
 800387c:	4603      	mov	r3, r0
 800387e:	091b      	lsrs	r3, r3, #4
 8003880:	f003 030f 	and.w	r3, r3, #15
 8003884:	4a04      	ldr	r2, [pc, #16]	; (8003898 <RCC_GetHCLKClockFreq+0x28>)
 8003886:	5cd3      	ldrb	r3, [r2, r3]
 8003888:	461a      	mov	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	40d3      	lsrs	r3, r2
}
 800388e:	4618      	mov	r0, r3
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	08006da0 	.word	0x08006da0

0800389c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80038a4:	f7ff ff44 	bl	8003730 <LL_RCC_GetAPB1Prescaler>
 80038a8:	4603      	mov	r3, r0
 80038aa:	0a9b      	lsrs	r3, r3, #10
 80038ac:	4a04      	ldr	r2, [pc, #16]	; (80038c0 <RCC_GetPCLK1ClockFreq+0x24>)
 80038ae:	5cd3      	ldrb	r3, [r2, r3]
 80038b0:	461a      	mov	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	40d3      	lsrs	r3, r2
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	08006db0 	.word	0x08006db0

080038c4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80038cc:	f7ff ff3e 	bl	800374c <LL_RCC_GetAPB2Prescaler>
 80038d0:	4603      	mov	r3, r0
 80038d2:	0b5b      	lsrs	r3, r3, #13
 80038d4:	4a04      	ldr	r2, [pc, #16]	; (80038e8 <RCC_GetPCLK2ClockFreq+0x24>)
 80038d6:	5cd3      	ldrb	r3, [r2, r3]
 80038d8:	461a      	mov	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	40d3      	lsrs	r3, r2
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	08006db0 	.word	0x08006db0

080038ec <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80038ec:	b590      	push	{r4, r7, lr}
 80038ee:	b087      	sub	sp, #28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80038f4:	2300      	movs	r3, #0
 80038f6:	617b      	str	r3, [r7, #20]
 80038f8:	2300      	movs	r3, #0
 80038fa:	60fb      	str	r3, [r7, #12]
 80038fc:	2300      	movs	r3, #0
 80038fe:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003900:	f7ff ff32 	bl	8003768 <LL_RCC_PLL_GetMainSource>
 8003904:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <RCC_PLL_GetFreqDomain_SYS+0x28>
 800390c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003910:	d003      	beq.n	800391a <RCC_PLL_GetFreqDomain_SYS+0x2e>
 8003912:	e005      	b.n	8003920 <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003914:	4b12      	ldr	r3, [pc, #72]	; (8003960 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003916:	617b      	str	r3, [r7, #20]
      break;
 8003918:	e005      	b.n	8003926 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800391a:	4b12      	ldr	r3, [pc, #72]	; (8003964 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800391c:	617b      	str	r3, [r7, #20]
      break;
 800391e:	e002      	b.n	8003926 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 8003920:	4b0f      	ldr	r3, [pc, #60]	; (8003960 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003922:	617b      	str	r3, [r7, #20]
      break;
 8003924:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b08      	cmp	r3, #8
 800392a:	d113      	bne.n	8003954 <RCC_PLL_GetFreqDomain_SYS+0x68>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800392c:	f7ff ff46 	bl	80037bc <LL_RCC_PLL_GetDivider>
 8003930:	4602      	mov	r2, r0
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	fbb3 f4f2 	udiv	r4, r3, r2
 8003938:	f7ff ff24 	bl	8003784 <LL_RCC_PLL_GetN>
 800393c:	4603      	mov	r3, r0
 800393e:	fb03 f404 	mul.w	r4, r3, r4
 8003942:	f7ff ff2d 	bl	80037a0 <LL_RCC_PLL_GetP>
 8003946:	4603      	mov	r3, r0
 8003948:	0c1b      	lsrs	r3, r3, #16
 800394a:	3301      	adds	r3, #1
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	fbb4 f3f3 	udiv	r3, r4, r3
 8003952:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003954:	693b      	ldr	r3, [r7, #16]
}
 8003956:	4618      	mov	r0, r3
 8003958:	371c      	adds	r7, #28
 800395a:	46bd      	mov	sp, r7
 800395c:	bd90      	pop	{r4, r7, pc}
 800395e:	bf00      	nop
 8003960:	00f42400 	.word	0x00f42400
 8003964:	007a1200 	.word	0x007a1200

08003968 <LL_SPI_IsEnabled>:
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003978:	2b40      	cmp	r3, #64	; 0x40
 800397a:	d101      	bne.n	8003980 <LL_SPI_IsEnabled+0x18>
 800397c:	2301      	movs	r3, #1
 800397e:	e000      	b.n	8003982 <LL_SPI_IsEnabled+0x1a>
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <LL_SPI_SetCRCPolynomial>:
{
 800398e:	b480      	push	{r7}
 8003990:	b083      	sub	sp, #12
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
 8003996:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	b29b      	uxth	r3, r3
 800399c:	461a      	mov	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	611a      	str	r2, [r3, #16]
}
 80039a2:	bf00      	nop
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b084      	sub	sp, #16
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
 80039b6:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7ff ffd3 	bl	8003968 <LL_SPI_IsEnabled>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d139      	bne.n	8003a3c <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039d0:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	6811      	ldr	r1, [r2, #0]
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	6852      	ldr	r2, [r2, #4]
 80039dc:	4311      	orrs	r1, r2
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	6892      	ldr	r2, [r2, #8]
 80039e2:	4311      	orrs	r1, r2
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	68d2      	ldr	r2, [r2, #12]
 80039e8:	4311      	orrs	r1, r2
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	6912      	ldr	r2, [r2, #16]
 80039ee:	4311      	orrs	r1, r2
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	6952      	ldr	r2, [r2, #20]
 80039f4:	4311      	orrs	r1, r2
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	6992      	ldr	r2, [r2, #24]
 80039fa:	4311      	orrs	r1, r2
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	69d2      	ldr	r2, [r2, #28]
 8003a00:	4311      	orrs	r1, r2
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	6a12      	ldr	r2, [r2, #32]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f023 0204 	bic.w	r2, r3, #4
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	0c1b      	lsrs	r3, r3, #16
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a2a:	d105      	bne.n	8003a38 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	4619      	mov	r1, r3
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7ff ffab 	bl	800398e <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	69db      	ldr	r3, [r3, #28]
 8003a40:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	61da      	str	r2, [r3, #28]
  return status;
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <LL_TIM_SetPrescaler>:
{
 8003a52:	b480      	push	{r7}
 8003a54:	b083      	sub	sp, #12
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
 8003a5a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <LL_TIM_SetAutoReload>:
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <LL_TIM_SetRepetitionCounter>:
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
 8003a92:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003a9a:	bf00      	nop
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <LL_TIM_OC_SetCompareCH1>:
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b083      	sub	sp, #12
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
 8003aae:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <LL_TIM_OC_SetCompareCH2>:
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	b083      	sub	sp, #12
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
 8003aca:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <LL_TIM_OC_SetCompareCH3>:
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b083      	sub	sp, #12
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
 8003ae6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	683a      	ldr	r2, [r7, #0]
 8003aec:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003aee:	bf00      	nop
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <LL_TIM_OC_SetCompareCH4>:
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
 8003b02:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003b0a:	bf00      	nop
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	f043 0201 	orr.w	r2, r3, #1
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	615a      	str	r2, [r3, #20]
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
	...

08003b38 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a3d      	ldr	r2, [pc, #244]	; (8003c40 <LL_TIM_Init+0x108>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d013      	beq.n	8003b78 <LL_TIM_Init+0x40>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b56:	d00f      	beq.n	8003b78 <LL_TIM_Init+0x40>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a3a      	ldr	r2, [pc, #232]	; (8003c44 <LL_TIM_Init+0x10c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d00b      	beq.n	8003b78 <LL_TIM_Init+0x40>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a39      	ldr	r2, [pc, #228]	; (8003c48 <LL_TIM_Init+0x110>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d007      	beq.n	8003b78 <LL_TIM_Init+0x40>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a38      	ldr	r2, [pc, #224]	; (8003c4c <LL_TIM_Init+0x114>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d003      	beq.n	8003b78 <LL_TIM_Init+0x40>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a37      	ldr	r2, [pc, #220]	; (8003c50 <LL_TIM_Init+0x118>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d106      	bne.n	8003b86 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a2d      	ldr	r2, [pc, #180]	; (8003c40 <LL_TIM_Init+0x108>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d02b      	beq.n	8003be6 <LL_TIM_Init+0xae>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b94:	d027      	beq.n	8003be6 <LL_TIM_Init+0xae>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a2a      	ldr	r2, [pc, #168]	; (8003c44 <LL_TIM_Init+0x10c>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d023      	beq.n	8003be6 <LL_TIM_Init+0xae>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a29      	ldr	r2, [pc, #164]	; (8003c48 <LL_TIM_Init+0x110>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d01f      	beq.n	8003be6 <LL_TIM_Init+0xae>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a28      	ldr	r2, [pc, #160]	; (8003c4c <LL_TIM_Init+0x114>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d01b      	beq.n	8003be6 <LL_TIM_Init+0xae>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a27      	ldr	r2, [pc, #156]	; (8003c50 <LL_TIM_Init+0x118>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d017      	beq.n	8003be6 <LL_TIM_Init+0xae>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a26      	ldr	r2, [pc, #152]	; (8003c54 <LL_TIM_Init+0x11c>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d013      	beq.n	8003be6 <LL_TIM_Init+0xae>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a25      	ldr	r2, [pc, #148]	; (8003c58 <LL_TIM_Init+0x120>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d00f      	beq.n	8003be6 <LL_TIM_Init+0xae>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a24      	ldr	r2, [pc, #144]	; (8003c5c <LL_TIM_Init+0x124>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d00b      	beq.n	8003be6 <LL_TIM_Init+0xae>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a23      	ldr	r2, [pc, #140]	; (8003c60 <LL_TIM_Init+0x128>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d007      	beq.n	8003be6 <LL_TIM_Init+0xae>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a22      	ldr	r2, [pc, #136]	; (8003c64 <LL_TIM_Init+0x12c>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d003      	beq.n	8003be6 <LL_TIM_Init+0xae>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a21      	ldr	r2, [pc, #132]	; (8003c68 <LL_TIM_Init+0x130>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d106      	bne.n	8003bf4 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	4619      	mov	r1, r3
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f7ff ff34 	bl	8003a6e <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	881b      	ldrh	r3, [r3, #0]
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f7ff ff20 	bl	8003a52 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a0a      	ldr	r2, [pc, #40]	; (8003c40 <LL_TIM_Init+0x108>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d003      	beq.n	8003c22 <LL_TIM_Init+0xea>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a0c      	ldr	r2, [pc, #48]	; (8003c50 <LL_TIM_Init+0x118>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d105      	bne.n	8003c2e <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	7c1b      	ldrb	r3, [r3, #16]
 8003c26:	4619      	mov	r1, r3
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f7ff ff2e 	bl	8003a8a <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7ff ff71 	bl	8003b16 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	40010000 	.word	0x40010000
 8003c44:	40000400 	.word	0x40000400
 8003c48:	40000800 	.word	0x40000800
 8003c4c:	40000c00 	.word	0x40000c00
 8003c50:	40010400 	.word	0x40010400
 8003c54:	40014000 	.word	0x40014000
 8003c58:	40014400 	.word	0x40014400
 8003c5c:	40014800 	.word	0x40014800
 8003c60:	40001800 	.word	0x40001800
 8003c64:	40001c00 	.word	0x40001c00
 8003c68:	40002000 	.word	0x40002000

08003c6c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	2b10      	cmp	r3, #16
 8003c80:	d012      	beq.n	8003ca8 <LL_TIM_OC_Init+0x3c>
 8003c82:	2b10      	cmp	r3, #16
 8003c84:	d802      	bhi.n	8003c8c <LL_TIM_OC_Init+0x20>
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d007      	beq.n	8003c9a <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8003c8a:	e022      	b.n	8003cd2 <LL_TIM_OC_Init+0x66>
  switch (Channel)
 8003c8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c90:	d011      	beq.n	8003cb6 <LL_TIM_OC_Init+0x4a>
 8003c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c96:	d015      	beq.n	8003cc4 <LL_TIM_OC_Init+0x58>
      break;
 8003c98:	e01b      	b.n	8003cd2 <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8003c9a:	6879      	ldr	r1, [r7, #4]
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f000 f81d 	bl	8003cdc <OC1Config>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	75fb      	strb	r3, [r7, #23]
      break;
 8003ca6:	e014      	b.n	8003cd2 <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003ca8:	6879      	ldr	r1, [r7, #4]
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 f882 	bl	8003db4 <OC2Config>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	75fb      	strb	r3, [r7, #23]
      break;
 8003cb4:	e00d      	b.n	8003cd2 <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 f8eb 	bl	8003e94 <OC3Config>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	75fb      	strb	r3, [r7, #23]
      break;
 8003cc2:	e006      	b.n	8003cd2 <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003cc4:	6879      	ldr	r1, [r7, #4]
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 f954 	bl	8003f74 <OC4Config>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	75fb      	strb	r3, [r7, #23]
      break;
 8003cd0:	bf00      	nop
  }

  return result;
 8003cd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3718      	adds	r7, #24
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	f023 0201 	bic.w	r2, r3, #1
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f023 0303 	bic.w	r3, r3, #3
 8003d0a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f023 0202 	bic.w	r2, r3, #2
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	f023 0201 	bic.w	r2, r3, #1
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a1c      	ldr	r2, [pc, #112]	; (8003dac <OC1Config+0xd0>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d003      	beq.n	8003d46 <OC1Config+0x6a>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a1b      	ldr	r2, [pc, #108]	; (8003db0 <OC1Config+0xd4>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d11e      	bne.n	8003d84 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f023 0208 	bic.w	r2, r3, #8
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4313      	orrs	r3, r2
 8003d54:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f023 0204 	bic.w	r2, r3, #4
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4313      	orrs	r3, r2
 8003d64:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	4313      	orrs	r3, r2
 8003d82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	4619      	mov	r1, r3
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7ff fe85 	bl	8003aa6 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3718      	adds	r7, #24
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40010000 	.word	0x40010000
 8003db0:	40010400 	.word	0x40010400

08003db4 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	f023 0210 	bic.w	r2, r3, #16
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003de2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	021b      	lsls	r3, r3, #8
 8003df0:	4313      	orrs	r3, r2
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	f023 0220 	bic.w	r2, r3, #32
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	011b      	lsls	r3, r3, #4
 8003e00:	4313      	orrs	r3, r2
 8003e02:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	f023 0210 	bic.w	r2, r3, #16
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	4313      	orrs	r3, r2
 8003e12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a1d      	ldr	r2, [pc, #116]	; (8003e8c <OC2Config+0xd8>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d003      	beq.n	8003e24 <OC2Config+0x70>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a1c      	ldr	r2, [pc, #112]	; (8003e90 <OC2Config+0xdc>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d11f      	bne.n	8003e64 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	019b      	lsls	r3, r3, #6
 8003e30:	4313      	orrs	r3, r2
 8003e32:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	019b      	lsls	r3, r3, #6
 8003e40:	4313      	orrs	r3, r2
 8003e42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4313      	orrs	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	4313      	orrs	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	4619      	mov	r1, r3
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7ff fe23 	bl	8003ac2 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3718      	adds	r7, #24
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	40010000 	.word	0x40010000
 8003e90:	40010400 	.word	0x40010400

08003e94 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f023 0303 	bic.w	r3, r3, #3
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	021b      	lsls	r3, r3, #8
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	021b      	lsls	r3, r3, #8
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a1d      	ldr	r2, [pc, #116]	; (8003f6c <OC3Config+0xd8>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d003      	beq.n	8003f02 <OC3Config+0x6e>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a1c      	ldr	r2, [pc, #112]	; (8003f70 <OC3Config+0xdc>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d11f      	bne.n	8003f42 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	029b      	lsls	r3, r3, #10
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	029b      	lsls	r3, r3, #10
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	011b      	lsls	r3, r3, #4
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	69db      	ldr	r3, [r3, #28]
 8003f3c:	015b      	lsls	r3, r3, #5
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	4619      	mov	r1, r3
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f7ff fdc2 	bl	8003ade <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3718      	adds	r7, #24
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	40010000 	.word	0x40010000
 8003f70:	40010400 	.word	0x40010400

08003f74 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	021b      	lsls	r3, r3, #8
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	031b      	lsls	r3, r3, #12
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	031b      	lsls	r3, r3, #12
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a11      	ldr	r2, [pc, #68]	; (800401c <OC4Config+0xa8>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d003      	beq.n	8003fe4 <OC4Config+0x70>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a10      	ldr	r2, [pc, #64]	; (8004020 <OC4Config+0xac>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d107      	bne.n	8003ff4 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	019b      	lsls	r3, r3, #6
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	4619      	mov	r1, r3
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7ff fd77 	bl	8003afa <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40010000 	.word	0x40010000
 8004020:	40010400 	.word	0x40010400

08004024 <LL_USART_IsEnabled>:
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004038:	bf0c      	ite	eq
 800403a:	2301      	moveq	r3, #1
 800403c:	2300      	movne	r3, #0
 800403e:	b2db      	uxtb	r3, r3
}
 8004040:	4618      	mov	r0, r3
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <LL_USART_SetStopBitsLength>:
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	431a      	orrs	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	611a      	str	r2, [r3, #16]
}
 8004066:	bf00      	nop
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <LL_USART_SetHWFlowCtrl>:
{
 8004072:	b480      	push	{r7}
 8004074:	b083      	sub	sp, #12
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
 800407a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	431a      	orrs	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	615a      	str	r2, [r3, #20]
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <LL_USART_SetBaudRate>:
{
 8004098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800409c:	b085      	sub	sp, #20
 800409e:	af00      	add	r7, sp, #0
 80040a0:	60f8      	str	r0, [r7, #12]
 80040a2:	60b9      	str	r1, [r7, #8]
 80040a4:	607a      	str	r2, [r7, #4]
 80040a6:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ae:	f040 80c1 	bne.w	8004234 <LL_USART_SetBaudRate+0x19c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	461d      	mov	r5, r3
 80040b6:	f04f 0600 	mov.w	r6, #0
 80040ba:	46a8      	mov	r8, r5
 80040bc:	46b1      	mov	r9, r6
 80040be:	eb18 0308 	adds.w	r3, r8, r8
 80040c2:	eb49 0409 	adc.w	r4, r9, r9
 80040c6:	4698      	mov	r8, r3
 80040c8:	46a1      	mov	r9, r4
 80040ca:	eb18 0805 	adds.w	r8, r8, r5
 80040ce:	eb49 0906 	adc.w	r9, r9, r6
 80040d2:	f04f 0100 	mov.w	r1, #0
 80040d6:	f04f 0200 	mov.w	r2, #0
 80040da:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80040de:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80040e2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80040e6:	4688      	mov	r8, r1
 80040e8:	4691      	mov	r9, r2
 80040ea:	eb18 0005 	adds.w	r0, r8, r5
 80040ee:	eb49 0106 	adc.w	r1, r9, r6
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	461d      	mov	r5, r3
 80040f6:	f04f 0600 	mov.w	r6, #0
 80040fa:	196b      	adds	r3, r5, r5
 80040fc:	eb46 0406 	adc.w	r4, r6, r6
 8004100:	461a      	mov	r2, r3
 8004102:	4623      	mov	r3, r4
 8004104:	f7fc fd50 	bl	8000ba8 <__aeabi_uldivmod>
 8004108:	4603      	mov	r3, r0
 800410a:	460c      	mov	r4, r1
 800410c:	461a      	mov	r2, r3
 800410e:	4bb5      	ldr	r3, [pc, #724]	; (80043e4 <LL_USART_SetBaudRate+0x34c>)
 8004110:	fba3 2302 	umull	r2, r3, r3, r2
 8004114:	095b      	lsrs	r3, r3, #5
 8004116:	b29b      	uxth	r3, r3
 8004118:	011b      	lsls	r3, r3, #4
 800411a:	fa1f f883 	uxth.w	r8, r3
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	461d      	mov	r5, r3
 8004122:	f04f 0600 	mov.w	r6, #0
 8004126:	46a9      	mov	r9, r5
 8004128:	46b2      	mov	sl, r6
 800412a:	eb19 0309 	adds.w	r3, r9, r9
 800412e:	eb4a 040a 	adc.w	r4, sl, sl
 8004132:	4699      	mov	r9, r3
 8004134:	46a2      	mov	sl, r4
 8004136:	eb19 0905 	adds.w	r9, r9, r5
 800413a:	eb4a 0a06 	adc.w	sl, sl, r6
 800413e:	f04f 0100 	mov.w	r1, #0
 8004142:	f04f 0200 	mov.w	r2, #0
 8004146:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800414a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800414e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004152:	4689      	mov	r9, r1
 8004154:	4692      	mov	sl, r2
 8004156:	eb19 0005 	adds.w	r0, r9, r5
 800415a:	eb4a 0106 	adc.w	r1, sl, r6
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	461d      	mov	r5, r3
 8004162:	f04f 0600 	mov.w	r6, #0
 8004166:	196b      	adds	r3, r5, r5
 8004168:	eb46 0406 	adc.w	r4, r6, r6
 800416c:	461a      	mov	r2, r3
 800416e:	4623      	mov	r3, r4
 8004170:	f7fc fd1a 	bl	8000ba8 <__aeabi_uldivmod>
 8004174:	4603      	mov	r3, r0
 8004176:	460c      	mov	r4, r1
 8004178:	461a      	mov	r2, r3
 800417a:	4b9a      	ldr	r3, [pc, #616]	; (80043e4 <LL_USART_SetBaudRate+0x34c>)
 800417c:	fba3 1302 	umull	r1, r3, r3, r2
 8004180:	095b      	lsrs	r3, r3, #5
 8004182:	2164      	movs	r1, #100	; 0x64
 8004184:	fb01 f303 	mul.w	r3, r1, r3
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	3332      	adds	r3, #50	; 0x32
 800418e:	4a95      	ldr	r2, [pc, #596]	; (80043e4 <LL_USART_SetBaudRate+0x34c>)
 8004190:	fba2 2303 	umull	r2, r3, r2, r3
 8004194:	095b      	lsrs	r3, r3, #5
 8004196:	b29b      	uxth	r3, r3
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	b29b      	uxth	r3, r3
 800419c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	4443      	add	r3, r8
 80041a4:	fa1f f883 	uxth.w	r8, r3
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	461d      	mov	r5, r3
 80041ac:	f04f 0600 	mov.w	r6, #0
 80041b0:	46a9      	mov	r9, r5
 80041b2:	46b2      	mov	sl, r6
 80041b4:	eb19 0309 	adds.w	r3, r9, r9
 80041b8:	eb4a 040a 	adc.w	r4, sl, sl
 80041bc:	4699      	mov	r9, r3
 80041be:	46a2      	mov	sl, r4
 80041c0:	eb19 0905 	adds.w	r9, r9, r5
 80041c4:	eb4a 0a06 	adc.w	sl, sl, r6
 80041c8:	f04f 0100 	mov.w	r1, #0
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041dc:	4689      	mov	r9, r1
 80041de:	4692      	mov	sl, r2
 80041e0:	eb19 0005 	adds.w	r0, r9, r5
 80041e4:	eb4a 0106 	adc.w	r1, sl, r6
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	461d      	mov	r5, r3
 80041ec:	f04f 0600 	mov.w	r6, #0
 80041f0:	196b      	adds	r3, r5, r5
 80041f2:	eb46 0406 	adc.w	r4, r6, r6
 80041f6:	461a      	mov	r2, r3
 80041f8:	4623      	mov	r3, r4
 80041fa:	f7fc fcd5 	bl	8000ba8 <__aeabi_uldivmod>
 80041fe:	4603      	mov	r3, r0
 8004200:	460c      	mov	r4, r1
 8004202:	461a      	mov	r2, r3
 8004204:	4b77      	ldr	r3, [pc, #476]	; (80043e4 <LL_USART_SetBaudRate+0x34c>)
 8004206:	fba3 1302 	umull	r1, r3, r3, r2
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	2164      	movs	r1, #100	; 0x64
 800420e:	fb01 f303 	mul.w	r3, r1, r3
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	3332      	adds	r3, #50	; 0x32
 8004218:	4a72      	ldr	r2, [pc, #456]	; (80043e4 <LL_USART_SetBaudRate+0x34c>)
 800421a:	fba2 2303 	umull	r2, r3, r2, r3
 800421e:	095b      	lsrs	r3, r3, #5
 8004220:	b29b      	uxth	r3, r3
 8004222:	f003 0307 	and.w	r3, r3, #7
 8004226:	b29b      	uxth	r3, r3
 8004228:	4443      	add	r3, r8
 800422a:	b29b      	uxth	r3, r3
 800422c:	461a      	mov	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	609a      	str	r2, [r3, #8]
}
 8004232:	e0d2      	b.n	80043da <LL_USART_SetBaudRate+0x342>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	469a      	mov	sl, r3
 8004238:	f04f 0b00 	mov.w	fp, #0
 800423c:	46d0      	mov	r8, sl
 800423e:	46d9      	mov	r9, fp
 8004240:	eb18 0308 	adds.w	r3, r8, r8
 8004244:	eb49 0409 	adc.w	r4, r9, r9
 8004248:	4698      	mov	r8, r3
 800424a:	46a1      	mov	r9, r4
 800424c:	eb18 080a 	adds.w	r8, r8, sl
 8004250:	eb49 090b 	adc.w	r9, r9, fp
 8004254:	f04f 0100 	mov.w	r1, #0
 8004258:	f04f 0200 	mov.w	r2, #0
 800425c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004260:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004264:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004268:	4688      	mov	r8, r1
 800426a:	4691      	mov	r9, r2
 800426c:	eb1a 0508 	adds.w	r5, sl, r8
 8004270:	eb4b 0609 	adc.w	r6, fp, r9
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	4619      	mov	r1, r3
 8004278:	f04f 0200 	mov.w	r2, #0
 800427c:	f04f 0300 	mov.w	r3, #0
 8004280:	f04f 0400 	mov.w	r4, #0
 8004284:	0094      	lsls	r4, r2, #2
 8004286:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800428a:	008b      	lsls	r3, r1, #2
 800428c:	461a      	mov	r2, r3
 800428e:	4623      	mov	r3, r4
 8004290:	4628      	mov	r0, r5
 8004292:	4631      	mov	r1, r6
 8004294:	f7fc fc88 	bl	8000ba8 <__aeabi_uldivmod>
 8004298:	4603      	mov	r3, r0
 800429a:	460c      	mov	r4, r1
 800429c:	461a      	mov	r2, r3
 800429e:	4b51      	ldr	r3, [pc, #324]	; (80043e4 <LL_USART_SetBaudRate+0x34c>)
 80042a0:	fba3 2302 	umull	r2, r3, r3, r2
 80042a4:	095b      	lsrs	r3, r3, #5
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	011b      	lsls	r3, r3, #4
 80042aa:	fa1f f883 	uxth.w	r8, r3
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	469b      	mov	fp, r3
 80042b2:	f04f 0c00 	mov.w	ip, #0
 80042b6:	46d9      	mov	r9, fp
 80042b8:	46e2      	mov	sl, ip
 80042ba:	eb19 0309 	adds.w	r3, r9, r9
 80042be:	eb4a 040a 	adc.w	r4, sl, sl
 80042c2:	4699      	mov	r9, r3
 80042c4:	46a2      	mov	sl, r4
 80042c6:	eb19 090b 	adds.w	r9, r9, fp
 80042ca:	eb4a 0a0c 	adc.w	sl, sl, ip
 80042ce:	f04f 0100 	mov.w	r1, #0
 80042d2:	f04f 0200 	mov.w	r2, #0
 80042d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042e2:	4689      	mov	r9, r1
 80042e4:	4692      	mov	sl, r2
 80042e6:	eb1b 0509 	adds.w	r5, fp, r9
 80042ea:	eb4c 060a 	adc.w	r6, ip, sl
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	4619      	mov	r1, r3
 80042f2:	f04f 0200 	mov.w	r2, #0
 80042f6:	f04f 0300 	mov.w	r3, #0
 80042fa:	f04f 0400 	mov.w	r4, #0
 80042fe:	0094      	lsls	r4, r2, #2
 8004300:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004304:	008b      	lsls	r3, r1, #2
 8004306:	461a      	mov	r2, r3
 8004308:	4623      	mov	r3, r4
 800430a:	4628      	mov	r0, r5
 800430c:	4631      	mov	r1, r6
 800430e:	f7fc fc4b 	bl	8000ba8 <__aeabi_uldivmod>
 8004312:	4603      	mov	r3, r0
 8004314:	460c      	mov	r4, r1
 8004316:	461a      	mov	r2, r3
 8004318:	4b32      	ldr	r3, [pc, #200]	; (80043e4 <LL_USART_SetBaudRate+0x34c>)
 800431a:	fba3 1302 	umull	r1, r3, r3, r2
 800431e:	095b      	lsrs	r3, r3, #5
 8004320:	2164      	movs	r1, #100	; 0x64
 8004322:	fb01 f303 	mul.w	r3, r1, r3
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	3332      	adds	r3, #50	; 0x32
 800432c:	4a2d      	ldr	r2, [pc, #180]	; (80043e4 <LL_USART_SetBaudRate+0x34c>)
 800432e:	fba2 2303 	umull	r2, r3, r2, r3
 8004332:	095b      	lsrs	r3, r3, #5
 8004334:	b29b      	uxth	r3, r3
 8004336:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800433a:	b29b      	uxth	r3, r3
 800433c:	4443      	add	r3, r8
 800433e:	fa1f f883 	uxth.w	r8, r3
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	469b      	mov	fp, r3
 8004346:	f04f 0c00 	mov.w	ip, #0
 800434a:	46d9      	mov	r9, fp
 800434c:	46e2      	mov	sl, ip
 800434e:	eb19 0309 	adds.w	r3, r9, r9
 8004352:	eb4a 040a 	adc.w	r4, sl, sl
 8004356:	4699      	mov	r9, r3
 8004358:	46a2      	mov	sl, r4
 800435a:	eb19 090b 	adds.w	r9, r9, fp
 800435e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004362:	f04f 0100 	mov.w	r1, #0
 8004366:	f04f 0200 	mov.w	r2, #0
 800436a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800436e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004372:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004376:	4689      	mov	r9, r1
 8004378:	4692      	mov	sl, r2
 800437a:	eb1b 0509 	adds.w	r5, fp, r9
 800437e:	eb4c 060a 	adc.w	r6, ip, sl
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	4619      	mov	r1, r3
 8004386:	f04f 0200 	mov.w	r2, #0
 800438a:	f04f 0300 	mov.w	r3, #0
 800438e:	f04f 0400 	mov.w	r4, #0
 8004392:	0094      	lsls	r4, r2, #2
 8004394:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004398:	008b      	lsls	r3, r1, #2
 800439a:	461a      	mov	r2, r3
 800439c:	4623      	mov	r3, r4
 800439e:	4628      	mov	r0, r5
 80043a0:	4631      	mov	r1, r6
 80043a2:	f7fc fc01 	bl	8000ba8 <__aeabi_uldivmod>
 80043a6:	4603      	mov	r3, r0
 80043a8:	460c      	mov	r4, r1
 80043aa:	461a      	mov	r2, r3
 80043ac:	4b0d      	ldr	r3, [pc, #52]	; (80043e4 <LL_USART_SetBaudRate+0x34c>)
 80043ae:	fba3 1302 	umull	r1, r3, r3, r2
 80043b2:	095b      	lsrs	r3, r3, #5
 80043b4:	2164      	movs	r1, #100	; 0x64
 80043b6:	fb01 f303 	mul.w	r3, r1, r3
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	011b      	lsls	r3, r3, #4
 80043be:	3332      	adds	r3, #50	; 0x32
 80043c0:	4a08      	ldr	r2, [pc, #32]	; (80043e4 <LL_USART_SetBaudRate+0x34c>)
 80043c2:	fba2 2303 	umull	r2, r3, r2, r3
 80043c6:	095b      	lsrs	r3, r3, #5
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	f003 030f 	and.w	r3, r3, #15
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	4443      	add	r3, r8
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	461a      	mov	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	609a      	str	r2, [r3, #8]
}
 80043da:	bf00      	nop
 80043dc:	3714      	adds	r7, #20
 80043de:	46bd      	mov	sp, r7
 80043e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043e4:	51eb851f 	.word	0x51eb851f

080043e8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b088      	sub	sp, #32
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80043f6:	2300      	movs	r3, #0
 80043f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7ff fe12 	bl	8004024 <LL_USART_IsEnabled>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d15e      	bne.n	80044c4 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800440e:	f023 030c 	bic.w	r3, r3, #12
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	6851      	ldr	r1, [r2, #4]
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	68d2      	ldr	r2, [r2, #12]
 800441a:	4311      	orrs	r1, r2
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	6912      	ldr	r2, [r2, #16]
 8004420:	4311      	orrs	r1, r2
 8004422:	683a      	ldr	r2, [r7, #0]
 8004424:	6992      	ldr	r2, [r2, #24]
 8004426:	430a      	orrs	r2, r1
 8004428:	431a      	orrs	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	4619      	mov	r1, r3
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f7ff fe09 	bl	800404c <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	4619      	mov	r1, r3
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f7ff fe16 	bl	8004072 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004446:	f107 0308 	add.w	r3, r7, #8
 800444a:	4618      	mov	r0, r3
 800444c:	f7ff f9c4 	bl	80037d8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a1f      	ldr	r2, [pc, #124]	; (80044d0 <LL_USART_Init+0xe8>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d102      	bne.n	800445e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	61bb      	str	r3, [r7, #24]
 800445c:	e021      	b.n	80044a2 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a1c      	ldr	r2, [pc, #112]	; (80044d4 <LL_USART_Init+0xec>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d102      	bne.n	800446c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	61bb      	str	r3, [r7, #24]
 800446a:	e01a      	b.n	80044a2 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a1a      	ldr	r2, [pc, #104]	; (80044d8 <LL_USART_Init+0xf0>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d102      	bne.n	800447a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	61bb      	str	r3, [r7, #24]
 8004478:	e013      	b.n	80044a2 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a17      	ldr	r2, [pc, #92]	; (80044dc <LL_USART_Init+0xf4>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d102      	bne.n	8004488 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	61bb      	str	r3, [r7, #24]
 8004486:	e00c      	b.n	80044a2 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a15      	ldr	r2, [pc, #84]	; (80044e0 <LL_USART_Init+0xf8>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d102      	bne.n	8004496 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	61bb      	str	r3, [r7, #24]
 8004494:	e005      	b.n	80044a2 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a12      	ldr	r2, [pc, #72]	; (80044e4 <LL_USART_Init+0xfc>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d101      	bne.n	80044a2 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00d      	beq.n	80044c4 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d009      	beq.n	80044c4 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 80044b0:	2300      	movs	r3, #0
 80044b2:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	699a      	ldr	r2, [r3, #24]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	69b9      	ldr	r1, [r7, #24]
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7ff fdea 	bl	8004098 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80044c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3720      	adds	r7, #32
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	40011000 	.word	0x40011000
 80044d4:	40004400 	.word	0x40004400
 80044d8:	40004800 	.word	0x40004800
 80044dc:	40011400 	.word	0x40011400
 80044e0:	40004c00 	.word	0x40004c00
 80044e4:	40005000 	.word	0x40005000

080044e8 <__errno>:
 80044e8:	4b01      	ldr	r3, [pc, #4]	; (80044f0 <__errno+0x8>)
 80044ea:	6818      	ldr	r0, [r3, #0]
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	2000000c 	.word	0x2000000c

080044f4 <__libc_init_array>:
 80044f4:	b570      	push	{r4, r5, r6, lr}
 80044f6:	4e0d      	ldr	r6, [pc, #52]	; (800452c <__libc_init_array+0x38>)
 80044f8:	4c0d      	ldr	r4, [pc, #52]	; (8004530 <__libc_init_array+0x3c>)
 80044fa:	1ba4      	subs	r4, r4, r6
 80044fc:	10a4      	asrs	r4, r4, #2
 80044fe:	2500      	movs	r5, #0
 8004500:	42a5      	cmp	r5, r4
 8004502:	d109      	bne.n	8004518 <__libc_init_array+0x24>
 8004504:	4e0b      	ldr	r6, [pc, #44]	; (8004534 <__libc_init_array+0x40>)
 8004506:	4c0c      	ldr	r4, [pc, #48]	; (8004538 <__libc_init_array+0x44>)
 8004508:	f002 fbac 	bl	8006c64 <_init>
 800450c:	1ba4      	subs	r4, r4, r6
 800450e:	10a4      	asrs	r4, r4, #2
 8004510:	2500      	movs	r5, #0
 8004512:	42a5      	cmp	r5, r4
 8004514:	d105      	bne.n	8004522 <__libc_init_array+0x2e>
 8004516:	bd70      	pop	{r4, r5, r6, pc}
 8004518:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800451c:	4798      	blx	r3
 800451e:	3501      	adds	r5, #1
 8004520:	e7ee      	b.n	8004500 <__libc_init_array+0xc>
 8004522:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004526:	4798      	blx	r3
 8004528:	3501      	adds	r5, #1
 800452a:	e7f2      	b.n	8004512 <__libc_init_array+0x1e>
 800452c:	08007090 	.word	0x08007090
 8004530:	08007090 	.word	0x08007090
 8004534:	08007090 	.word	0x08007090
 8004538:	08007094 	.word	0x08007094

0800453c <memset>:
 800453c:	4402      	add	r2, r0
 800453e:	4603      	mov	r3, r0
 8004540:	4293      	cmp	r3, r2
 8004542:	d100      	bne.n	8004546 <memset+0xa>
 8004544:	4770      	bx	lr
 8004546:	f803 1b01 	strb.w	r1, [r3], #1
 800454a:	e7f9      	b.n	8004540 <memset+0x4>

0800454c <__cvt>:
 800454c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004550:	ec55 4b10 	vmov	r4, r5, d0
 8004554:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004556:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800455a:	2d00      	cmp	r5, #0
 800455c:	460e      	mov	r6, r1
 800455e:	4691      	mov	r9, r2
 8004560:	4619      	mov	r1, r3
 8004562:	bfb8      	it	lt
 8004564:	4622      	movlt	r2, r4
 8004566:	462b      	mov	r3, r5
 8004568:	f027 0720 	bic.w	r7, r7, #32
 800456c:	bfbb      	ittet	lt
 800456e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004572:	461d      	movlt	r5, r3
 8004574:	2300      	movge	r3, #0
 8004576:	232d      	movlt	r3, #45	; 0x2d
 8004578:	bfb8      	it	lt
 800457a:	4614      	movlt	r4, r2
 800457c:	2f46      	cmp	r7, #70	; 0x46
 800457e:	700b      	strb	r3, [r1, #0]
 8004580:	d004      	beq.n	800458c <__cvt+0x40>
 8004582:	2f45      	cmp	r7, #69	; 0x45
 8004584:	d100      	bne.n	8004588 <__cvt+0x3c>
 8004586:	3601      	adds	r6, #1
 8004588:	2102      	movs	r1, #2
 800458a:	e000      	b.n	800458e <__cvt+0x42>
 800458c:	2103      	movs	r1, #3
 800458e:	ab03      	add	r3, sp, #12
 8004590:	9301      	str	r3, [sp, #4]
 8004592:	ab02      	add	r3, sp, #8
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	4632      	mov	r2, r6
 8004598:	4653      	mov	r3, sl
 800459a:	ec45 4b10 	vmov	d0, r4, r5
 800459e:	f000 fdfb 	bl	8005198 <_dtoa_r>
 80045a2:	2f47      	cmp	r7, #71	; 0x47
 80045a4:	4680      	mov	r8, r0
 80045a6:	d102      	bne.n	80045ae <__cvt+0x62>
 80045a8:	f019 0f01 	tst.w	r9, #1
 80045ac:	d026      	beq.n	80045fc <__cvt+0xb0>
 80045ae:	2f46      	cmp	r7, #70	; 0x46
 80045b0:	eb08 0906 	add.w	r9, r8, r6
 80045b4:	d111      	bne.n	80045da <__cvt+0x8e>
 80045b6:	f898 3000 	ldrb.w	r3, [r8]
 80045ba:	2b30      	cmp	r3, #48	; 0x30
 80045bc:	d10a      	bne.n	80045d4 <__cvt+0x88>
 80045be:	2200      	movs	r2, #0
 80045c0:	2300      	movs	r3, #0
 80045c2:	4620      	mov	r0, r4
 80045c4:	4629      	mov	r1, r5
 80045c6:	f7fc fa7f 	bl	8000ac8 <__aeabi_dcmpeq>
 80045ca:	b918      	cbnz	r0, 80045d4 <__cvt+0x88>
 80045cc:	f1c6 0601 	rsb	r6, r6, #1
 80045d0:	f8ca 6000 	str.w	r6, [sl]
 80045d4:	f8da 3000 	ldr.w	r3, [sl]
 80045d8:	4499      	add	r9, r3
 80045da:	2200      	movs	r2, #0
 80045dc:	2300      	movs	r3, #0
 80045de:	4620      	mov	r0, r4
 80045e0:	4629      	mov	r1, r5
 80045e2:	f7fc fa71 	bl	8000ac8 <__aeabi_dcmpeq>
 80045e6:	b938      	cbnz	r0, 80045f8 <__cvt+0xac>
 80045e8:	2230      	movs	r2, #48	; 0x30
 80045ea:	9b03      	ldr	r3, [sp, #12]
 80045ec:	454b      	cmp	r3, r9
 80045ee:	d205      	bcs.n	80045fc <__cvt+0xb0>
 80045f0:	1c59      	adds	r1, r3, #1
 80045f2:	9103      	str	r1, [sp, #12]
 80045f4:	701a      	strb	r2, [r3, #0]
 80045f6:	e7f8      	b.n	80045ea <__cvt+0x9e>
 80045f8:	f8cd 900c 	str.w	r9, [sp, #12]
 80045fc:	9b03      	ldr	r3, [sp, #12]
 80045fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004600:	eba3 0308 	sub.w	r3, r3, r8
 8004604:	4640      	mov	r0, r8
 8004606:	6013      	str	r3, [r2, #0]
 8004608:	b004      	add	sp, #16
 800460a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800460e <__exponent>:
 800460e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004610:	2900      	cmp	r1, #0
 8004612:	4604      	mov	r4, r0
 8004614:	bfba      	itte	lt
 8004616:	4249      	neglt	r1, r1
 8004618:	232d      	movlt	r3, #45	; 0x2d
 800461a:	232b      	movge	r3, #43	; 0x2b
 800461c:	2909      	cmp	r1, #9
 800461e:	f804 2b02 	strb.w	r2, [r4], #2
 8004622:	7043      	strb	r3, [r0, #1]
 8004624:	dd20      	ble.n	8004668 <__exponent+0x5a>
 8004626:	f10d 0307 	add.w	r3, sp, #7
 800462a:	461f      	mov	r7, r3
 800462c:	260a      	movs	r6, #10
 800462e:	fb91 f5f6 	sdiv	r5, r1, r6
 8004632:	fb06 1115 	mls	r1, r6, r5, r1
 8004636:	3130      	adds	r1, #48	; 0x30
 8004638:	2d09      	cmp	r5, #9
 800463a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800463e:	f103 32ff 	add.w	r2, r3, #4294967295
 8004642:	4629      	mov	r1, r5
 8004644:	dc09      	bgt.n	800465a <__exponent+0x4c>
 8004646:	3130      	adds	r1, #48	; 0x30
 8004648:	3b02      	subs	r3, #2
 800464a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800464e:	42bb      	cmp	r3, r7
 8004650:	4622      	mov	r2, r4
 8004652:	d304      	bcc.n	800465e <__exponent+0x50>
 8004654:	1a10      	subs	r0, r2, r0
 8004656:	b003      	add	sp, #12
 8004658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800465a:	4613      	mov	r3, r2
 800465c:	e7e7      	b.n	800462e <__exponent+0x20>
 800465e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004662:	f804 2b01 	strb.w	r2, [r4], #1
 8004666:	e7f2      	b.n	800464e <__exponent+0x40>
 8004668:	2330      	movs	r3, #48	; 0x30
 800466a:	4419      	add	r1, r3
 800466c:	7083      	strb	r3, [r0, #2]
 800466e:	1d02      	adds	r2, r0, #4
 8004670:	70c1      	strb	r1, [r0, #3]
 8004672:	e7ef      	b.n	8004654 <__exponent+0x46>

08004674 <_printf_float>:
 8004674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004678:	b08d      	sub	sp, #52	; 0x34
 800467a:	460c      	mov	r4, r1
 800467c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004680:	4616      	mov	r6, r2
 8004682:	461f      	mov	r7, r3
 8004684:	4605      	mov	r5, r0
 8004686:	f001 fcb9 	bl	8005ffc <_localeconv_r>
 800468a:	6803      	ldr	r3, [r0, #0]
 800468c:	9304      	str	r3, [sp, #16]
 800468e:	4618      	mov	r0, r3
 8004690:	f7fb fd9e 	bl	80001d0 <strlen>
 8004694:	2300      	movs	r3, #0
 8004696:	930a      	str	r3, [sp, #40]	; 0x28
 8004698:	f8d8 3000 	ldr.w	r3, [r8]
 800469c:	9005      	str	r0, [sp, #20]
 800469e:	3307      	adds	r3, #7
 80046a0:	f023 0307 	bic.w	r3, r3, #7
 80046a4:	f103 0208 	add.w	r2, r3, #8
 80046a8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80046ac:	f8d4 b000 	ldr.w	fp, [r4]
 80046b0:	f8c8 2000 	str.w	r2, [r8]
 80046b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80046bc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80046c0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80046c4:	9307      	str	r3, [sp, #28]
 80046c6:	f8cd 8018 	str.w	r8, [sp, #24]
 80046ca:	f04f 32ff 	mov.w	r2, #4294967295
 80046ce:	4ba7      	ldr	r3, [pc, #668]	; (800496c <_printf_float+0x2f8>)
 80046d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80046d4:	f7fc fa2a 	bl	8000b2c <__aeabi_dcmpun>
 80046d8:	bb70      	cbnz	r0, 8004738 <_printf_float+0xc4>
 80046da:	f04f 32ff 	mov.w	r2, #4294967295
 80046de:	4ba3      	ldr	r3, [pc, #652]	; (800496c <_printf_float+0x2f8>)
 80046e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80046e4:	f7fc fa04 	bl	8000af0 <__aeabi_dcmple>
 80046e8:	bb30      	cbnz	r0, 8004738 <_printf_float+0xc4>
 80046ea:	2200      	movs	r2, #0
 80046ec:	2300      	movs	r3, #0
 80046ee:	4640      	mov	r0, r8
 80046f0:	4649      	mov	r1, r9
 80046f2:	f7fc f9f3 	bl	8000adc <__aeabi_dcmplt>
 80046f6:	b110      	cbz	r0, 80046fe <_printf_float+0x8a>
 80046f8:	232d      	movs	r3, #45	; 0x2d
 80046fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046fe:	4a9c      	ldr	r2, [pc, #624]	; (8004970 <_printf_float+0x2fc>)
 8004700:	4b9c      	ldr	r3, [pc, #624]	; (8004974 <_printf_float+0x300>)
 8004702:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004706:	bf8c      	ite	hi
 8004708:	4690      	movhi	r8, r2
 800470a:	4698      	movls	r8, r3
 800470c:	2303      	movs	r3, #3
 800470e:	f02b 0204 	bic.w	r2, fp, #4
 8004712:	6123      	str	r3, [r4, #16]
 8004714:	6022      	str	r2, [r4, #0]
 8004716:	f04f 0900 	mov.w	r9, #0
 800471a:	9700      	str	r7, [sp, #0]
 800471c:	4633      	mov	r3, r6
 800471e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004720:	4621      	mov	r1, r4
 8004722:	4628      	mov	r0, r5
 8004724:	f000 f9e6 	bl	8004af4 <_printf_common>
 8004728:	3001      	adds	r0, #1
 800472a:	f040 808d 	bne.w	8004848 <_printf_float+0x1d4>
 800472e:	f04f 30ff 	mov.w	r0, #4294967295
 8004732:	b00d      	add	sp, #52	; 0x34
 8004734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004738:	4642      	mov	r2, r8
 800473a:	464b      	mov	r3, r9
 800473c:	4640      	mov	r0, r8
 800473e:	4649      	mov	r1, r9
 8004740:	f7fc f9f4 	bl	8000b2c <__aeabi_dcmpun>
 8004744:	b110      	cbz	r0, 800474c <_printf_float+0xd8>
 8004746:	4a8c      	ldr	r2, [pc, #560]	; (8004978 <_printf_float+0x304>)
 8004748:	4b8c      	ldr	r3, [pc, #560]	; (800497c <_printf_float+0x308>)
 800474a:	e7da      	b.n	8004702 <_printf_float+0x8e>
 800474c:	6861      	ldr	r1, [r4, #4]
 800474e:	1c4b      	adds	r3, r1, #1
 8004750:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004754:	a80a      	add	r0, sp, #40	; 0x28
 8004756:	d13e      	bne.n	80047d6 <_printf_float+0x162>
 8004758:	2306      	movs	r3, #6
 800475a:	6063      	str	r3, [r4, #4]
 800475c:	2300      	movs	r3, #0
 800475e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004762:	ab09      	add	r3, sp, #36	; 0x24
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	ec49 8b10 	vmov	d0, r8, r9
 800476a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800476e:	6022      	str	r2, [r4, #0]
 8004770:	f8cd a004 	str.w	sl, [sp, #4]
 8004774:	6861      	ldr	r1, [r4, #4]
 8004776:	4628      	mov	r0, r5
 8004778:	f7ff fee8 	bl	800454c <__cvt>
 800477c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004780:	2b47      	cmp	r3, #71	; 0x47
 8004782:	4680      	mov	r8, r0
 8004784:	d109      	bne.n	800479a <_printf_float+0x126>
 8004786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004788:	1cd8      	adds	r0, r3, #3
 800478a:	db02      	blt.n	8004792 <_printf_float+0x11e>
 800478c:	6862      	ldr	r2, [r4, #4]
 800478e:	4293      	cmp	r3, r2
 8004790:	dd47      	ble.n	8004822 <_printf_float+0x1ae>
 8004792:	f1aa 0a02 	sub.w	sl, sl, #2
 8004796:	fa5f fa8a 	uxtb.w	sl, sl
 800479a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800479e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80047a0:	d824      	bhi.n	80047ec <_printf_float+0x178>
 80047a2:	3901      	subs	r1, #1
 80047a4:	4652      	mov	r2, sl
 80047a6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80047aa:	9109      	str	r1, [sp, #36]	; 0x24
 80047ac:	f7ff ff2f 	bl	800460e <__exponent>
 80047b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80047b2:	1813      	adds	r3, r2, r0
 80047b4:	2a01      	cmp	r2, #1
 80047b6:	4681      	mov	r9, r0
 80047b8:	6123      	str	r3, [r4, #16]
 80047ba:	dc02      	bgt.n	80047c2 <_printf_float+0x14e>
 80047bc:	6822      	ldr	r2, [r4, #0]
 80047be:	07d1      	lsls	r1, r2, #31
 80047c0:	d501      	bpl.n	80047c6 <_printf_float+0x152>
 80047c2:	3301      	adds	r3, #1
 80047c4:	6123      	str	r3, [r4, #16]
 80047c6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0a5      	beq.n	800471a <_printf_float+0xa6>
 80047ce:	232d      	movs	r3, #45	; 0x2d
 80047d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047d4:	e7a1      	b.n	800471a <_printf_float+0xa6>
 80047d6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80047da:	f000 8177 	beq.w	8004acc <_printf_float+0x458>
 80047de:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80047e2:	d1bb      	bne.n	800475c <_printf_float+0xe8>
 80047e4:	2900      	cmp	r1, #0
 80047e6:	d1b9      	bne.n	800475c <_printf_float+0xe8>
 80047e8:	2301      	movs	r3, #1
 80047ea:	e7b6      	b.n	800475a <_printf_float+0xe6>
 80047ec:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80047f0:	d119      	bne.n	8004826 <_printf_float+0x1b2>
 80047f2:	2900      	cmp	r1, #0
 80047f4:	6863      	ldr	r3, [r4, #4]
 80047f6:	dd0c      	ble.n	8004812 <_printf_float+0x19e>
 80047f8:	6121      	str	r1, [r4, #16]
 80047fa:	b913      	cbnz	r3, 8004802 <_printf_float+0x18e>
 80047fc:	6822      	ldr	r2, [r4, #0]
 80047fe:	07d2      	lsls	r2, r2, #31
 8004800:	d502      	bpl.n	8004808 <_printf_float+0x194>
 8004802:	3301      	adds	r3, #1
 8004804:	440b      	add	r3, r1
 8004806:	6123      	str	r3, [r4, #16]
 8004808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800480a:	65a3      	str	r3, [r4, #88]	; 0x58
 800480c:	f04f 0900 	mov.w	r9, #0
 8004810:	e7d9      	b.n	80047c6 <_printf_float+0x152>
 8004812:	b913      	cbnz	r3, 800481a <_printf_float+0x1a6>
 8004814:	6822      	ldr	r2, [r4, #0]
 8004816:	07d0      	lsls	r0, r2, #31
 8004818:	d501      	bpl.n	800481e <_printf_float+0x1aa>
 800481a:	3302      	adds	r3, #2
 800481c:	e7f3      	b.n	8004806 <_printf_float+0x192>
 800481e:	2301      	movs	r3, #1
 8004820:	e7f1      	b.n	8004806 <_printf_float+0x192>
 8004822:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004826:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800482a:	4293      	cmp	r3, r2
 800482c:	db05      	blt.n	800483a <_printf_float+0x1c6>
 800482e:	6822      	ldr	r2, [r4, #0]
 8004830:	6123      	str	r3, [r4, #16]
 8004832:	07d1      	lsls	r1, r2, #31
 8004834:	d5e8      	bpl.n	8004808 <_printf_float+0x194>
 8004836:	3301      	adds	r3, #1
 8004838:	e7e5      	b.n	8004806 <_printf_float+0x192>
 800483a:	2b00      	cmp	r3, #0
 800483c:	bfd4      	ite	le
 800483e:	f1c3 0302 	rsble	r3, r3, #2
 8004842:	2301      	movgt	r3, #1
 8004844:	4413      	add	r3, r2
 8004846:	e7de      	b.n	8004806 <_printf_float+0x192>
 8004848:	6823      	ldr	r3, [r4, #0]
 800484a:	055a      	lsls	r2, r3, #21
 800484c:	d407      	bmi.n	800485e <_printf_float+0x1ea>
 800484e:	6923      	ldr	r3, [r4, #16]
 8004850:	4642      	mov	r2, r8
 8004852:	4631      	mov	r1, r6
 8004854:	4628      	mov	r0, r5
 8004856:	47b8      	blx	r7
 8004858:	3001      	adds	r0, #1
 800485a:	d12b      	bne.n	80048b4 <_printf_float+0x240>
 800485c:	e767      	b.n	800472e <_printf_float+0xba>
 800485e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004862:	f240 80dc 	bls.w	8004a1e <_printf_float+0x3aa>
 8004866:	2200      	movs	r2, #0
 8004868:	2300      	movs	r3, #0
 800486a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800486e:	f7fc f92b 	bl	8000ac8 <__aeabi_dcmpeq>
 8004872:	2800      	cmp	r0, #0
 8004874:	d033      	beq.n	80048de <_printf_float+0x26a>
 8004876:	2301      	movs	r3, #1
 8004878:	4a41      	ldr	r2, [pc, #260]	; (8004980 <_printf_float+0x30c>)
 800487a:	4631      	mov	r1, r6
 800487c:	4628      	mov	r0, r5
 800487e:	47b8      	blx	r7
 8004880:	3001      	adds	r0, #1
 8004882:	f43f af54 	beq.w	800472e <_printf_float+0xba>
 8004886:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800488a:	429a      	cmp	r2, r3
 800488c:	db02      	blt.n	8004894 <_printf_float+0x220>
 800488e:	6823      	ldr	r3, [r4, #0]
 8004890:	07d8      	lsls	r0, r3, #31
 8004892:	d50f      	bpl.n	80048b4 <_printf_float+0x240>
 8004894:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004898:	4631      	mov	r1, r6
 800489a:	4628      	mov	r0, r5
 800489c:	47b8      	blx	r7
 800489e:	3001      	adds	r0, #1
 80048a0:	f43f af45 	beq.w	800472e <_printf_float+0xba>
 80048a4:	f04f 0800 	mov.w	r8, #0
 80048a8:	f104 091a 	add.w	r9, r4, #26
 80048ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048ae:	3b01      	subs	r3, #1
 80048b0:	4543      	cmp	r3, r8
 80048b2:	dc09      	bgt.n	80048c8 <_printf_float+0x254>
 80048b4:	6823      	ldr	r3, [r4, #0]
 80048b6:	079b      	lsls	r3, r3, #30
 80048b8:	f100 8103 	bmi.w	8004ac2 <_printf_float+0x44e>
 80048bc:	68e0      	ldr	r0, [r4, #12]
 80048be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048c0:	4298      	cmp	r0, r3
 80048c2:	bfb8      	it	lt
 80048c4:	4618      	movlt	r0, r3
 80048c6:	e734      	b.n	8004732 <_printf_float+0xbe>
 80048c8:	2301      	movs	r3, #1
 80048ca:	464a      	mov	r2, r9
 80048cc:	4631      	mov	r1, r6
 80048ce:	4628      	mov	r0, r5
 80048d0:	47b8      	blx	r7
 80048d2:	3001      	adds	r0, #1
 80048d4:	f43f af2b 	beq.w	800472e <_printf_float+0xba>
 80048d8:	f108 0801 	add.w	r8, r8, #1
 80048dc:	e7e6      	b.n	80048ac <_printf_float+0x238>
 80048de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	dc2b      	bgt.n	800493c <_printf_float+0x2c8>
 80048e4:	2301      	movs	r3, #1
 80048e6:	4a26      	ldr	r2, [pc, #152]	; (8004980 <_printf_float+0x30c>)
 80048e8:	4631      	mov	r1, r6
 80048ea:	4628      	mov	r0, r5
 80048ec:	47b8      	blx	r7
 80048ee:	3001      	adds	r0, #1
 80048f0:	f43f af1d 	beq.w	800472e <_printf_float+0xba>
 80048f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048f6:	b923      	cbnz	r3, 8004902 <_printf_float+0x28e>
 80048f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048fa:	b913      	cbnz	r3, 8004902 <_printf_float+0x28e>
 80048fc:	6823      	ldr	r3, [r4, #0]
 80048fe:	07d9      	lsls	r1, r3, #31
 8004900:	d5d8      	bpl.n	80048b4 <_printf_float+0x240>
 8004902:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004906:	4631      	mov	r1, r6
 8004908:	4628      	mov	r0, r5
 800490a:	47b8      	blx	r7
 800490c:	3001      	adds	r0, #1
 800490e:	f43f af0e 	beq.w	800472e <_printf_float+0xba>
 8004912:	f04f 0900 	mov.w	r9, #0
 8004916:	f104 0a1a 	add.w	sl, r4, #26
 800491a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800491c:	425b      	negs	r3, r3
 800491e:	454b      	cmp	r3, r9
 8004920:	dc01      	bgt.n	8004926 <_printf_float+0x2b2>
 8004922:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004924:	e794      	b.n	8004850 <_printf_float+0x1dc>
 8004926:	2301      	movs	r3, #1
 8004928:	4652      	mov	r2, sl
 800492a:	4631      	mov	r1, r6
 800492c:	4628      	mov	r0, r5
 800492e:	47b8      	blx	r7
 8004930:	3001      	adds	r0, #1
 8004932:	f43f aefc 	beq.w	800472e <_printf_float+0xba>
 8004936:	f109 0901 	add.w	r9, r9, #1
 800493a:	e7ee      	b.n	800491a <_printf_float+0x2a6>
 800493c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800493e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004940:	429a      	cmp	r2, r3
 8004942:	bfa8      	it	ge
 8004944:	461a      	movge	r2, r3
 8004946:	2a00      	cmp	r2, #0
 8004948:	4691      	mov	r9, r2
 800494a:	dd07      	ble.n	800495c <_printf_float+0x2e8>
 800494c:	4613      	mov	r3, r2
 800494e:	4631      	mov	r1, r6
 8004950:	4642      	mov	r2, r8
 8004952:	4628      	mov	r0, r5
 8004954:	47b8      	blx	r7
 8004956:	3001      	adds	r0, #1
 8004958:	f43f aee9 	beq.w	800472e <_printf_float+0xba>
 800495c:	f104 031a 	add.w	r3, r4, #26
 8004960:	f04f 0b00 	mov.w	fp, #0
 8004964:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004968:	9306      	str	r3, [sp, #24]
 800496a:	e015      	b.n	8004998 <_printf_float+0x324>
 800496c:	7fefffff 	.word	0x7fefffff
 8004970:	08006dd0 	.word	0x08006dd0
 8004974:	08006dcc 	.word	0x08006dcc
 8004978:	08006dd8 	.word	0x08006dd8
 800497c:	08006dd4 	.word	0x08006dd4
 8004980:	08006ddc 	.word	0x08006ddc
 8004984:	2301      	movs	r3, #1
 8004986:	9a06      	ldr	r2, [sp, #24]
 8004988:	4631      	mov	r1, r6
 800498a:	4628      	mov	r0, r5
 800498c:	47b8      	blx	r7
 800498e:	3001      	adds	r0, #1
 8004990:	f43f aecd 	beq.w	800472e <_printf_float+0xba>
 8004994:	f10b 0b01 	add.w	fp, fp, #1
 8004998:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800499c:	ebaa 0309 	sub.w	r3, sl, r9
 80049a0:	455b      	cmp	r3, fp
 80049a2:	dcef      	bgt.n	8004984 <_printf_float+0x310>
 80049a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049a8:	429a      	cmp	r2, r3
 80049aa:	44d0      	add	r8, sl
 80049ac:	db15      	blt.n	80049da <_printf_float+0x366>
 80049ae:	6823      	ldr	r3, [r4, #0]
 80049b0:	07da      	lsls	r2, r3, #31
 80049b2:	d412      	bmi.n	80049da <_printf_float+0x366>
 80049b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80049b8:	eba3 020a 	sub.w	r2, r3, sl
 80049bc:	eba3 0a01 	sub.w	sl, r3, r1
 80049c0:	4592      	cmp	sl, r2
 80049c2:	bfa8      	it	ge
 80049c4:	4692      	movge	sl, r2
 80049c6:	f1ba 0f00 	cmp.w	sl, #0
 80049ca:	dc0e      	bgt.n	80049ea <_printf_float+0x376>
 80049cc:	f04f 0800 	mov.w	r8, #0
 80049d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80049d4:	f104 091a 	add.w	r9, r4, #26
 80049d8:	e019      	b.n	8004a0e <_printf_float+0x39a>
 80049da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049de:	4631      	mov	r1, r6
 80049e0:	4628      	mov	r0, r5
 80049e2:	47b8      	blx	r7
 80049e4:	3001      	adds	r0, #1
 80049e6:	d1e5      	bne.n	80049b4 <_printf_float+0x340>
 80049e8:	e6a1      	b.n	800472e <_printf_float+0xba>
 80049ea:	4653      	mov	r3, sl
 80049ec:	4642      	mov	r2, r8
 80049ee:	4631      	mov	r1, r6
 80049f0:	4628      	mov	r0, r5
 80049f2:	47b8      	blx	r7
 80049f4:	3001      	adds	r0, #1
 80049f6:	d1e9      	bne.n	80049cc <_printf_float+0x358>
 80049f8:	e699      	b.n	800472e <_printf_float+0xba>
 80049fa:	2301      	movs	r3, #1
 80049fc:	464a      	mov	r2, r9
 80049fe:	4631      	mov	r1, r6
 8004a00:	4628      	mov	r0, r5
 8004a02:	47b8      	blx	r7
 8004a04:	3001      	adds	r0, #1
 8004a06:	f43f ae92 	beq.w	800472e <_printf_float+0xba>
 8004a0a:	f108 0801 	add.w	r8, r8, #1
 8004a0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a12:	1a9b      	subs	r3, r3, r2
 8004a14:	eba3 030a 	sub.w	r3, r3, sl
 8004a18:	4543      	cmp	r3, r8
 8004a1a:	dcee      	bgt.n	80049fa <_printf_float+0x386>
 8004a1c:	e74a      	b.n	80048b4 <_printf_float+0x240>
 8004a1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a20:	2a01      	cmp	r2, #1
 8004a22:	dc01      	bgt.n	8004a28 <_printf_float+0x3b4>
 8004a24:	07db      	lsls	r3, r3, #31
 8004a26:	d53a      	bpl.n	8004a9e <_printf_float+0x42a>
 8004a28:	2301      	movs	r3, #1
 8004a2a:	4642      	mov	r2, r8
 8004a2c:	4631      	mov	r1, r6
 8004a2e:	4628      	mov	r0, r5
 8004a30:	47b8      	blx	r7
 8004a32:	3001      	adds	r0, #1
 8004a34:	f43f ae7b 	beq.w	800472e <_printf_float+0xba>
 8004a38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a3c:	4631      	mov	r1, r6
 8004a3e:	4628      	mov	r0, r5
 8004a40:	47b8      	blx	r7
 8004a42:	3001      	adds	r0, #1
 8004a44:	f108 0801 	add.w	r8, r8, #1
 8004a48:	f43f ae71 	beq.w	800472e <_printf_float+0xba>
 8004a4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f103 3aff 	add.w	sl, r3, #4294967295
 8004a54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a58:	2300      	movs	r3, #0
 8004a5a:	f7fc f835 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a5e:	b9c8      	cbnz	r0, 8004a94 <_printf_float+0x420>
 8004a60:	4653      	mov	r3, sl
 8004a62:	4642      	mov	r2, r8
 8004a64:	4631      	mov	r1, r6
 8004a66:	4628      	mov	r0, r5
 8004a68:	47b8      	blx	r7
 8004a6a:	3001      	adds	r0, #1
 8004a6c:	d10e      	bne.n	8004a8c <_printf_float+0x418>
 8004a6e:	e65e      	b.n	800472e <_printf_float+0xba>
 8004a70:	2301      	movs	r3, #1
 8004a72:	4652      	mov	r2, sl
 8004a74:	4631      	mov	r1, r6
 8004a76:	4628      	mov	r0, r5
 8004a78:	47b8      	blx	r7
 8004a7a:	3001      	adds	r0, #1
 8004a7c:	f43f ae57 	beq.w	800472e <_printf_float+0xba>
 8004a80:	f108 0801 	add.w	r8, r8, #1
 8004a84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a86:	3b01      	subs	r3, #1
 8004a88:	4543      	cmp	r3, r8
 8004a8a:	dcf1      	bgt.n	8004a70 <_printf_float+0x3fc>
 8004a8c:	464b      	mov	r3, r9
 8004a8e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004a92:	e6de      	b.n	8004852 <_printf_float+0x1de>
 8004a94:	f04f 0800 	mov.w	r8, #0
 8004a98:	f104 0a1a 	add.w	sl, r4, #26
 8004a9c:	e7f2      	b.n	8004a84 <_printf_float+0x410>
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e7df      	b.n	8004a62 <_printf_float+0x3ee>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	464a      	mov	r2, r9
 8004aa6:	4631      	mov	r1, r6
 8004aa8:	4628      	mov	r0, r5
 8004aaa:	47b8      	blx	r7
 8004aac:	3001      	adds	r0, #1
 8004aae:	f43f ae3e 	beq.w	800472e <_printf_float+0xba>
 8004ab2:	f108 0801 	add.w	r8, r8, #1
 8004ab6:	68e3      	ldr	r3, [r4, #12]
 8004ab8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004aba:	1a9b      	subs	r3, r3, r2
 8004abc:	4543      	cmp	r3, r8
 8004abe:	dcf0      	bgt.n	8004aa2 <_printf_float+0x42e>
 8004ac0:	e6fc      	b.n	80048bc <_printf_float+0x248>
 8004ac2:	f04f 0800 	mov.w	r8, #0
 8004ac6:	f104 0919 	add.w	r9, r4, #25
 8004aca:	e7f4      	b.n	8004ab6 <_printf_float+0x442>
 8004acc:	2900      	cmp	r1, #0
 8004ace:	f43f ae8b 	beq.w	80047e8 <_printf_float+0x174>
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004ad8:	ab09      	add	r3, sp, #36	; 0x24
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	ec49 8b10 	vmov	d0, r8, r9
 8004ae0:	6022      	str	r2, [r4, #0]
 8004ae2:	f8cd a004 	str.w	sl, [sp, #4]
 8004ae6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004aea:	4628      	mov	r0, r5
 8004aec:	f7ff fd2e 	bl	800454c <__cvt>
 8004af0:	4680      	mov	r8, r0
 8004af2:	e648      	b.n	8004786 <_printf_float+0x112>

08004af4 <_printf_common>:
 8004af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004af8:	4691      	mov	r9, r2
 8004afa:	461f      	mov	r7, r3
 8004afc:	688a      	ldr	r2, [r1, #8]
 8004afe:	690b      	ldr	r3, [r1, #16]
 8004b00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b04:	4293      	cmp	r3, r2
 8004b06:	bfb8      	it	lt
 8004b08:	4613      	movlt	r3, r2
 8004b0a:	f8c9 3000 	str.w	r3, [r9]
 8004b0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b12:	4606      	mov	r6, r0
 8004b14:	460c      	mov	r4, r1
 8004b16:	b112      	cbz	r2, 8004b1e <_printf_common+0x2a>
 8004b18:	3301      	adds	r3, #1
 8004b1a:	f8c9 3000 	str.w	r3, [r9]
 8004b1e:	6823      	ldr	r3, [r4, #0]
 8004b20:	0699      	lsls	r1, r3, #26
 8004b22:	bf42      	ittt	mi
 8004b24:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004b28:	3302      	addmi	r3, #2
 8004b2a:	f8c9 3000 	strmi.w	r3, [r9]
 8004b2e:	6825      	ldr	r5, [r4, #0]
 8004b30:	f015 0506 	ands.w	r5, r5, #6
 8004b34:	d107      	bne.n	8004b46 <_printf_common+0x52>
 8004b36:	f104 0a19 	add.w	sl, r4, #25
 8004b3a:	68e3      	ldr	r3, [r4, #12]
 8004b3c:	f8d9 2000 	ldr.w	r2, [r9]
 8004b40:	1a9b      	subs	r3, r3, r2
 8004b42:	42ab      	cmp	r3, r5
 8004b44:	dc28      	bgt.n	8004b98 <_printf_common+0xa4>
 8004b46:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004b4a:	6822      	ldr	r2, [r4, #0]
 8004b4c:	3300      	adds	r3, #0
 8004b4e:	bf18      	it	ne
 8004b50:	2301      	movne	r3, #1
 8004b52:	0692      	lsls	r2, r2, #26
 8004b54:	d42d      	bmi.n	8004bb2 <_printf_common+0xbe>
 8004b56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b5a:	4639      	mov	r1, r7
 8004b5c:	4630      	mov	r0, r6
 8004b5e:	47c0      	blx	r8
 8004b60:	3001      	adds	r0, #1
 8004b62:	d020      	beq.n	8004ba6 <_printf_common+0xb2>
 8004b64:	6823      	ldr	r3, [r4, #0]
 8004b66:	68e5      	ldr	r5, [r4, #12]
 8004b68:	f8d9 2000 	ldr.w	r2, [r9]
 8004b6c:	f003 0306 	and.w	r3, r3, #6
 8004b70:	2b04      	cmp	r3, #4
 8004b72:	bf08      	it	eq
 8004b74:	1aad      	subeq	r5, r5, r2
 8004b76:	68a3      	ldr	r3, [r4, #8]
 8004b78:	6922      	ldr	r2, [r4, #16]
 8004b7a:	bf0c      	ite	eq
 8004b7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b80:	2500      	movne	r5, #0
 8004b82:	4293      	cmp	r3, r2
 8004b84:	bfc4      	itt	gt
 8004b86:	1a9b      	subgt	r3, r3, r2
 8004b88:	18ed      	addgt	r5, r5, r3
 8004b8a:	f04f 0900 	mov.w	r9, #0
 8004b8e:	341a      	adds	r4, #26
 8004b90:	454d      	cmp	r5, r9
 8004b92:	d11a      	bne.n	8004bca <_printf_common+0xd6>
 8004b94:	2000      	movs	r0, #0
 8004b96:	e008      	b.n	8004baa <_printf_common+0xb6>
 8004b98:	2301      	movs	r3, #1
 8004b9a:	4652      	mov	r2, sl
 8004b9c:	4639      	mov	r1, r7
 8004b9e:	4630      	mov	r0, r6
 8004ba0:	47c0      	blx	r8
 8004ba2:	3001      	adds	r0, #1
 8004ba4:	d103      	bne.n	8004bae <_printf_common+0xba>
 8004ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8004baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bae:	3501      	adds	r5, #1
 8004bb0:	e7c3      	b.n	8004b3a <_printf_common+0x46>
 8004bb2:	18e1      	adds	r1, r4, r3
 8004bb4:	1c5a      	adds	r2, r3, #1
 8004bb6:	2030      	movs	r0, #48	; 0x30
 8004bb8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bbc:	4422      	add	r2, r4
 8004bbe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bc2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bc6:	3302      	adds	r3, #2
 8004bc8:	e7c5      	b.n	8004b56 <_printf_common+0x62>
 8004bca:	2301      	movs	r3, #1
 8004bcc:	4622      	mov	r2, r4
 8004bce:	4639      	mov	r1, r7
 8004bd0:	4630      	mov	r0, r6
 8004bd2:	47c0      	blx	r8
 8004bd4:	3001      	adds	r0, #1
 8004bd6:	d0e6      	beq.n	8004ba6 <_printf_common+0xb2>
 8004bd8:	f109 0901 	add.w	r9, r9, #1
 8004bdc:	e7d8      	b.n	8004b90 <_printf_common+0x9c>
	...

08004be0 <_printf_i>:
 8004be0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004be4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004be8:	460c      	mov	r4, r1
 8004bea:	7e09      	ldrb	r1, [r1, #24]
 8004bec:	b085      	sub	sp, #20
 8004bee:	296e      	cmp	r1, #110	; 0x6e
 8004bf0:	4617      	mov	r7, r2
 8004bf2:	4606      	mov	r6, r0
 8004bf4:	4698      	mov	r8, r3
 8004bf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004bf8:	f000 80b3 	beq.w	8004d62 <_printf_i+0x182>
 8004bfc:	d822      	bhi.n	8004c44 <_printf_i+0x64>
 8004bfe:	2963      	cmp	r1, #99	; 0x63
 8004c00:	d036      	beq.n	8004c70 <_printf_i+0x90>
 8004c02:	d80a      	bhi.n	8004c1a <_printf_i+0x3a>
 8004c04:	2900      	cmp	r1, #0
 8004c06:	f000 80b9 	beq.w	8004d7c <_printf_i+0x19c>
 8004c0a:	2958      	cmp	r1, #88	; 0x58
 8004c0c:	f000 8083 	beq.w	8004d16 <_printf_i+0x136>
 8004c10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c14:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004c18:	e032      	b.n	8004c80 <_printf_i+0xa0>
 8004c1a:	2964      	cmp	r1, #100	; 0x64
 8004c1c:	d001      	beq.n	8004c22 <_printf_i+0x42>
 8004c1e:	2969      	cmp	r1, #105	; 0x69
 8004c20:	d1f6      	bne.n	8004c10 <_printf_i+0x30>
 8004c22:	6820      	ldr	r0, [r4, #0]
 8004c24:	6813      	ldr	r3, [r2, #0]
 8004c26:	0605      	lsls	r5, r0, #24
 8004c28:	f103 0104 	add.w	r1, r3, #4
 8004c2c:	d52a      	bpl.n	8004c84 <_printf_i+0xa4>
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6011      	str	r1, [r2, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	da03      	bge.n	8004c3e <_printf_i+0x5e>
 8004c36:	222d      	movs	r2, #45	; 0x2d
 8004c38:	425b      	negs	r3, r3
 8004c3a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004c3e:	486f      	ldr	r0, [pc, #444]	; (8004dfc <_printf_i+0x21c>)
 8004c40:	220a      	movs	r2, #10
 8004c42:	e039      	b.n	8004cb8 <_printf_i+0xd8>
 8004c44:	2973      	cmp	r1, #115	; 0x73
 8004c46:	f000 809d 	beq.w	8004d84 <_printf_i+0x1a4>
 8004c4a:	d808      	bhi.n	8004c5e <_printf_i+0x7e>
 8004c4c:	296f      	cmp	r1, #111	; 0x6f
 8004c4e:	d020      	beq.n	8004c92 <_printf_i+0xb2>
 8004c50:	2970      	cmp	r1, #112	; 0x70
 8004c52:	d1dd      	bne.n	8004c10 <_printf_i+0x30>
 8004c54:	6823      	ldr	r3, [r4, #0]
 8004c56:	f043 0320 	orr.w	r3, r3, #32
 8004c5a:	6023      	str	r3, [r4, #0]
 8004c5c:	e003      	b.n	8004c66 <_printf_i+0x86>
 8004c5e:	2975      	cmp	r1, #117	; 0x75
 8004c60:	d017      	beq.n	8004c92 <_printf_i+0xb2>
 8004c62:	2978      	cmp	r1, #120	; 0x78
 8004c64:	d1d4      	bne.n	8004c10 <_printf_i+0x30>
 8004c66:	2378      	movs	r3, #120	; 0x78
 8004c68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c6c:	4864      	ldr	r0, [pc, #400]	; (8004e00 <_printf_i+0x220>)
 8004c6e:	e055      	b.n	8004d1c <_printf_i+0x13c>
 8004c70:	6813      	ldr	r3, [r2, #0]
 8004c72:	1d19      	adds	r1, r3, #4
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	6011      	str	r1, [r2, #0]
 8004c78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c80:	2301      	movs	r3, #1
 8004c82:	e08c      	b.n	8004d9e <_printf_i+0x1be>
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6011      	str	r1, [r2, #0]
 8004c88:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c8c:	bf18      	it	ne
 8004c8e:	b21b      	sxthne	r3, r3
 8004c90:	e7cf      	b.n	8004c32 <_printf_i+0x52>
 8004c92:	6813      	ldr	r3, [r2, #0]
 8004c94:	6825      	ldr	r5, [r4, #0]
 8004c96:	1d18      	adds	r0, r3, #4
 8004c98:	6010      	str	r0, [r2, #0]
 8004c9a:	0628      	lsls	r0, r5, #24
 8004c9c:	d501      	bpl.n	8004ca2 <_printf_i+0xc2>
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	e002      	b.n	8004ca8 <_printf_i+0xc8>
 8004ca2:	0668      	lsls	r0, r5, #25
 8004ca4:	d5fb      	bpl.n	8004c9e <_printf_i+0xbe>
 8004ca6:	881b      	ldrh	r3, [r3, #0]
 8004ca8:	4854      	ldr	r0, [pc, #336]	; (8004dfc <_printf_i+0x21c>)
 8004caa:	296f      	cmp	r1, #111	; 0x6f
 8004cac:	bf14      	ite	ne
 8004cae:	220a      	movne	r2, #10
 8004cb0:	2208      	moveq	r2, #8
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cb8:	6865      	ldr	r5, [r4, #4]
 8004cba:	60a5      	str	r5, [r4, #8]
 8004cbc:	2d00      	cmp	r5, #0
 8004cbe:	f2c0 8095 	blt.w	8004dec <_printf_i+0x20c>
 8004cc2:	6821      	ldr	r1, [r4, #0]
 8004cc4:	f021 0104 	bic.w	r1, r1, #4
 8004cc8:	6021      	str	r1, [r4, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d13d      	bne.n	8004d4a <_printf_i+0x16a>
 8004cce:	2d00      	cmp	r5, #0
 8004cd0:	f040 808e 	bne.w	8004df0 <_printf_i+0x210>
 8004cd4:	4665      	mov	r5, ip
 8004cd6:	2a08      	cmp	r2, #8
 8004cd8:	d10b      	bne.n	8004cf2 <_printf_i+0x112>
 8004cda:	6823      	ldr	r3, [r4, #0]
 8004cdc:	07db      	lsls	r3, r3, #31
 8004cde:	d508      	bpl.n	8004cf2 <_printf_i+0x112>
 8004ce0:	6923      	ldr	r3, [r4, #16]
 8004ce2:	6862      	ldr	r2, [r4, #4]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	bfde      	ittt	le
 8004ce8:	2330      	movle	r3, #48	; 0x30
 8004cea:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004cee:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004cf2:	ebac 0305 	sub.w	r3, ip, r5
 8004cf6:	6123      	str	r3, [r4, #16]
 8004cf8:	f8cd 8000 	str.w	r8, [sp]
 8004cfc:	463b      	mov	r3, r7
 8004cfe:	aa03      	add	r2, sp, #12
 8004d00:	4621      	mov	r1, r4
 8004d02:	4630      	mov	r0, r6
 8004d04:	f7ff fef6 	bl	8004af4 <_printf_common>
 8004d08:	3001      	adds	r0, #1
 8004d0a:	d14d      	bne.n	8004da8 <_printf_i+0x1c8>
 8004d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d10:	b005      	add	sp, #20
 8004d12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d16:	4839      	ldr	r0, [pc, #228]	; (8004dfc <_printf_i+0x21c>)
 8004d18:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004d1c:	6813      	ldr	r3, [r2, #0]
 8004d1e:	6821      	ldr	r1, [r4, #0]
 8004d20:	1d1d      	adds	r5, r3, #4
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6015      	str	r5, [r2, #0]
 8004d26:	060a      	lsls	r2, r1, #24
 8004d28:	d50b      	bpl.n	8004d42 <_printf_i+0x162>
 8004d2a:	07ca      	lsls	r2, r1, #31
 8004d2c:	bf44      	itt	mi
 8004d2e:	f041 0120 	orrmi.w	r1, r1, #32
 8004d32:	6021      	strmi	r1, [r4, #0]
 8004d34:	b91b      	cbnz	r3, 8004d3e <_printf_i+0x15e>
 8004d36:	6822      	ldr	r2, [r4, #0]
 8004d38:	f022 0220 	bic.w	r2, r2, #32
 8004d3c:	6022      	str	r2, [r4, #0]
 8004d3e:	2210      	movs	r2, #16
 8004d40:	e7b7      	b.n	8004cb2 <_printf_i+0xd2>
 8004d42:	064d      	lsls	r5, r1, #25
 8004d44:	bf48      	it	mi
 8004d46:	b29b      	uxthmi	r3, r3
 8004d48:	e7ef      	b.n	8004d2a <_printf_i+0x14a>
 8004d4a:	4665      	mov	r5, ip
 8004d4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d50:	fb02 3311 	mls	r3, r2, r1, r3
 8004d54:	5cc3      	ldrb	r3, [r0, r3]
 8004d56:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	2900      	cmp	r1, #0
 8004d5e:	d1f5      	bne.n	8004d4c <_printf_i+0x16c>
 8004d60:	e7b9      	b.n	8004cd6 <_printf_i+0xf6>
 8004d62:	6813      	ldr	r3, [r2, #0]
 8004d64:	6825      	ldr	r5, [r4, #0]
 8004d66:	6961      	ldr	r1, [r4, #20]
 8004d68:	1d18      	adds	r0, r3, #4
 8004d6a:	6010      	str	r0, [r2, #0]
 8004d6c:	0628      	lsls	r0, r5, #24
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	d501      	bpl.n	8004d76 <_printf_i+0x196>
 8004d72:	6019      	str	r1, [r3, #0]
 8004d74:	e002      	b.n	8004d7c <_printf_i+0x19c>
 8004d76:	066a      	lsls	r2, r5, #25
 8004d78:	d5fb      	bpl.n	8004d72 <_printf_i+0x192>
 8004d7a:	8019      	strh	r1, [r3, #0]
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	6123      	str	r3, [r4, #16]
 8004d80:	4665      	mov	r5, ip
 8004d82:	e7b9      	b.n	8004cf8 <_printf_i+0x118>
 8004d84:	6813      	ldr	r3, [r2, #0]
 8004d86:	1d19      	adds	r1, r3, #4
 8004d88:	6011      	str	r1, [r2, #0]
 8004d8a:	681d      	ldr	r5, [r3, #0]
 8004d8c:	6862      	ldr	r2, [r4, #4]
 8004d8e:	2100      	movs	r1, #0
 8004d90:	4628      	mov	r0, r5
 8004d92:	f7fb fa25 	bl	80001e0 <memchr>
 8004d96:	b108      	cbz	r0, 8004d9c <_printf_i+0x1bc>
 8004d98:	1b40      	subs	r0, r0, r5
 8004d9a:	6060      	str	r0, [r4, #4]
 8004d9c:	6863      	ldr	r3, [r4, #4]
 8004d9e:	6123      	str	r3, [r4, #16]
 8004da0:	2300      	movs	r3, #0
 8004da2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004da6:	e7a7      	b.n	8004cf8 <_printf_i+0x118>
 8004da8:	6923      	ldr	r3, [r4, #16]
 8004daa:	462a      	mov	r2, r5
 8004dac:	4639      	mov	r1, r7
 8004dae:	4630      	mov	r0, r6
 8004db0:	47c0      	blx	r8
 8004db2:	3001      	adds	r0, #1
 8004db4:	d0aa      	beq.n	8004d0c <_printf_i+0x12c>
 8004db6:	6823      	ldr	r3, [r4, #0]
 8004db8:	079b      	lsls	r3, r3, #30
 8004dba:	d413      	bmi.n	8004de4 <_printf_i+0x204>
 8004dbc:	68e0      	ldr	r0, [r4, #12]
 8004dbe:	9b03      	ldr	r3, [sp, #12]
 8004dc0:	4298      	cmp	r0, r3
 8004dc2:	bfb8      	it	lt
 8004dc4:	4618      	movlt	r0, r3
 8004dc6:	e7a3      	b.n	8004d10 <_printf_i+0x130>
 8004dc8:	2301      	movs	r3, #1
 8004dca:	464a      	mov	r2, r9
 8004dcc:	4639      	mov	r1, r7
 8004dce:	4630      	mov	r0, r6
 8004dd0:	47c0      	blx	r8
 8004dd2:	3001      	adds	r0, #1
 8004dd4:	d09a      	beq.n	8004d0c <_printf_i+0x12c>
 8004dd6:	3501      	adds	r5, #1
 8004dd8:	68e3      	ldr	r3, [r4, #12]
 8004dda:	9a03      	ldr	r2, [sp, #12]
 8004ddc:	1a9b      	subs	r3, r3, r2
 8004dde:	42ab      	cmp	r3, r5
 8004de0:	dcf2      	bgt.n	8004dc8 <_printf_i+0x1e8>
 8004de2:	e7eb      	b.n	8004dbc <_printf_i+0x1dc>
 8004de4:	2500      	movs	r5, #0
 8004de6:	f104 0919 	add.w	r9, r4, #25
 8004dea:	e7f5      	b.n	8004dd8 <_printf_i+0x1f8>
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1ac      	bne.n	8004d4a <_printf_i+0x16a>
 8004df0:	7803      	ldrb	r3, [r0, #0]
 8004df2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004df6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004dfa:	e76c      	b.n	8004cd6 <_printf_i+0xf6>
 8004dfc:	08006dde 	.word	0x08006dde
 8004e00:	08006def 	.word	0x08006def

08004e04 <iprintf>:
 8004e04:	b40f      	push	{r0, r1, r2, r3}
 8004e06:	4b0a      	ldr	r3, [pc, #40]	; (8004e30 <iprintf+0x2c>)
 8004e08:	b513      	push	{r0, r1, r4, lr}
 8004e0a:	681c      	ldr	r4, [r3, #0]
 8004e0c:	b124      	cbz	r4, 8004e18 <iprintf+0x14>
 8004e0e:	69a3      	ldr	r3, [r4, #24]
 8004e10:	b913      	cbnz	r3, 8004e18 <iprintf+0x14>
 8004e12:	4620      	mov	r0, r4
 8004e14:	f001 f868 	bl	8005ee8 <__sinit>
 8004e18:	ab05      	add	r3, sp, #20
 8004e1a:	9a04      	ldr	r2, [sp, #16]
 8004e1c:	68a1      	ldr	r1, [r4, #8]
 8004e1e:	9301      	str	r3, [sp, #4]
 8004e20:	4620      	mov	r0, r4
 8004e22:	f001 fd2b 	bl	800687c <_vfiprintf_r>
 8004e26:	b002      	add	sp, #8
 8004e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e2c:	b004      	add	sp, #16
 8004e2e:	4770      	bx	lr
 8004e30:	2000000c 	.word	0x2000000c

08004e34 <_puts_r>:
 8004e34:	b570      	push	{r4, r5, r6, lr}
 8004e36:	460e      	mov	r6, r1
 8004e38:	4605      	mov	r5, r0
 8004e3a:	b118      	cbz	r0, 8004e44 <_puts_r+0x10>
 8004e3c:	6983      	ldr	r3, [r0, #24]
 8004e3e:	b90b      	cbnz	r3, 8004e44 <_puts_r+0x10>
 8004e40:	f001 f852 	bl	8005ee8 <__sinit>
 8004e44:	69ab      	ldr	r3, [r5, #24]
 8004e46:	68ac      	ldr	r4, [r5, #8]
 8004e48:	b913      	cbnz	r3, 8004e50 <_puts_r+0x1c>
 8004e4a:	4628      	mov	r0, r5
 8004e4c:	f001 f84c 	bl	8005ee8 <__sinit>
 8004e50:	4b23      	ldr	r3, [pc, #140]	; (8004ee0 <_puts_r+0xac>)
 8004e52:	429c      	cmp	r4, r3
 8004e54:	d117      	bne.n	8004e86 <_puts_r+0x52>
 8004e56:	686c      	ldr	r4, [r5, #4]
 8004e58:	89a3      	ldrh	r3, [r4, #12]
 8004e5a:	071b      	lsls	r3, r3, #28
 8004e5c:	d51d      	bpl.n	8004e9a <_puts_r+0x66>
 8004e5e:	6923      	ldr	r3, [r4, #16]
 8004e60:	b1db      	cbz	r3, 8004e9a <_puts_r+0x66>
 8004e62:	3e01      	subs	r6, #1
 8004e64:	68a3      	ldr	r3, [r4, #8]
 8004e66:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	60a3      	str	r3, [r4, #8]
 8004e6e:	b9e9      	cbnz	r1, 8004eac <_puts_r+0x78>
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	da2e      	bge.n	8004ed2 <_puts_r+0x9e>
 8004e74:	4622      	mov	r2, r4
 8004e76:	210a      	movs	r1, #10
 8004e78:	4628      	mov	r0, r5
 8004e7a:	f000 f83f 	bl	8004efc <__swbuf_r>
 8004e7e:	3001      	adds	r0, #1
 8004e80:	d011      	beq.n	8004ea6 <_puts_r+0x72>
 8004e82:	200a      	movs	r0, #10
 8004e84:	e011      	b.n	8004eaa <_puts_r+0x76>
 8004e86:	4b17      	ldr	r3, [pc, #92]	; (8004ee4 <_puts_r+0xb0>)
 8004e88:	429c      	cmp	r4, r3
 8004e8a:	d101      	bne.n	8004e90 <_puts_r+0x5c>
 8004e8c:	68ac      	ldr	r4, [r5, #8]
 8004e8e:	e7e3      	b.n	8004e58 <_puts_r+0x24>
 8004e90:	4b15      	ldr	r3, [pc, #84]	; (8004ee8 <_puts_r+0xb4>)
 8004e92:	429c      	cmp	r4, r3
 8004e94:	bf08      	it	eq
 8004e96:	68ec      	ldreq	r4, [r5, #12]
 8004e98:	e7de      	b.n	8004e58 <_puts_r+0x24>
 8004e9a:	4621      	mov	r1, r4
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	f000 f87f 	bl	8004fa0 <__swsetup_r>
 8004ea2:	2800      	cmp	r0, #0
 8004ea4:	d0dd      	beq.n	8004e62 <_puts_r+0x2e>
 8004ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8004eaa:	bd70      	pop	{r4, r5, r6, pc}
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	da04      	bge.n	8004eba <_puts_r+0x86>
 8004eb0:	69a2      	ldr	r2, [r4, #24]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	dc06      	bgt.n	8004ec4 <_puts_r+0x90>
 8004eb6:	290a      	cmp	r1, #10
 8004eb8:	d004      	beq.n	8004ec4 <_puts_r+0x90>
 8004eba:	6823      	ldr	r3, [r4, #0]
 8004ebc:	1c5a      	adds	r2, r3, #1
 8004ebe:	6022      	str	r2, [r4, #0]
 8004ec0:	7019      	strb	r1, [r3, #0]
 8004ec2:	e7cf      	b.n	8004e64 <_puts_r+0x30>
 8004ec4:	4622      	mov	r2, r4
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	f000 f818 	bl	8004efc <__swbuf_r>
 8004ecc:	3001      	adds	r0, #1
 8004ece:	d1c9      	bne.n	8004e64 <_puts_r+0x30>
 8004ed0:	e7e9      	b.n	8004ea6 <_puts_r+0x72>
 8004ed2:	6823      	ldr	r3, [r4, #0]
 8004ed4:	200a      	movs	r0, #10
 8004ed6:	1c5a      	adds	r2, r3, #1
 8004ed8:	6022      	str	r2, [r4, #0]
 8004eda:	7018      	strb	r0, [r3, #0]
 8004edc:	e7e5      	b.n	8004eaa <_puts_r+0x76>
 8004ede:	bf00      	nop
 8004ee0:	08006e30 	.word	0x08006e30
 8004ee4:	08006e50 	.word	0x08006e50
 8004ee8:	08006e10 	.word	0x08006e10

08004eec <puts>:
 8004eec:	4b02      	ldr	r3, [pc, #8]	; (8004ef8 <puts+0xc>)
 8004eee:	4601      	mov	r1, r0
 8004ef0:	6818      	ldr	r0, [r3, #0]
 8004ef2:	f7ff bf9f 	b.w	8004e34 <_puts_r>
 8004ef6:	bf00      	nop
 8004ef8:	2000000c 	.word	0x2000000c

08004efc <__swbuf_r>:
 8004efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004efe:	460e      	mov	r6, r1
 8004f00:	4614      	mov	r4, r2
 8004f02:	4605      	mov	r5, r0
 8004f04:	b118      	cbz	r0, 8004f0e <__swbuf_r+0x12>
 8004f06:	6983      	ldr	r3, [r0, #24]
 8004f08:	b90b      	cbnz	r3, 8004f0e <__swbuf_r+0x12>
 8004f0a:	f000 ffed 	bl	8005ee8 <__sinit>
 8004f0e:	4b21      	ldr	r3, [pc, #132]	; (8004f94 <__swbuf_r+0x98>)
 8004f10:	429c      	cmp	r4, r3
 8004f12:	d12a      	bne.n	8004f6a <__swbuf_r+0x6e>
 8004f14:	686c      	ldr	r4, [r5, #4]
 8004f16:	69a3      	ldr	r3, [r4, #24]
 8004f18:	60a3      	str	r3, [r4, #8]
 8004f1a:	89a3      	ldrh	r3, [r4, #12]
 8004f1c:	071a      	lsls	r2, r3, #28
 8004f1e:	d52e      	bpl.n	8004f7e <__swbuf_r+0x82>
 8004f20:	6923      	ldr	r3, [r4, #16]
 8004f22:	b363      	cbz	r3, 8004f7e <__swbuf_r+0x82>
 8004f24:	6923      	ldr	r3, [r4, #16]
 8004f26:	6820      	ldr	r0, [r4, #0]
 8004f28:	1ac0      	subs	r0, r0, r3
 8004f2a:	6963      	ldr	r3, [r4, #20]
 8004f2c:	b2f6      	uxtb	r6, r6
 8004f2e:	4283      	cmp	r3, r0
 8004f30:	4637      	mov	r7, r6
 8004f32:	dc04      	bgt.n	8004f3e <__swbuf_r+0x42>
 8004f34:	4621      	mov	r1, r4
 8004f36:	4628      	mov	r0, r5
 8004f38:	f000 ff6c 	bl	8005e14 <_fflush_r>
 8004f3c:	bb28      	cbnz	r0, 8004f8a <__swbuf_r+0x8e>
 8004f3e:	68a3      	ldr	r3, [r4, #8]
 8004f40:	3b01      	subs	r3, #1
 8004f42:	60a3      	str	r3, [r4, #8]
 8004f44:	6823      	ldr	r3, [r4, #0]
 8004f46:	1c5a      	adds	r2, r3, #1
 8004f48:	6022      	str	r2, [r4, #0]
 8004f4a:	701e      	strb	r6, [r3, #0]
 8004f4c:	6963      	ldr	r3, [r4, #20]
 8004f4e:	3001      	adds	r0, #1
 8004f50:	4283      	cmp	r3, r0
 8004f52:	d004      	beq.n	8004f5e <__swbuf_r+0x62>
 8004f54:	89a3      	ldrh	r3, [r4, #12]
 8004f56:	07db      	lsls	r3, r3, #31
 8004f58:	d519      	bpl.n	8004f8e <__swbuf_r+0x92>
 8004f5a:	2e0a      	cmp	r6, #10
 8004f5c:	d117      	bne.n	8004f8e <__swbuf_r+0x92>
 8004f5e:	4621      	mov	r1, r4
 8004f60:	4628      	mov	r0, r5
 8004f62:	f000 ff57 	bl	8005e14 <_fflush_r>
 8004f66:	b190      	cbz	r0, 8004f8e <__swbuf_r+0x92>
 8004f68:	e00f      	b.n	8004f8a <__swbuf_r+0x8e>
 8004f6a:	4b0b      	ldr	r3, [pc, #44]	; (8004f98 <__swbuf_r+0x9c>)
 8004f6c:	429c      	cmp	r4, r3
 8004f6e:	d101      	bne.n	8004f74 <__swbuf_r+0x78>
 8004f70:	68ac      	ldr	r4, [r5, #8]
 8004f72:	e7d0      	b.n	8004f16 <__swbuf_r+0x1a>
 8004f74:	4b09      	ldr	r3, [pc, #36]	; (8004f9c <__swbuf_r+0xa0>)
 8004f76:	429c      	cmp	r4, r3
 8004f78:	bf08      	it	eq
 8004f7a:	68ec      	ldreq	r4, [r5, #12]
 8004f7c:	e7cb      	b.n	8004f16 <__swbuf_r+0x1a>
 8004f7e:	4621      	mov	r1, r4
 8004f80:	4628      	mov	r0, r5
 8004f82:	f000 f80d 	bl	8004fa0 <__swsetup_r>
 8004f86:	2800      	cmp	r0, #0
 8004f88:	d0cc      	beq.n	8004f24 <__swbuf_r+0x28>
 8004f8a:	f04f 37ff 	mov.w	r7, #4294967295
 8004f8e:	4638      	mov	r0, r7
 8004f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f92:	bf00      	nop
 8004f94:	08006e30 	.word	0x08006e30
 8004f98:	08006e50 	.word	0x08006e50
 8004f9c:	08006e10 	.word	0x08006e10

08004fa0 <__swsetup_r>:
 8004fa0:	4b32      	ldr	r3, [pc, #200]	; (800506c <__swsetup_r+0xcc>)
 8004fa2:	b570      	push	{r4, r5, r6, lr}
 8004fa4:	681d      	ldr	r5, [r3, #0]
 8004fa6:	4606      	mov	r6, r0
 8004fa8:	460c      	mov	r4, r1
 8004faa:	b125      	cbz	r5, 8004fb6 <__swsetup_r+0x16>
 8004fac:	69ab      	ldr	r3, [r5, #24]
 8004fae:	b913      	cbnz	r3, 8004fb6 <__swsetup_r+0x16>
 8004fb0:	4628      	mov	r0, r5
 8004fb2:	f000 ff99 	bl	8005ee8 <__sinit>
 8004fb6:	4b2e      	ldr	r3, [pc, #184]	; (8005070 <__swsetup_r+0xd0>)
 8004fb8:	429c      	cmp	r4, r3
 8004fba:	d10f      	bne.n	8004fdc <__swsetup_r+0x3c>
 8004fbc:	686c      	ldr	r4, [r5, #4]
 8004fbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	0715      	lsls	r5, r2, #28
 8004fc6:	d42c      	bmi.n	8005022 <__swsetup_r+0x82>
 8004fc8:	06d0      	lsls	r0, r2, #27
 8004fca:	d411      	bmi.n	8004ff0 <__swsetup_r+0x50>
 8004fcc:	2209      	movs	r2, #9
 8004fce:	6032      	str	r2, [r6, #0]
 8004fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fd4:	81a3      	strh	r3, [r4, #12]
 8004fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8004fda:	e03e      	b.n	800505a <__swsetup_r+0xba>
 8004fdc:	4b25      	ldr	r3, [pc, #148]	; (8005074 <__swsetup_r+0xd4>)
 8004fde:	429c      	cmp	r4, r3
 8004fe0:	d101      	bne.n	8004fe6 <__swsetup_r+0x46>
 8004fe2:	68ac      	ldr	r4, [r5, #8]
 8004fe4:	e7eb      	b.n	8004fbe <__swsetup_r+0x1e>
 8004fe6:	4b24      	ldr	r3, [pc, #144]	; (8005078 <__swsetup_r+0xd8>)
 8004fe8:	429c      	cmp	r4, r3
 8004fea:	bf08      	it	eq
 8004fec:	68ec      	ldreq	r4, [r5, #12]
 8004fee:	e7e6      	b.n	8004fbe <__swsetup_r+0x1e>
 8004ff0:	0751      	lsls	r1, r2, #29
 8004ff2:	d512      	bpl.n	800501a <__swsetup_r+0x7a>
 8004ff4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ff6:	b141      	cbz	r1, 800500a <__swsetup_r+0x6a>
 8004ff8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ffc:	4299      	cmp	r1, r3
 8004ffe:	d002      	beq.n	8005006 <__swsetup_r+0x66>
 8005000:	4630      	mov	r0, r6
 8005002:	f001 fb69 	bl	80066d8 <_free_r>
 8005006:	2300      	movs	r3, #0
 8005008:	6363      	str	r3, [r4, #52]	; 0x34
 800500a:	89a3      	ldrh	r3, [r4, #12]
 800500c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005010:	81a3      	strh	r3, [r4, #12]
 8005012:	2300      	movs	r3, #0
 8005014:	6063      	str	r3, [r4, #4]
 8005016:	6923      	ldr	r3, [r4, #16]
 8005018:	6023      	str	r3, [r4, #0]
 800501a:	89a3      	ldrh	r3, [r4, #12]
 800501c:	f043 0308 	orr.w	r3, r3, #8
 8005020:	81a3      	strh	r3, [r4, #12]
 8005022:	6923      	ldr	r3, [r4, #16]
 8005024:	b94b      	cbnz	r3, 800503a <__swsetup_r+0x9a>
 8005026:	89a3      	ldrh	r3, [r4, #12]
 8005028:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800502c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005030:	d003      	beq.n	800503a <__swsetup_r+0x9a>
 8005032:	4621      	mov	r1, r4
 8005034:	4630      	mov	r0, r6
 8005036:	f001 f813 	bl	8006060 <__smakebuf_r>
 800503a:	89a2      	ldrh	r2, [r4, #12]
 800503c:	f012 0301 	ands.w	r3, r2, #1
 8005040:	d00c      	beq.n	800505c <__swsetup_r+0xbc>
 8005042:	2300      	movs	r3, #0
 8005044:	60a3      	str	r3, [r4, #8]
 8005046:	6963      	ldr	r3, [r4, #20]
 8005048:	425b      	negs	r3, r3
 800504a:	61a3      	str	r3, [r4, #24]
 800504c:	6923      	ldr	r3, [r4, #16]
 800504e:	b953      	cbnz	r3, 8005066 <__swsetup_r+0xc6>
 8005050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005054:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005058:	d1ba      	bne.n	8004fd0 <__swsetup_r+0x30>
 800505a:	bd70      	pop	{r4, r5, r6, pc}
 800505c:	0792      	lsls	r2, r2, #30
 800505e:	bf58      	it	pl
 8005060:	6963      	ldrpl	r3, [r4, #20]
 8005062:	60a3      	str	r3, [r4, #8]
 8005064:	e7f2      	b.n	800504c <__swsetup_r+0xac>
 8005066:	2000      	movs	r0, #0
 8005068:	e7f7      	b.n	800505a <__swsetup_r+0xba>
 800506a:	bf00      	nop
 800506c:	2000000c 	.word	0x2000000c
 8005070:	08006e30 	.word	0x08006e30
 8005074:	08006e50 	.word	0x08006e50
 8005078:	08006e10 	.word	0x08006e10

0800507c <quorem>:
 800507c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005080:	6903      	ldr	r3, [r0, #16]
 8005082:	690c      	ldr	r4, [r1, #16]
 8005084:	42a3      	cmp	r3, r4
 8005086:	4680      	mov	r8, r0
 8005088:	f2c0 8082 	blt.w	8005190 <quorem+0x114>
 800508c:	3c01      	subs	r4, #1
 800508e:	f101 0714 	add.w	r7, r1, #20
 8005092:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005096:	f100 0614 	add.w	r6, r0, #20
 800509a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800509e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80050a2:	eb06 030c 	add.w	r3, r6, ip
 80050a6:	3501      	adds	r5, #1
 80050a8:	eb07 090c 	add.w	r9, r7, ip
 80050ac:	9301      	str	r3, [sp, #4]
 80050ae:	fbb0 f5f5 	udiv	r5, r0, r5
 80050b2:	b395      	cbz	r5, 800511a <quorem+0x9e>
 80050b4:	f04f 0a00 	mov.w	sl, #0
 80050b8:	4638      	mov	r0, r7
 80050ba:	46b6      	mov	lr, r6
 80050bc:	46d3      	mov	fp, sl
 80050be:	f850 2b04 	ldr.w	r2, [r0], #4
 80050c2:	b293      	uxth	r3, r2
 80050c4:	fb05 a303 	mla	r3, r5, r3, sl
 80050c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	ebab 0303 	sub.w	r3, fp, r3
 80050d2:	0c12      	lsrs	r2, r2, #16
 80050d4:	f8de b000 	ldr.w	fp, [lr]
 80050d8:	fb05 a202 	mla	r2, r5, r2, sl
 80050dc:	fa13 f38b 	uxtah	r3, r3, fp
 80050e0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80050e4:	fa1f fb82 	uxth.w	fp, r2
 80050e8:	f8de 2000 	ldr.w	r2, [lr]
 80050ec:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80050f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050fa:	4581      	cmp	r9, r0
 80050fc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005100:	f84e 3b04 	str.w	r3, [lr], #4
 8005104:	d2db      	bcs.n	80050be <quorem+0x42>
 8005106:	f856 300c 	ldr.w	r3, [r6, ip]
 800510a:	b933      	cbnz	r3, 800511a <quorem+0x9e>
 800510c:	9b01      	ldr	r3, [sp, #4]
 800510e:	3b04      	subs	r3, #4
 8005110:	429e      	cmp	r6, r3
 8005112:	461a      	mov	r2, r3
 8005114:	d330      	bcc.n	8005178 <quorem+0xfc>
 8005116:	f8c8 4010 	str.w	r4, [r8, #16]
 800511a:	4640      	mov	r0, r8
 800511c:	f001 fa08 	bl	8006530 <__mcmp>
 8005120:	2800      	cmp	r0, #0
 8005122:	db25      	blt.n	8005170 <quorem+0xf4>
 8005124:	3501      	adds	r5, #1
 8005126:	4630      	mov	r0, r6
 8005128:	f04f 0c00 	mov.w	ip, #0
 800512c:	f857 2b04 	ldr.w	r2, [r7], #4
 8005130:	f8d0 e000 	ldr.w	lr, [r0]
 8005134:	b293      	uxth	r3, r2
 8005136:	ebac 0303 	sub.w	r3, ip, r3
 800513a:	0c12      	lsrs	r2, r2, #16
 800513c:	fa13 f38e 	uxtah	r3, r3, lr
 8005140:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005144:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005148:	b29b      	uxth	r3, r3
 800514a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800514e:	45b9      	cmp	r9, r7
 8005150:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005154:	f840 3b04 	str.w	r3, [r0], #4
 8005158:	d2e8      	bcs.n	800512c <quorem+0xb0>
 800515a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800515e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005162:	b92a      	cbnz	r2, 8005170 <quorem+0xf4>
 8005164:	3b04      	subs	r3, #4
 8005166:	429e      	cmp	r6, r3
 8005168:	461a      	mov	r2, r3
 800516a:	d30b      	bcc.n	8005184 <quorem+0x108>
 800516c:	f8c8 4010 	str.w	r4, [r8, #16]
 8005170:	4628      	mov	r0, r5
 8005172:	b003      	add	sp, #12
 8005174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005178:	6812      	ldr	r2, [r2, #0]
 800517a:	3b04      	subs	r3, #4
 800517c:	2a00      	cmp	r2, #0
 800517e:	d1ca      	bne.n	8005116 <quorem+0x9a>
 8005180:	3c01      	subs	r4, #1
 8005182:	e7c5      	b.n	8005110 <quorem+0x94>
 8005184:	6812      	ldr	r2, [r2, #0]
 8005186:	3b04      	subs	r3, #4
 8005188:	2a00      	cmp	r2, #0
 800518a:	d1ef      	bne.n	800516c <quorem+0xf0>
 800518c:	3c01      	subs	r4, #1
 800518e:	e7ea      	b.n	8005166 <quorem+0xea>
 8005190:	2000      	movs	r0, #0
 8005192:	e7ee      	b.n	8005172 <quorem+0xf6>
 8005194:	0000      	movs	r0, r0
	...

08005198 <_dtoa_r>:
 8005198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800519c:	ec57 6b10 	vmov	r6, r7, d0
 80051a0:	b097      	sub	sp, #92	; 0x5c
 80051a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80051a4:	9106      	str	r1, [sp, #24]
 80051a6:	4604      	mov	r4, r0
 80051a8:	920b      	str	r2, [sp, #44]	; 0x2c
 80051aa:	9312      	str	r3, [sp, #72]	; 0x48
 80051ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80051b0:	e9cd 6700 	strd	r6, r7, [sp]
 80051b4:	b93d      	cbnz	r5, 80051c6 <_dtoa_r+0x2e>
 80051b6:	2010      	movs	r0, #16
 80051b8:	f000 ff92 	bl	80060e0 <malloc>
 80051bc:	6260      	str	r0, [r4, #36]	; 0x24
 80051be:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80051c2:	6005      	str	r5, [r0, #0]
 80051c4:	60c5      	str	r5, [r0, #12]
 80051c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051c8:	6819      	ldr	r1, [r3, #0]
 80051ca:	b151      	cbz	r1, 80051e2 <_dtoa_r+0x4a>
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	604a      	str	r2, [r1, #4]
 80051d0:	2301      	movs	r3, #1
 80051d2:	4093      	lsls	r3, r2
 80051d4:	608b      	str	r3, [r1, #8]
 80051d6:	4620      	mov	r0, r4
 80051d8:	f000 ffc9 	bl	800616e <_Bfree>
 80051dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051de:	2200      	movs	r2, #0
 80051e0:	601a      	str	r2, [r3, #0]
 80051e2:	1e3b      	subs	r3, r7, #0
 80051e4:	bfbb      	ittet	lt
 80051e6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80051ea:	9301      	strlt	r3, [sp, #4]
 80051ec:	2300      	movge	r3, #0
 80051ee:	2201      	movlt	r2, #1
 80051f0:	bfac      	ite	ge
 80051f2:	f8c8 3000 	strge.w	r3, [r8]
 80051f6:	f8c8 2000 	strlt.w	r2, [r8]
 80051fa:	4baf      	ldr	r3, [pc, #700]	; (80054b8 <_dtoa_r+0x320>)
 80051fc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005200:	ea33 0308 	bics.w	r3, r3, r8
 8005204:	d114      	bne.n	8005230 <_dtoa_r+0x98>
 8005206:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005208:	f242 730f 	movw	r3, #9999	; 0x270f
 800520c:	6013      	str	r3, [r2, #0]
 800520e:	9b00      	ldr	r3, [sp, #0]
 8005210:	b923      	cbnz	r3, 800521c <_dtoa_r+0x84>
 8005212:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005216:	2800      	cmp	r0, #0
 8005218:	f000 8542 	beq.w	8005ca0 <_dtoa_r+0xb08>
 800521c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800521e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80054cc <_dtoa_r+0x334>
 8005222:	2b00      	cmp	r3, #0
 8005224:	f000 8544 	beq.w	8005cb0 <_dtoa_r+0xb18>
 8005228:	f10b 0303 	add.w	r3, fp, #3
 800522c:	f000 bd3e 	b.w	8005cac <_dtoa_r+0xb14>
 8005230:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005234:	2200      	movs	r2, #0
 8005236:	2300      	movs	r3, #0
 8005238:	4630      	mov	r0, r6
 800523a:	4639      	mov	r1, r7
 800523c:	f7fb fc44 	bl	8000ac8 <__aeabi_dcmpeq>
 8005240:	4681      	mov	r9, r0
 8005242:	b168      	cbz	r0, 8005260 <_dtoa_r+0xc8>
 8005244:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005246:	2301      	movs	r3, #1
 8005248:	6013      	str	r3, [r2, #0]
 800524a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800524c:	2b00      	cmp	r3, #0
 800524e:	f000 8524 	beq.w	8005c9a <_dtoa_r+0xb02>
 8005252:	4b9a      	ldr	r3, [pc, #616]	; (80054bc <_dtoa_r+0x324>)
 8005254:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005256:	f103 3bff 	add.w	fp, r3, #4294967295
 800525a:	6013      	str	r3, [r2, #0]
 800525c:	f000 bd28 	b.w	8005cb0 <_dtoa_r+0xb18>
 8005260:	aa14      	add	r2, sp, #80	; 0x50
 8005262:	a915      	add	r1, sp, #84	; 0x54
 8005264:	ec47 6b10 	vmov	d0, r6, r7
 8005268:	4620      	mov	r0, r4
 800526a:	f001 f9d8 	bl	800661e <__d2b>
 800526e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005272:	9004      	str	r0, [sp, #16]
 8005274:	2d00      	cmp	r5, #0
 8005276:	d07c      	beq.n	8005372 <_dtoa_r+0x1da>
 8005278:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800527c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005280:	46b2      	mov	sl, r6
 8005282:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8005286:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800528a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800528e:	2200      	movs	r2, #0
 8005290:	4b8b      	ldr	r3, [pc, #556]	; (80054c0 <_dtoa_r+0x328>)
 8005292:	4650      	mov	r0, sl
 8005294:	4659      	mov	r1, fp
 8005296:	f7fa fff7 	bl	8000288 <__aeabi_dsub>
 800529a:	a381      	add	r3, pc, #516	; (adr r3, 80054a0 <_dtoa_r+0x308>)
 800529c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a0:	f7fb f9aa 	bl	80005f8 <__aeabi_dmul>
 80052a4:	a380      	add	r3, pc, #512	; (adr r3, 80054a8 <_dtoa_r+0x310>)
 80052a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052aa:	f7fa ffef 	bl	800028c <__adddf3>
 80052ae:	4606      	mov	r6, r0
 80052b0:	4628      	mov	r0, r5
 80052b2:	460f      	mov	r7, r1
 80052b4:	f7fb f936 	bl	8000524 <__aeabi_i2d>
 80052b8:	a37d      	add	r3, pc, #500	; (adr r3, 80054b0 <_dtoa_r+0x318>)
 80052ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052be:	f7fb f99b 	bl	80005f8 <__aeabi_dmul>
 80052c2:	4602      	mov	r2, r0
 80052c4:	460b      	mov	r3, r1
 80052c6:	4630      	mov	r0, r6
 80052c8:	4639      	mov	r1, r7
 80052ca:	f7fa ffdf 	bl	800028c <__adddf3>
 80052ce:	4606      	mov	r6, r0
 80052d0:	460f      	mov	r7, r1
 80052d2:	f7fb fc41 	bl	8000b58 <__aeabi_d2iz>
 80052d6:	2200      	movs	r2, #0
 80052d8:	4682      	mov	sl, r0
 80052da:	2300      	movs	r3, #0
 80052dc:	4630      	mov	r0, r6
 80052de:	4639      	mov	r1, r7
 80052e0:	f7fb fbfc 	bl	8000adc <__aeabi_dcmplt>
 80052e4:	b148      	cbz	r0, 80052fa <_dtoa_r+0x162>
 80052e6:	4650      	mov	r0, sl
 80052e8:	f7fb f91c 	bl	8000524 <__aeabi_i2d>
 80052ec:	4632      	mov	r2, r6
 80052ee:	463b      	mov	r3, r7
 80052f0:	f7fb fbea 	bl	8000ac8 <__aeabi_dcmpeq>
 80052f4:	b908      	cbnz	r0, 80052fa <_dtoa_r+0x162>
 80052f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80052fa:	f1ba 0f16 	cmp.w	sl, #22
 80052fe:	d859      	bhi.n	80053b4 <_dtoa_r+0x21c>
 8005300:	4970      	ldr	r1, [pc, #448]	; (80054c4 <_dtoa_r+0x32c>)
 8005302:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005306:	e9dd 2300 	ldrd	r2, r3, [sp]
 800530a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800530e:	f7fb fc03 	bl	8000b18 <__aeabi_dcmpgt>
 8005312:	2800      	cmp	r0, #0
 8005314:	d050      	beq.n	80053b8 <_dtoa_r+0x220>
 8005316:	f10a 3aff 	add.w	sl, sl, #4294967295
 800531a:	2300      	movs	r3, #0
 800531c:	930f      	str	r3, [sp, #60]	; 0x3c
 800531e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005320:	1b5d      	subs	r5, r3, r5
 8005322:	f1b5 0801 	subs.w	r8, r5, #1
 8005326:	bf49      	itett	mi
 8005328:	f1c5 0301 	rsbmi	r3, r5, #1
 800532c:	2300      	movpl	r3, #0
 800532e:	9305      	strmi	r3, [sp, #20]
 8005330:	f04f 0800 	movmi.w	r8, #0
 8005334:	bf58      	it	pl
 8005336:	9305      	strpl	r3, [sp, #20]
 8005338:	f1ba 0f00 	cmp.w	sl, #0
 800533c:	db3e      	blt.n	80053bc <_dtoa_r+0x224>
 800533e:	2300      	movs	r3, #0
 8005340:	44d0      	add	r8, sl
 8005342:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005346:	9307      	str	r3, [sp, #28]
 8005348:	9b06      	ldr	r3, [sp, #24]
 800534a:	2b09      	cmp	r3, #9
 800534c:	f200 8090 	bhi.w	8005470 <_dtoa_r+0x2d8>
 8005350:	2b05      	cmp	r3, #5
 8005352:	bfc4      	itt	gt
 8005354:	3b04      	subgt	r3, #4
 8005356:	9306      	strgt	r3, [sp, #24]
 8005358:	9b06      	ldr	r3, [sp, #24]
 800535a:	f1a3 0302 	sub.w	r3, r3, #2
 800535e:	bfcc      	ite	gt
 8005360:	2500      	movgt	r5, #0
 8005362:	2501      	movle	r5, #1
 8005364:	2b03      	cmp	r3, #3
 8005366:	f200 808f 	bhi.w	8005488 <_dtoa_r+0x2f0>
 800536a:	e8df f003 	tbb	[pc, r3]
 800536e:	7f7d      	.short	0x7f7d
 8005370:	7131      	.short	0x7131
 8005372:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005376:	441d      	add	r5, r3
 8005378:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800537c:	2820      	cmp	r0, #32
 800537e:	dd13      	ble.n	80053a8 <_dtoa_r+0x210>
 8005380:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005384:	9b00      	ldr	r3, [sp, #0]
 8005386:	fa08 f800 	lsl.w	r8, r8, r0
 800538a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800538e:	fa23 f000 	lsr.w	r0, r3, r0
 8005392:	ea48 0000 	orr.w	r0, r8, r0
 8005396:	f7fb f8b5 	bl	8000504 <__aeabi_ui2d>
 800539a:	2301      	movs	r3, #1
 800539c:	4682      	mov	sl, r0
 800539e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80053a2:	3d01      	subs	r5, #1
 80053a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80053a6:	e772      	b.n	800528e <_dtoa_r+0xf6>
 80053a8:	9b00      	ldr	r3, [sp, #0]
 80053aa:	f1c0 0020 	rsb	r0, r0, #32
 80053ae:	fa03 f000 	lsl.w	r0, r3, r0
 80053b2:	e7f0      	b.n	8005396 <_dtoa_r+0x1fe>
 80053b4:	2301      	movs	r3, #1
 80053b6:	e7b1      	b.n	800531c <_dtoa_r+0x184>
 80053b8:	900f      	str	r0, [sp, #60]	; 0x3c
 80053ba:	e7b0      	b.n	800531e <_dtoa_r+0x186>
 80053bc:	9b05      	ldr	r3, [sp, #20]
 80053be:	eba3 030a 	sub.w	r3, r3, sl
 80053c2:	9305      	str	r3, [sp, #20]
 80053c4:	f1ca 0300 	rsb	r3, sl, #0
 80053c8:	9307      	str	r3, [sp, #28]
 80053ca:	2300      	movs	r3, #0
 80053cc:	930e      	str	r3, [sp, #56]	; 0x38
 80053ce:	e7bb      	b.n	8005348 <_dtoa_r+0x1b0>
 80053d0:	2301      	movs	r3, #1
 80053d2:	930a      	str	r3, [sp, #40]	; 0x28
 80053d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	dd59      	ble.n	800548e <_dtoa_r+0x2f6>
 80053da:	9302      	str	r3, [sp, #8]
 80053dc:	4699      	mov	r9, r3
 80053de:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80053e0:	2200      	movs	r2, #0
 80053e2:	6072      	str	r2, [r6, #4]
 80053e4:	2204      	movs	r2, #4
 80053e6:	f102 0014 	add.w	r0, r2, #20
 80053ea:	4298      	cmp	r0, r3
 80053ec:	6871      	ldr	r1, [r6, #4]
 80053ee:	d953      	bls.n	8005498 <_dtoa_r+0x300>
 80053f0:	4620      	mov	r0, r4
 80053f2:	f000 fe88 	bl	8006106 <_Balloc>
 80053f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053f8:	6030      	str	r0, [r6, #0]
 80053fa:	f1b9 0f0e 	cmp.w	r9, #14
 80053fe:	f8d3 b000 	ldr.w	fp, [r3]
 8005402:	f200 80e6 	bhi.w	80055d2 <_dtoa_r+0x43a>
 8005406:	2d00      	cmp	r5, #0
 8005408:	f000 80e3 	beq.w	80055d2 <_dtoa_r+0x43a>
 800540c:	ed9d 7b00 	vldr	d7, [sp]
 8005410:	f1ba 0f00 	cmp.w	sl, #0
 8005414:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005418:	dd74      	ble.n	8005504 <_dtoa_r+0x36c>
 800541a:	4a2a      	ldr	r2, [pc, #168]	; (80054c4 <_dtoa_r+0x32c>)
 800541c:	f00a 030f 	and.w	r3, sl, #15
 8005420:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005424:	ed93 7b00 	vldr	d7, [r3]
 8005428:	ea4f 162a 	mov.w	r6, sl, asr #4
 800542c:	06f0      	lsls	r0, r6, #27
 800542e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005432:	d565      	bpl.n	8005500 <_dtoa_r+0x368>
 8005434:	4b24      	ldr	r3, [pc, #144]	; (80054c8 <_dtoa_r+0x330>)
 8005436:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800543a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800543e:	f7fb fa05 	bl	800084c <__aeabi_ddiv>
 8005442:	e9cd 0100 	strd	r0, r1, [sp]
 8005446:	f006 060f 	and.w	r6, r6, #15
 800544a:	2503      	movs	r5, #3
 800544c:	4f1e      	ldr	r7, [pc, #120]	; (80054c8 <_dtoa_r+0x330>)
 800544e:	e04c      	b.n	80054ea <_dtoa_r+0x352>
 8005450:	2301      	movs	r3, #1
 8005452:	930a      	str	r3, [sp, #40]	; 0x28
 8005454:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005456:	4453      	add	r3, sl
 8005458:	f103 0901 	add.w	r9, r3, #1
 800545c:	9302      	str	r3, [sp, #8]
 800545e:	464b      	mov	r3, r9
 8005460:	2b01      	cmp	r3, #1
 8005462:	bfb8      	it	lt
 8005464:	2301      	movlt	r3, #1
 8005466:	e7ba      	b.n	80053de <_dtoa_r+0x246>
 8005468:	2300      	movs	r3, #0
 800546a:	e7b2      	b.n	80053d2 <_dtoa_r+0x23a>
 800546c:	2300      	movs	r3, #0
 800546e:	e7f0      	b.n	8005452 <_dtoa_r+0x2ba>
 8005470:	2501      	movs	r5, #1
 8005472:	2300      	movs	r3, #0
 8005474:	9306      	str	r3, [sp, #24]
 8005476:	950a      	str	r5, [sp, #40]	; 0x28
 8005478:	f04f 33ff 	mov.w	r3, #4294967295
 800547c:	9302      	str	r3, [sp, #8]
 800547e:	4699      	mov	r9, r3
 8005480:	2200      	movs	r2, #0
 8005482:	2312      	movs	r3, #18
 8005484:	920b      	str	r2, [sp, #44]	; 0x2c
 8005486:	e7aa      	b.n	80053de <_dtoa_r+0x246>
 8005488:	2301      	movs	r3, #1
 800548a:	930a      	str	r3, [sp, #40]	; 0x28
 800548c:	e7f4      	b.n	8005478 <_dtoa_r+0x2e0>
 800548e:	2301      	movs	r3, #1
 8005490:	9302      	str	r3, [sp, #8]
 8005492:	4699      	mov	r9, r3
 8005494:	461a      	mov	r2, r3
 8005496:	e7f5      	b.n	8005484 <_dtoa_r+0x2ec>
 8005498:	3101      	adds	r1, #1
 800549a:	6071      	str	r1, [r6, #4]
 800549c:	0052      	lsls	r2, r2, #1
 800549e:	e7a2      	b.n	80053e6 <_dtoa_r+0x24e>
 80054a0:	636f4361 	.word	0x636f4361
 80054a4:	3fd287a7 	.word	0x3fd287a7
 80054a8:	8b60c8b3 	.word	0x8b60c8b3
 80054ac:	3fc68a28 	.word	0x3fc68a28
 80054b0:	509f79fb 	.word	0x509f79fb
 80054b4:	3fd34413 	.word	0x3fd34413
 80054b8:	7ff00000 	.word	0x7ff00000
 80054bc:	08006ddd 	.word	0x08006ddd
 80054c0:	3ff80000 	.word	0x3ff80000
 80054c4:	08006e98 	.word	0x08006e98
 80054c8:	08006e70 	.word	0x08006e70
 80054cc:	08006e09 	.word	0x08006e09
 80054d0:	07f1      	lsls	r1, r6, #31
 80054d2:	d508      	bpl.n	80054e6 <_dtoa_r+0x34e>
 80054d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80054d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054dc:	f7fb f88c 	bl	80005f8 <__aeabi_dmul>
 80054e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80054e4:	3501      	adds	r5, #1
 80054e6:	1076      	asrs	r6, r6, #1
 80054e8:	3708      	adds	r7, #8
 80054ea:	2e00      	cmp	r6, #0
 80054ec:	d1f0      	bne.n	80054d0 <_dtoa_r+0x338>
 80054ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80054f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80054f6:	f7fb f9a9 	bl	800084c <__aeabi_ddiv>
 80054fa:	e9cd 0100 	strd	r0, r1, [sp]
 80054fe:	e01a      	b.n	8005536 <_dtoa_r+0x39e>
 8005500:	2502      	movs	r5, #2
 8005502:	e7a3      	b.n	800544c <_dtoa_r+0x2b4>
 8005504:	f000 80a0 	beq.w	8005648 <_dtoa_r+0x4b0>
 8005508:	f1ca 0600 	rsb	r6, sl, #0
 800550c:	4b9f      	ldr	r3, [pc, #636]	; (800578c <_dtoa_r+0x5f4>)
 800550e:	4fa0      	ldr	r7, [pc, #640]	; (8005790 <_dtoa_r+0x5f8>)
 8005510:	f006 020f 	and.w	r2, r6, #15
 8005514:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005520:	f7fb f86a 	bl	80005f8 <__aeabi_dmul>
 8005524:	e9cd 0100 	strd	r0, r1, [sp]
 8005528:	1136      	asrs	r6, r6, #4
 800552a:	2300      	movs	r3, #0
 800552c:	2502      	movs	r5, #2
 800552e:	2e00      	cmp	r6, #0
 8005530:	d17f      	bne.n	8005632 <_dtoa_r+0x49a>
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1e1      	bne.n	80054fa <_dtoa_r+0x362>
 8005536:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 8087 	beq.w	800564c <_dtoa_r+0x4b4>
 800553e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005542:	2200      	movs	r2, #0
 8005544:	4b93      	ldr	r3, [pc, #588]	; (8005794 <_dtoa_r+0x5fc>)
 8005546:	4630      	mov	r0, r6
 8005548:	4639      	mov	r1, r7
 800554a:	f7fb fac7 	bl	8000adc <__aeabi_dcmplt>
 800554e:	2800      	cmp	r0, #0
 8005550:	d07c      	beq.n	800564c <_dtoa_r+0x4b4>
 8005552:	f1b9 0f00 	cmp.w	r9, #0
 8005556:	d079      	beq.n	800564c <_dtoa_r+0x4b4>
 8005558:	9b02      	ldr	r3, [sp, #8]
 800555a:	2b00      	cmp	r3, #0
 800555c:	dd35      	ble.n	80055ca <_dtoa_r+0x432>
 800555e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005562:	9308      	str	r3, [sp, #32]
 8005564:	4639      	mov	r1, r7
 8005566:	2200      	movs	r2, #0
 8005568:	4b8b      	ldr	r3, [pc, #556]	; (8005798 <_dtoa_r+0x600>)
 800556a:	4630      	mov	r0, r6
 800556c:	f7fb f844 	bl	80005f8 <__aeabi_dmul>
 8005570:	e9cd 0100 	strd	r0, r1, [sp]
 8005574:	9f02      	ldr	r7, [sp, #8]
 8005576:	3501      	adds	r5, #1
 8005578:	4628      	mov	r0, r5
 800557a:	f7fa ffd3 	bl	8000524 <__aeabi_i2d>
 800557e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005582:	f7fb f839 	bl	80005f8 <__aeabi_dmul>
 8005586:	2200      	movs	r2, #0
 8005588:	4b84      	ldr	r3, [pc, #528]	; (800579c <_dtoa_r+0x604>)
 800558a:	f7fa fe7f 	bl	800028c <__adddf3>
 800558e:	4605      	mov	r5, r0
 8005590:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005594:	2f00      	cmp	r7, #0
 8005596:	d15d      	bne.n	8005654 <_dtoa_r+0x4bc>
 8005598:	2200      	movs	r2, #0
 800559a:	4b81      	ldr	r3, [pc, #516]	; (80057a0 <_dtoa_r+0x608>)
 800559c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80055a0:	f7fa fe72 	bl	8000288 <__aeabi_dsub>
 80055a4:	462a      	mov	r2, r5
 80055a6:	4633      	mov	r3, r6
 80055a8:	e9cd 0100 	strd	r0, r1, [sp]
 80055ac:	f7fb fab4 	bl	8000b18 <__aeabi_dcmpgt>
 80055b0:	2800      	cmp	r0, #0
 80055b2:	f040 8288 	bne.w	8005ac6 <_dtoa_r+0x92e>
 80055b6:	462a      	mov	r2, r5
 80055b8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80055bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80055c0:	f7fb fa8c 	bl	8000adc <__aeabi_dcmplt>
 80055c4:	2800      	cmp	r0, #0
 80055c6:	f040 827c 	bne.w	8005ac2 <_dtoa_r+0x92a>
 80055ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80055ce:	e9cd 2300 	strd	r2, r3, [sp]
 80055d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f2c0 8150 	blt.w	800587a <_dtoa_r+0x6e2>
 80055da:	f1ba 0f0e 	cmp.w	sl, #14
 80055de:	f300 814c 	bgt.w	800587a <_dtoa_r+0x6e2>
 80055e2:	4b6a      	ldr	r3, [pc, #424]	; (800578c <_dtoa_r+0x5f4>)
 80055e4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80055e8:	ed93 7b00 	vldr	d7, [r3]
 80055ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80055f4:	f280 80d8 	bge.w	80057a8 <_dtoa_r+0x610>
 80055f8:	f1b9 0f00 	cmp.w	r9, #0
 80055fc:	f300 80d4 	bgt.w	80057a8 <_dtoa_r+0x610>
 8005600:	f040 825e 	bne.w	8005ac0 <_dtoa_r+0x928>
 8005604:	2200      	movs	r2, #0
 8005606:	4b66      	ldr	r3, [pc, #408]	; (80057a0 <_dtoa_r+0x608>)
 8005608:	ec51 0b17 	vmov	r0, r1, d7
 800560c:	f7fa fff4 	bl	80005f8 <__aeabi_dmul>
 8005610:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005614:	f7fb fa76 	bl	8000b04 <__aeabi_dcmpge>
 8005618:	464f      	mov	r7, r9
 800561a:	464e      	mov	r6, r9
 800561c:	2800      	cmp	r0, #0
 800561e:	f040 8234 	bne.w	8005a8a <_dtoa_r+0x8f2>
 8005622:	2331      	movs	r3, #49	; 0x31
 8005624:	f10b 0501 	add.w	r5, fp, #1
 8005628:	f88b 3000 	strb.w	r3, [fp]
 800562c:	f10a 0a01 	add.w	sl, sl, #1
 8005630:	e22f      	b.n	8005a92 <_dtoa_r+0x8fa>
 8005632:	07f2      	lsls	r2, r6, #31
 8005634:	d505      	bpl.n	8005642 <_dtoa_r+0x4aa>
 8005636:	e9d7 2300 	ldrd	r2, r3, [r7]
 800563a:	f7fa ffdd 	bl	80005f8 <__aeabi_dmul>
 800563e:	3501      	adds	r5, #1
 8005640:	2301      	movs	r3, #1
 8005642:	1076      	asrs	r6, r6, #1
 8005644:	3708      	adds	r7, #8
 8005646:	e772      	b.n	800552e <_dtoa_r+0x396>
 8005648:	2502      	movs	r5, #2
 800564a:	e774      	b.n	8005536 <_dtoa_r+0x39e>
 800564c:	f8cd a020 	str.w	sl, [sp, #32]
 8005650:	464f      	mov	r7, r9
 8005652:	e791      	b.n	8005578 <_dtoa_r+0x3e0>
 8005654:	4b4d      	ldr	r3, [pc, #308]	; (800578c <_dtoa_r+0x5f4>)
 8005656:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800565a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800565e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005660:	2b00      	cmp	r3, #0
 8005662:	d047      	beq.n	80056f4 <_dtoa_r+0x55c>
 8005664:	4602      	mov	r2, r0
 8005666:	460b      	mov	r3, r1
 8005668:	2000      	movs	r0, #0
 800566a:	494e      	ldr	r1, [pc, #312]	; (80057a4 <_dtoa_r+0x60c>)
 800566c:	f7fb f8ee 	bl	800084c <__aeabi_ddiv>
 8005670:	462a      	mov	r2, r5
 8005672:	4633      	mov	r3, r6
 8005674:	f7fa fe08 	bl	8000288 <__aeabi_dsub>
 8005678:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800567c:	465d      	mov	r5, fp
 800567e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005682:	f7fb fa69 	bl	8000b58 <__aeabi_d2iz>
 8005686:	4606      	mov	r6, r0
 8005688:	f7fa ff4c 	bl	8000524 <__aeabi_i2d>
 800568c:	4602      	mov	r2, r0
 800568e:	460b      	mov	r3, r1
 8005690:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005694:	f7fa fdf8 	bl	8000288 <__aeabi_dsub>
 8005698:	3630      	adds	r6, #48	; 0x30
 800569a:	f805 6b01 	strb.w	r6, [r5], #1
 800569e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80056a2:	e9cd 0100 	strd	r0, r1, [sp]
 80056a6:	f7fb fa19 	bl	8000adc <__aeabi_dcmplt>
 80056aa:	2800      	cmp	r0, #0
 80056ac:	d163      	bne.n	8005776 <_dtoa_r+0x5de>
 80056ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80056b2:	2000      	movs	r0, #0
 80056b4:	4937      	ldr	r1, [pc, #220]	; (8005794 <_dtoa_r+0x5fc>)
 80056b6:	f7fa fde7 	bl	8000288 <__aeabi_dsub>
 80056ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80056be:	f7fb fa0d 	bl	8000adc <__aeabi_dcmplt>
 80056c2:	2800      	cmp	r0, #0
 80056c4:	f040 80b7 	bne.w	8005836 <_dtoa_r+0x69e>
 80056c8:	eba5 030b 	sub.w	r3, r5, fp
 80056cc:	429f      	cmp	r7, r3
 80056ce:	f77f af7c 	ble.w	80055ca <_dtoa_r+0x432>
 80056d2:	2200      	movs	r2, #0
 80056d4:	4b30      	ldr	r3, [pc, #192]	; (8005798 <_dtoa_r+0x600>)
 80056d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80056da:	f7fa ff8d 	bl	80005f8 <__aeabi_dmul>
 80056de:	2200      	movs	r2, #0
 80056e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80056e4:	4b2c      	ldr	r3, [pc, #176]	; (8005798 <_dtoa_r+0x600>)
 80056e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80056ea:	f7fa ff85 	bl	80005f8 <__aeabi_dmul>
 80056ee:	e9cd 0100 	strd	r0, r1, [sp]
 80056f2:	e7c4      	b.n	800567e <_dtoa_r+0x4e6>
 80056f4:	462a      	mov	r2, r5
 80056f6:	4633      	mov	r3, r6
 80056f8:	f7fa ff7e 	bl	80005f8 <__aeabi_dmul>
 80056fc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005700:	eb0b 0507 	add.w	r5, fp, r7
 8005704:	465e      	mov	r6, fp
 8005706:	e9dd 0100 	ldrd	r0, r1, [sp]
 800570a:	f7fb fa25 	bl	8000b58 <__aeabi_d2iz>
 800570e:	4607      	mov	r7, r0
 8005710:	f7fa ff08 	bl	8000524 <__aeabi_i2d>
 8005714:	3730      	adds	r7, #48	; 0x30
 8005716:	4602      	mov	r2, r0
 8005718:	460b      	mov	r3, r1
 800571a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800571e:	f7fa fdb3 	bl	8000288 <__aeabi_dsub>
 8005722:	f806 7b01 	strb.w	r7, [r6], #1
 8005726:	42ae      	cmp	r6, r5
 8005728:	e9cd 0100 	strd	r0, r1, [sp]
 800572c:	f04f 0200 	mov.w	r2, #0
 8005730:	d126      	bne.n	8005780 <_dtoa_r+0x5e8>
 8005732:	4b1c      	ldr	r3, [pc, #112]	; (80057a4 <_dtoa_r+0x60c>)
 8005734:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005738:	f7fa fda8 	bl	800028c <__adddf3>
 800573c:	4602      	mov	r2, r0
 800573e:	460b      	mov	r3, r1
 8005740:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005744:	f7fb f9e8 	bl	8000b18 <__aeabi_dcmpgt>
 8005748:	2800      	cmp	r0, #0
 800574a:	d174      	bne.n	8005836 <_dtoa_r+0x69e>
 800574c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005750:	2000      	movs	r0, #0
 8005752:	4914      	ldr	r1, [pc, #80]	; (80057a4 <_dtoa_r+0x60c>)
 8005754:	f7fa fd98 	bl	8000288 <__aeabi_dsub>
 8005758:	4602      	mov	r2, r0
 800575a:	460b      	mov	r3, r1
 800575c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005760:	f7fb f9bc 	bl	8000adc <__aeabi_dcmplt>
 8005764:	2800      	cmp	r0, #0
 8005766:	f43f af30 	beq.w	80055ca <_dtoa_r+0x432>
 800576a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800576e:	2b30      	cmp	r3, #48	; 0x30
 8005770:	f105 32ff 	add.w	r2, r5, #4294967295
 8005774:	d002      	beq.n	800577c <_dtoa_r+0x5e4>
 8005776:	f8dd a020 	ldr.w	sl, [sp, #32]
 800577a:	e04a      	b.n	8005812 <_dtoa_r+0x67a>
 800577c:	4615      	mov	r5, r2
 800577e:	e7f4      	b.n	800576a <_dtoa_r+0x5d2>
 8005780:	4b05      	ldr	r3, [pc, #20]	; (8005798 <_dtoa_r+0x600>)
 8005782:	f7fa ff39 	bl	80005f8 <__aeabi_dmul>
 8005786:	e9cd 0100 	strd	r0, r1, [sp]
 800578a:	e7bc      	b.n	8005706 <_dtoa_r+0x56e>
 800578c:	08006e98 	.word	0x08006e98
 8005790:	08006e70 	.word	0x08006e70
 8005794:	3ff00000 	.word	0x3ff00000
 8005798:	40240000 	.word	0x40240000
 800579c:	401c0000 	.word	0x401c0000
 80057a0:	40140000 	.word	0x40140000
 80057a4:	3fe00000 	.word	0x3fe00000
 80057a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80057ac:	465d      	mov	r5, fp
 80057ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057b2:	4630      	mov	r0, r6
 80057b4:	4639      	mov	r1, r7
 80057b6:	f7fb f849 	bl	800084c <__aeabi_ddiv>
 80057ba:	f7fb f9cd 	bl	8000b58 <__aeabi_d2iz>
 80057be:	4680      	mov	r8, r0
 80057c0:	f7fa feb0 	bl	8000524 <__aeabi_i2d>
 80057c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057c8:	f7fa ff16 	bl	80005f8 <__aeabi_dmul>
 80057cc:	4602      	mov	r2, r0
 80057ce:	460b      	mov	r3, r1
 80057d0:	4630      	mov	r0, r6
 80057d2:	4639      	mov	r1, r7
 80057d4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80057d8:	f7fa fd56 	bl	8000288 <__aeabi_dsub>
 80057dc:	f805 6b01 	strb.w	r6, [r5], #1
 80057e0:	eba5 060b 	sub.w	r6, r5, fp
 80057e4:	45b1      	cmp	r9, r6
 80057e6:	4602      	mov	r2, r0
 80057e8:	460b      	mov	r3, r1
 80057ea:	d139      	bne.n	8005860 <_dtoa_r+0x6c8>
 80057ec:	f7fa fd4e 	bl	800028c <__adddf3>
 80057f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057f4:	4606      	mov	r6, r0
 80057f6:	460f      	mov	r7, r1
 80057f8:	f7fb f98e 	bl	8000b18 <__aeabi_dcmpgt>
 80057fc:	b9c8      	cbnz	r0, 8005832 <_dtoa_r+0x69a>
 80057fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005802:	4630      	mov	r0, r6
 8005804:	4639      	mov	r1, r7
 8005806:	f7fb f95f 	bl	8000ac8 <__aeabi_dcmpeq>
 800580a:	b110      	cbz	r0, 8005812 <_dtoa_r+0x67a>
 800580c:	f018 0f01 	tst.w	r8, #1
 8005810:	d10f      	bne.n	8005832 <_dtoa_r+0x69a>
 8005812:	9904      	ldr	r1, [sp, #16]
 8005814:	4620      	mov	r0, r4
 8005816:	f000 fcaa 	bl	800616e <_Bfree>
 800581a:	2300      	movs	r3, #0
 800581c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800581e:	702b      	strb	r3, [r5, #0]
 8005820:	f10a 0301 	add.w	r3, sl, #1
 8005824:	6013      	str	r3, [r2, #0]
 8005826:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005828:	2b00      	cmp	r3, #0
 800582a:	f000 8241 	beq.w	8005cb0 <_dtoa_r+0xb18>
 800582e:	601d      	str	r5, [r3, #0]
 8005830:	e23e      	b.n	8005cb0 <_dtoa_r+0xb18>
 8005832:	f8cd a020 	str.w	sl, [sp, #32]
 8005836:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800583a:	2a39      	cmp	r2, #57	; 0x39
 800583c:	f105 33ff 	add.w	r3, r5, #4294967295
 8005840:	d108      	bne.n	8005854 <_dtoa_r+0x6bc>
 8005842:	459b      	cmp	fp, r3
 8005844:	d10a      	bne.n	800585c <_dtoa_r+0x6c4>
 8005846:	9b08      	ldr	r3, [sp, #32]
 8005848:	3301      	adds	r3, #1
 800584a:	9308      	str	r3, [sp, #32]
 800584c:	2330      	movs	r3, #48	; 0x30
 800584e:	f88b 3000 	strb.w	r3, [fp]
 8005852:	465b      	mov	r3, fp
 8005854:	781a      	ldrb	r2, [r3, #0]
 8005856:	3201      	adds	r2, #1
 8005858:	701a      	strb	r2, [r3, #0]
 800585a:	e78c      	b.n	8005776 <_dtoa_r+0x5de>
 800585c:	461d      	mov	r5, r3
 800585e:	e7ea      	b.n	8005836 <_dtoa_r+0x69e>
 8005860:	2200      	movs	r2, #0
 8005862:	4b9b      	ldr	r3, [pc, #620]	; (8005ad0 <_dtoa_r+0x938>)
 8005864:	f7fa fec8 	bl	80005f8 <__aeabi_dmul>
 8005868:	2200      	movs	r2, #0
 800586a:	2300      	movs	r3, #0
 800586c:	4606      	mov	r6, r0
 800586e:	460f      	mov	r7, r1
 8005870:	f7fb f92a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005874:	2800      	cmp	r0, #0
 8005876:	d09a      	beq.n	80057ae <_dtoa_r+0x616>
 8005878:	e7cb      	b.n	8005812 <_dtoa_r+0x67a>
 800587a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800587c:	2a00      	cmp	r2, #0
 800587e:	f000 808b 	beq.w	8005998 <_dtoa_r+0x800>
 8005882:	9a06      	ldr	r2, [sp, #24]
 8005884:	2a01      	cmp	r2, #1
 8005886:	dc6e      	bgt.n	8005966 <_dtoa_r+0x7ce>
 8005888:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800588a:	2a00      	cmp	r2, #0
 800588c:	d067      	beq.n	800595e <_dtoa_r+0x7c6>
 800588e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005892:	9f07      	ldr	r7, [sp, #28]
 8005894:	9d05      	ldr	r5, [sp, #20]
 8005896:	9a05      	ldr	r2, [sp, #20]
 8005898:	2101      	movs	r1, #1
 800589a:	441a      	add	r2, r3
 800589c:	4620      	mov	r0, r4
 800589e:	9205      	str	r2, [sp, #20]
 80058a0:	4498      	add	r8, r3
 80058a2:	f000 fd04 	bl	80062ae <__i2b>
 80058a6:	4606      	mov	r6, r0
 80058a8:	2d00      	cmp	r5, #0
 80058aa:	dd0c      	ble.n	80058c6 <_dtoa_r+0x72e>
 80058ac:	f1b8 0f00 	cmp.w	r8, #0
 80058b0:	dd09      	ble.n	80058c6 <_dtoa_r+0x72e>
 80058b2:	4545      	cmp	r5, r8
 80058b4:	9a05      	ldr	r2, [sp, #20]
 80058b6:	462b      	mov	r3, r5
 80058b8:	bfa8      	it	ge
 80058ba:	4643      	movge	r3, r8
 80058bc:	1ad2      	subs	r2, r2, r3
 80058be:	9205      	str	r2, [sp, #20]
 80058c0:	1aed      	subs	r5, r5, r3
 80058c2:	eba8 0803 	sub.w	r8, r8, r3
 80058c6:	9b07      	ldr	r3, [sp, #28]
 80058c8:	b1eb      	cbz	r3, 8005906 <_dtoa_r+0x76e>
 80058ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d067      	beq.n	80059a0 <_dtoa_r+0x808>
 80058d0:	b18f      	cbz	r7, 80058f6 <_dtoa_r+0x75e>
 80058d2:	4631      	mov	r1, r6
 80058d4:	463a      	mov	r2, r7
 80058d6:	4620      	mov	r0, r4
 80058d8:	f000 fd88 	bl	80063ec <__pow5mult>
 80058dc:	9a04      	ldr	r2, [sp, #16]
 80058de:	4601      	mov	r1, r0
 80058e0:	4606      	mov	r6, r0
 80058e2:	4620      	mov	r0, r4
 80058e4:	f000 fcec 	bl	80062c0 <__multiply>
 80058e8:	9904      	ldr	r1, [sp, #16]
 80058ea:	9008      	str	r0, [sp, #32]
 80058ec:	4620      	mov	r0, r4
 80058ee:	f000 fc3e 	bl	800616e <_Bfree>
 80058f2:	9b08      	ldr	r3, [sp, #32]
 80058f4:	9304      	str	r3, [sp, #16]
 80058f6:	9b07      	ldr	r3, [sp, #28]
 80058f8:	1bda      	subs	r2, r3, r7
 80058fa:	d004      	beq.n	8005906 <_dtoa_r+0x76e>
 80058fc:	9904      	ldr	r1, [sp, #16]
 80058fe:	4620      	mov	r0, r4
 8005900:	f000 fd74 	bl	80063ec <__pow5mult>
 8005904:	9004      	str	r0, [sp, #16]
 8005906:	2101      	movs	r1, #1
 8005908:	4620      	mov	r0, r4
 800590a:	f000 fcd0 	bl	80062ae <__i2b>
 800590e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005910:	4607      	mov	r7, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	f000 81d0 	beq.w	8005cb8 <_dtoa_r+0xb20>
 8005918:	461a      	mov	r2, r3
 800591a:	4601      	mov	r1, r0
 800591c:	4620      	mov	r0, r4
 800591e:	f000 fd65 	bl	80063ec <__pow5mult>
 8005922:	9b06      	ldr	r3, [sp, #24]
 8005924:	2b01      	cmp	r3, #1
 8005926:	4607      	mov	r7, r0
 8005928:	dc40      	bgt.n	80059ac <_dtoa_r+0x814>
 800592a:	9b00      	ldr	r3, [sp, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d139      	bne.n	80059a4 <_dtoa_r+0x80c>
 8005930:	9b01      	ldr	r3, [sp, #4]
 8005932:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005936:	2b00      	cmp	r3, #0
 8005938:	d136      	bne.n	80059a8 <_dtoa_r+0x810>
 800593a:	9b01      	ldr	r3, [sp, #4]
 800593c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005940:	0d1b      	lsrs	r3, r3, #20
 8005942:	051b      	lsls	r3, r3, #20
 8005944:	b12b      	cbz	r3, 8005952 <_dtoa_r+0x7ba>
 8005946:	9b05      	ldr	r3, [sp, #20]
 8005948:	3301      	adds	r3, #1
 800594a:	9305      	str	r3, [sp, #20]
 800594c:	f108 0801 	add.w	r8, r8, #1
 8005950:	2301      	movs	r3, #1
 8005952:	9307      	str	r3, [sp, #28]
 8005954:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005956:	2b00      	cmp	r3, #0
 8005958:	d12a      	bne.n	80059b0 <_dtoa_r+0x818>
 800595a:	2001      	movs	r0, #1
 800595c:	e030      	b.n	80059c0 <_dtoa_r+0x828>
 800595e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005960:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005964:	e795      	b.n	8005892 <_dtoa_r+0x6fa>
 8005966:	9b07      	ldr	r3, [sp, #28]
 8005968:	f109 37ff 	add.w	r7, r9, #4294967295
 800596c:	42bb      	cmp	r3, r7
 800596e:	bfbf      	itttt	lt
 8005970:	9b07      	ldrlt	r3, [sp, #28]
 8005972:	9707      	strlt	r7, [sp, #28]
 8005974:	1afa      	sublt	r2, r7, r3
 8005976:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005978:	bfbb      	ittet	lt
 800597a:	189b      	addlt	r3, r3, r2
 800597c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800597e:	1bdf      	subge	r7, r3, r7
 8005980:	2700      	movlt	r7, #0
 8005982:	f1b9 0f00 	cmp.w	r9, #0
 8005986:	bfb5      	itete	lt
 8005988:	9b05      	ldrlt	r3, [sp, #20]
 800598a:	9d05      	ldrge	r5, [sp, #20]
 800598c:	eba3 0509 	sublt.w	r5, r3, r9
 8005990:	464b      	movge	r3, r9
 8005992:	bfb8      	it	lt
 8005994:	2300      	movlt	r3, #0
 8005996:	e77e      	b.n	8005896 <_dtoa_r+0x6fe>
 8005998:	9f07      	ldr	r7, [sp, #28]
 800599a:	9d05      	ldr	r5, [sp, #20]
 800599c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800599e:	e783      	b.n	80058a8 <_dtoa_r+0x710>
 80059a0:	9a07      	ldr	r2, [sp, #28]
 80059a2:	e7ab      	b.n	80058fc <_dtoa_r+0x764>
 80059a4:	2300      	movs	r3, #0
 80059a6:	e7d4      	b.n	8005952 <_dtoa_r+0x7ba>
 80059a8:	9b00      	ldr	r3, [sp, #0]
 80059aa:	e7d2      	b.n	8005952 <_dtoa_r+0x7ba>
 80059ac:	2300      	movs	r3, #0
 80059ae:	9307      	str	r3, [sp, #28]
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80059b6:	6918      	ldr	r0, [r3, #16]
 80059b8:	f000 fc2b 	bl	8006212 <__hi0bits>
 80059bc:	f1c0 0020 	rsb	r0, r0, #32
 80059c0:	4440      	add	r0, r8
 80059c2:	f010 001f 	ands.w	r0, r0, #31
 80059c6:	d047      	beq.n	8005a58 <_dtoa_r+0x8c0>
 80059c8:	f1c0 0320 	rsb	r3, r0, #32
 80059cc:	2b04      	cmp	r3, #4
 80059ce:	dd3b      	ble.n	8005a48 <_dtoa_r+0x8b0>
 80059d0:	9b05      	ldr	r3, [sp, #20]
 80059d2:	f1c0 001c 	rsb	r0, r0, #28
 80059d6:	4403      	add	r3, r0
 80059d8:	9305      	str	r3, [sp, #20]
 80059da:	4405      	add	r5, r0
 80059dc:	4480      	add	r8, r0
 80059de:	9b05      	ldr	r3, [sp, #20]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	dd05      	ble.n	80059f0 <_dtoa_r+0x858>
 80059e4:	461a      	mov	r2, r3
 80059e6:	9904      	ldr	r1, [sp, #16]
 80059e8:	4620      	mov	r0, r4
 80059ea:	f000 fd4d 	bl	8006488 <__lshift>
 80059ee:	9004      	str	r0, [sp, #16]
 80059f0:	f1b8 0f00 	cmp.w	r8, #0
 80059f4:	dd05      	ble.n	8005a02 <_dtoa_r+0x86a>
 80059f6:	4639      	mov	r1, r7
 80059f8:	4642      	mov	r2, r8
 80059fa:	4620      	mov	r0, r4
 80059fc:	f000 fd44 	bl	8006488 <__lshift>
 8005a00:	4607      	mov	r7, r0
 8005a02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a04:	b353      	cbz	r3, 8005a5c <_dtoa_r+0x8c4>
 8005a06:	4639      	mov	r1, r7
 8005a08:	9804      	ldr	r0, [sp, #16]
 8005a0a:	f000 fd91 	bl	8006530 <__mcmp>
 8005a0e:	2800      	cmp	r0, #0
 8005a10:	da24      	bge.n	8005a5c <_dtoa_r+0x8c4>
 8005a12:	2300      	movs	r3, #0
 8005a14:	220a      	movs	r2, #10
 8005a16:	9904      	ldr	r1, [sp, #16]
 8005a18:	4620      	mov	r0, r4
 8005a1a:	f000 fbbf 	bl	800619c <__multadd>
 8005a1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a20:	9004      	str	r0, [sp, #16]
 8005a22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f000 814d 	beq.w	8005cc6 <_dtoa_r+0xb2e>
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	4631      	mov	r1, r6
 8005a30:	220a      	movs	r2, #10
 8005a32:	4620      	mov	r0, r4
 8005a34:	f000 fbb2 	bl	800619c <__multadd>
 8005a38:	9b02      	ldr	r3, [sp, #8]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	4606      	mov	r6, r0
 8005a3e:	dc4f      	bgt.n	8005ae0 <_dtoa_r+0x948>
 8005a40:	9b06      	ldr	r3, [sp, #24]
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	dd4c      	ble.n	8005ae0 <_dtoa_r+0x948>
 8005a46:	e011      	b.n	8005a6c <_dtoa_r+0x8d4>
 8005a48:	d0c9      	beq.n	80059de <_dtoa_r+0x846>
 8005a4a:	9a05      	ldr	r2, [sp, #20]
 8005a4c:	331c      	adds	r3, #28
 8005a4e:	441a      	add	r2, r3
 8005a50:	9205      	str	r2, [sp, #20]
 8005a52:	441d      	add	r5, r3
 8005a54:	4498      	add	r8, r3
 8005a56:	e7c2      	b.n	80059de <_dtoa_r+0x846>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	e7f6      	b.n	8005a4a <_dtoa_r+0x8b2>
 8005a5c:	f1b9 0f00 	cmp.w	r9, #0
 8005a60:	dc38      	bgt.n	8005ad4 <_dtoa_r+0x93c>
 8005a62:	9b06      	ldr	r3, [sp, #24]
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	dd35      	ble.n	8005ad4 <_dtoa_r+0x93c>
 8005a68:	f8cd 9008 	str.w	r9, [sp, #8]
 8005a6c:	9b02      	ldr	r3, [sp, #8]
 8005a6e:	b963      	cbnz	r3, 8005a8a <_dtoa_r+0x8f2>
 8005a70:	4639      	mov	r1, r7
 8005a72:	2205      	movs	r2, #5
 8005a74:	4620      	mov	r0, r4
 8005a76:	f000 fb91 	bl	800619c <__multadd>
 8005a7a:	4601      	mov	r1, r0
 8005a7c:	4607      	mov	r7, r0
 8005a7e:	9804      	ldr	r0, [sp, #16]
 8005a80:	f000 fd56 	bl	8006530 <__mcmp>
 8005a84:	2800      	cmp	r0, #0
 8005a86:	f73f adcc 	bgt.w	8005622 <_dtoa_r+0x48a>
 8005a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a8c:	465d      	mov	r5, fp
 8005a8e:	ea6f 0a03 	mvn.w	sl, r3
 8005a92:	f04f 0900 	mov.w	r9, #0
 8005a96:	4639      	mov	r1, r7
 8005a98:	4620      	mov	r0, r4
 8005a9a:	f000 fb68 	bl	800616e <_Bfree>
 8005a9e:	2e00      	cmp	r6, #0
 8005aa0:	f43f aeb7 	beq.w	8005812 <_dtoa_r+0x67a>
 8005aa4:	f1b9 0f00 	cmp.w	r9, #0
 8005aa8:	d005      	beq.n	8005ab6 <_dtoa_r+0x91e>
 8005aaa:	45b1      	cmp	r9, r6
 8005aac:	d003      	beq.n	8005ab6 <_dtoa_r+0x91e>
 8005aae:	4649      	mov	r1, r9
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	f000 fb5c 	bl	800616e <_Bfree>
 8005ab6:	4631      	mov	r1, r6
 8005ab8:	4620      	mov	r0, r4
 8005aba:	f000 fb58 	bl	800616e <_Bfree>
 8005abe:	e6a8      	b.n	8005812 <_dtoa_r+0x67a>
 8005ac0:	2700      	movs	r7, #0
 8005ac2:	463e      	mov	r6, r7
 8005ac4:	e7e1      	b.n	8005a8a <_dtoa_r+0x8f2>
 8005ac6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005aca:	463e      	mov	r6, r7
 8005acc:	e5a9      	b.n	8005622 <_dtoa_r+0x48a>
 8005ace:	bf00      	nop
 8005ad0:	40240000 	.word	0x40240000
 8005ad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ad6:	f8cd 9008 	str.w	r9, [sp, #8]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f000 80fa 	beq.w	8005cd4 <_dtoa_r+0xb3c>
 8005ae0:	2d00      	cmp	r5, #0
 8005ae2:	dd05      	ble.n	8005af0 <_dtoa_r+0x958>
 8005ae4:	4631      	mov	r1, r6
 8005ae6:	462a      	mov	r2, r5
 8005ae8:	4620      	mov	r0, r4
 8005aea:	f000 fccd 	bl	8006488 <__lshift>
 8005aee:	4606      	mov	r6, r0
 8005af0:	9b07      	ldr	r3, [sp, #28]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d04c      	beq.n	8005b90 <_dtoa_r+0x9f8>
 8005af6:	6871      	ldr	r1, [r6, #4]
 8005af8:	4620      	mov	r0, r4
 8005afa:	f000 fb04 	bl	8006106 <_Balloc>
 8005afe:	6932      	ldr	r2, [r6, #16]
 8005b00:	3202      	adds	r2, #2
 8005b02:	4605      	mov	r5, r0
 8005b04:	0092      	lsls	r2, r2, #2
 8005b06:	f106 010c 	add.w	r1, r6, #12
 8005b0a:	300c      	adds	r0, #12
 8005b0c:	f000 faf0 	bl	80060f0 <memcpy>
 8005b10:	2201      	movs	r2, #1
 8005b12:	4629      	mov	r1, r5
 8005b14:	4620      	mov	r0, r4
 8005b16:	f000 fcb7 	bl	8006488 <__lshift>
 8005b1a:	9b00      	ldr	r3, [sp, #0]
 8005b1c:	f8cd b014 	str.w	fp, [sp, #20]
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	46b1      	mov	r9, r6
 8005b26:	9307      	str	r3, [sp, #28]
 8005b28:	4606      	mov	r6, r0
 8005b2a:	4639      	mov	r1, r7
 8005b2c:	9804      	ldr	r0, [sp, #16]
 8005b2e:	f7ff faa5 	bl	800507c <quorem>
 8005b32:	4649      	mov	r1, r9
 8005b34:	4605      	mov	r5, r0
 8005b36:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005b3a:	9804      	ldr	r0, [sp, #16]
 8005b3c:	f000 fcf8 	bl	8006530 <__mcmp>
 8005b40:	4632      	mov	r2, r6
 8005b42:	9000      	str	r0, [sp, #0]
 8005b44:	4639      	mov	r1, r7
 8005b46:	4620      	mov	r0, r4
 8005b48:	f000 fd0c 	bl	8006564 <__mdiff>
 8005b4c:	68c3      	ldr	r3, [r0, #12]
 8005b4e:	4602      	mov	r2, r0
 8005b50:	bb03      	cbnz	r3, 8005b94 <_dtoa_r+0x9fc>
 8005b52:	4601      	mov	r1, r0
 8005b54:	9008      	str	r0, [sp, #32]
 8005b56:	9804      	ldr	r0, [sp, #16]
 8005b58:	f000 fcea 	bl	8006530 <__mcmp>
 8005b5c:	9a08      	ldr	r2, [sp, #32]
 8005b5e:	4603      	mov	r3, r0
 8005b60:	4611      	mov	r1, r2
 8005b62:	4620      	mov	r0, r4
 8005b64:	9308      	str	r3, [sp, #32]
 8005b66:	f000 fb02 	bl	800616e <_Bfree>
 8005b6a:	9b08      	ldr	r3, [sp, #32]
 8005b6c:	b9a3      	cbnz	r3, 8005b98 <_dtoa_r+0xa00>
 8005b6e:	9a06      	ldr	r2, [sp, #24]
 8005b70:	b992      	cbnz	r2, 8005b98 <_dtoa_r+0xa00>
 8005b72:	9a07      	ldr	r2, [sp, #28]
 8005b74:	b982      	cbnz	r2, 8005b98 <_dtoa_r+0xa00>
 8005b76:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005b7a:	d029      	beq.n	8005bd0 <_dtoa_r+0xa38>
 8005b7c:	9b00      	ldr	r3, [sp, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	dd01      	ble.n	8005b86 <_dtoa_r+0x9ee>
 8005b82:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005b86:	9b05      	ldr	r3, [sp, #20]
 8005b88:	1c5d      	adds	r5, r3, #1
 8005b8a:	f883 8000 	strb.w	r8, [r3]
 8005b8e:	e782      	b.n	8005a96 <_dtoa_r+0x8fe>
 8005b90:	4630      	mov	r0, r6
 8005b92:	e7c2      	b.n	8005b1a <_dtoa_r+0x982>
 8005b94:	2301      	movs	r3, #1
 8005b96:	e7e3      	b.n	8005b60 <_dtoa_r+0x9c8>
 8005b98:	9a00      	ldr	r2, [sp, #0]
 8005b9a:	2a00      	cmp	r2, #0
 8005b9c:	db04      	blt.n	8005ba8 <_dtoa_r+0xa10>
 8005b9e:	d125      	bne.n	8005bec <_dtoa_r+0xa54>
 8005ba0:	9a06      	ldr	r2, [sp, #24]
 8005ba2:	bb1a      	cbnz	r2, 8005bec <_dtoa_r+0xa54>
 8005ba4:	9a07      	ldr	r2, [sp, #28]
 8005ba6:	bb0a      	cbnz	r2, 8005bec <_dtoa_r+0xa54>
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	ddec      	ble.n	8005b86 <_dtoa_r+0x9ee>
 8005bac:	2201      	movs	r2, #1
 8005bae:	9904      	ldr	r1, [sp, #16]
 8005bb0:	4620      	mov	r0, r4
 8005bb2:	f000 fc69 	bl	8006488 <__lshift>
 8005bb6:	4639      	mov	r1, r7
 8005bb8:	9004      	str	r0, [sp, #16]
 8005bba:	f000 fcb9 	bl	8006530 <__mcmp>
 8005bbe:	2800      	cmp	r0, #0
 8005bc0:	dc03      	bgt.n	8005bca <_dtoa_r+0xa32>
 8005bc2:	d1e0      	bne.n	8005b86 <_dtoa_r+0x9ee>
 8005bc4:	f018 0f01 	tst.w	r8, #1
 8005bc8:	d0dd      	beq.n	8005b86 <_dtoa_r+0x9ee>
 8005bca:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005bce:	d1d8      	bne.n	8005b82 <_dtoa_r+0x9ea>
 8005bd0:	9b05      	ldr	r3, [sp, #20]
 8005bd2:	9a05      	ldr	r2, [sp, #20]
 8005bd4:	1c5d      	adds	r5, r3, #1
 8005bd6:	2339      	movs	r3, #57	; 0x39
 8005bd8:	7013      	strb	r3, [r2, #0]
 8005bda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005bde:	2b39      	cmp	r3, #57	; 0x39
 8005be0:	f105 32ff 	add.w	r2, r5, #4294967295
 8005be4:	d04f      	beq.n	8005c86 <_dtoa_r+0xaee>
 8005be6:	3301      	adds	r3, #1
 8005be8:	7013      	strb	r3, [r2, #0]
 8005bea:	e754      	b.n	8005a96 <_dtoa_r+0x8fe>
 8005bec:	9a05      	ldr	r2, [sp, #20]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f102 0501 	add.w	r5, r2, #1
 8005bf4:	dd06      	ble.n	8005c04 <_dtoa_r+0xa6c>
 8005bf6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005bfa:	d0e9      	beq.n	8005bd0 <_dtoa_r+0xa38>
 8005bfc:	f108 0801 	add.w	r8, r8, #1
 8005c00:	9b05      	ldr	r3, [sp, #20]
 8005c02:	e7c2      	b.n	8005b8a <_dtoa_r+0x9f2>
 8005c04:	9a02      	ldr	r2, [sp, #8]
 8005c06:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005c0a:	eba5 030b 	sub.w	r3, r5, fp
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d021      	beq.n	8005c56 <_dtoa_r+0xabe>
 8005c12:	2300      	movs	r3, #0
 8005c14:	220a      	movs	r2, #10
 8005c16:	9904      	ldr	r1, [sp, #16]
 8005c18:	4620      	mov	r0, r4
 8005c1a:	f000 fabf 	bl	800619c <__multadd>
 8005c1e:	45b1      	cmp	r9, r6
 8005c20:	9004      	str	r0, [sp, #16]
 8005c22:	f04f 0300 	mov.w	r3, #0
 8005c26:	f04f 020a 	mov.w	r2, #10
 8005c2a:	4649      	mov	r1, r9
 8005c2c:	4620      	mov	r0, r4
 8005c2e:	d105      	bne.n	8005c3c <_dtoa_r+0xaa4>
 8005c30:	f000 fab4 	bl	800619c <__multadd>
 8005c34:	4681      	mov	r9, r0
 8005c36:	4606      	mov	r6, r0
 8005c38:	9505      	str	r5, [sp, #20]
 8005c3a:	e776      	b.n	8005b2a <_dtoa_r+0x992>
 8005c3c:	f000 faae 	bl	800619c <__multadd>
 8005c40:	4631      	mov	r1, r6
 8005c42:	4681      	mov	r9, r0
 8005c44:	2300      	movs	r3, #0
 8005c46:	220a      	movs	r2, #10
 8005c48:	4620      	mov	r0, r4
 8005c4a:	f000 faa7 	bl	800619c <__multadd>
 8005c4e:	4606      	mov	r6, r0
 8005c50:	e7f2      	b.n	8005c38 <_dtoa_r+0xaa0>
 8005c52:	f04f 0900 	mov.w	r9, #0
 8005c56:	2201      	movs	r2, #1
 8005c58:	9904      	ldr	r1, [sp, #16]
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	f000 fc14 	bl	8006488 <__lshift>
 8005c60:	4639      	mov	r1, r7
 8005c62:	9004      	str	r0, [sp, #16]
 8005c64:	f000 fc64 	bl	8006530 <__mcmp>
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	dcb6      	bgt.n	8005bda <_dtoa_r+0xa42>
 8005c6c:	d102      	bne.n	8005c74 <_dtoa_r+0xadc>
 8005c6e:	f018 0f01 	tst.w	r8, #1
 8005c72:	d1b2      	bne.n	8005bda <_dtoa_r+0xa42>
 8005c74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c78:	2b30      	cmp	r3, #48	; 0x30
 8005c7a:	f105 32ff 	add.w	r2, r5, #4294967295
 8005c7e:	f47f af0a 	bne.w	8005a96 <_dtoa_r+0x8fe>
 8005c82:	4615      	mov	r5, r2
 8005c84:	e7f6      	b.n	8005c74 <_dtoa_r+0xadc>
 8005c86:	4593      	cmp	fp, r2
 8005c88:	d105      	bne.n	8005c96 <_dtoa_r+0xafe>
 8005c8a:	2331      	movs	r3, #49	; 0x31
 8005c8c:	f10a 0a01 	add.w	sl, sl, #1
 8005c90:	f88b 3000 	strb.w	r3, [fp]
 8005c94:	e6ff      	b.n	8005a96 <_dtoa_r+0x8fe>
 8005c96:	4615      	mov	r5, r2
 8005c98:	e79f      	b.n	8005bda <_dtoa_r+0xa42>
 8005c9a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005d00 <_dtoa_r+0xb68>
 8005c9e:	e007      	b.n	8005cb0 <_dtoa_r+0xb18>
 8005ca0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ca2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005d04 <_dtoa_r+0xb6c>
 8005ca6:	b11b      	cbz	r3, 8005cb0 <_dtoa_r+0xb18>
 8005ca8:	f10b 0308 	add.w	r3, fp, #8
 8005cac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005cae:	6013      	str	r3, [r2, #0]
 8005cb0:	4658      	mov	r0, fp
 8005cb2:	b017      	add	sp, #92	; 0x5c
 8005cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cb8:	9b06      	ldr	r3, [sp, #24]
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	f77f ae35 	ble.w	800592a <_dtoa_r+0x792>
 8005cc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cc2:	9307      	str	r3, [sp, #28]
 8005cc4:	e649      	b.n	800595a <_dtoa_r+0x7c2>
 8005cc6:	9b02      	ldr	r3, [sp, #8]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	dc03      	bgt.n	8005cd4 <_dtoa_r+0xb3c>
 8005ccc:	9b06      	ldr	r3, [sp, #24]
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	f73f aecc 	bgt.w	8005a6c <_dtoa_r+0x8d4>
 8005cd4:	465d      	mov	r5, fp
 8005cd6:	4639      	mov	r1, r7
 8005cd8:	9804      	ldr	r0, [sp, #16]
 8005cda:	f7ff f9cf 	bl	800507c <quorem>
 8005cde:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005ce2:	f805 8b01 	strb.w	r8, [r5], #1
 8005ce6:	9a02      	ldr	r2, [sp, #8]
 8005ce8:	eba5 030b 	sub.w	r3, r5, fp
 8005cec:	429a      	cmp	r2, r3
 8005cee:	ddb0      	ble.n	8005c52 <_dtoa_r+0xaba>
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	220a      	movs	r2, #10
 8005cf4:	9904      	ldr	r1, [sp, #16]
 8005cf6:	4620      	mov	r0, r4
 8005cf8:	f000 fa50 	bl	800619c <__multadd>
 8005cfc:	9004      	str	r0, [sp, #16]
 8005cfe:	e7ea      	b.n	8005cd6 <_dtoa_r+0xb3e>
 8005d00:	08006ddc 	.word	0x08006ddc
 8005d04:	08006e00 	.word	0x08006e00

08005d08 <__sflush_r>:
 8005d08:	898a      	ldrh	r2, [r1, #12]
 8005d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d0e:	4605      	mov	r5, r0
 8005d10:	0710      	lsls	r0, r2, #28
 8005d12:	460c      	mov	r4, r1
 8005d14:	d458      	bmi.n	8005dc8 <__sflush_r+0xc0>
 8005d16:	684b      	ldr	r3, [r1, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	dc05      	bgt.n	8005d28 <__sflush_r+0x20>
 8005d1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	dc02      	bgt.n	8005d28 <__sflush_r+0x20>
 8005d22:	2000      	movs	r0, #0
 8005d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d2a:	2e00      	cmp	r6, #0
 8005d2c:	d0f9      	beq.n	8005d22 <__sflush_r+0x1a>
 8005d2e:	2300      	movs	r3, #0
 8005d30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d34:	682f      	ldr	r7, [r5, #0]
 8005d36:	6a21      	ldr	r1, [r4, #32]
 8005d38:	602b      	str	r3, [r5, #0]
 8005d3a:	d032      	beq.n	8005da2 <__sflush_r+0x9a>
 8005d3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d3e:	89a3      	ldrh	r3, [r4, #12]
 8005d40:	075a      	lsls	r2, r3, #29
 8005d42:	d505      	bpl.n	8005d50 <__sflush_r+0x48>
 8005d44:	6863      	ldr	r3, [r4, #4]
 8005d46:	1ac0      	subs	r0, r0, r3
 8005d48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d4a:	b10b      	cbz	r3, 8005d50 <__sflush_r+0x48>
 8005d4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d4e:	1ac0      	subs	r0, r0, r3
 8005d50:	2300      	movs	r3, #0
 8005d52:	4602      	mov	r2, r0
 8005d54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d56:	6a21      	ldr	r1, [r4, #32]
 8005d58:	4628      	mov	r0, r5
 8005d5a:	47b0      	blx	r6
 8005d5c:	1c43      	adds	r3, r0, #1
 8005d5e:	89a3      	ldrh	r3, [r4, #12]
 8005d60:	d106      	bne.n	8005d70 <__sflush_r+0x68>
 8005d62:	6829      	ldr	r1, [r5, #0]
 8005d64:	291d      	cmp	r1, #29
 8005d66:	d848      	bhi.n	8005dfa <__sflush_r+0xf2>
 8005d68:	4a29      	ldr	r2, [pc, #164]	; (8005e10 <__sflush_r+0x108>)
 8005d6a:	40ca      	lsrs	r2, r1
 8005d6c:	07d6      	lsls	r6, r2, #31
 8005d6e:	d544      	bpl.n	8005dfa <__sflush_r+0xf2>
 8005d70:	2200      	movs	r2, #0
 8005d72:	6062      	str	r2, [r4, #4]
 8005d74:	04d9      	lsls	r1, r3, #19
 8005d76:	6922      	ldr	r2, [r4, #16]
 8005d78:	6022      	str	r2, [r4, #0]
 8005d7a:	d504      	bpl.n	8005d86 <__sflush_r+0x7e>
 8005d7c:	1c42      	adds	r2, r0, #1
 8005d7e:	d101      	bne.n	8005d84 <__sflush_r+0x7c>
 8005d80:	682b      	ldr	r3, [r5, #0]
 8005d82:	b903      	cbnz	r3, 8005d86 <__sflush_r+0x7e>
 8005d84:	6560      	str	r0, [r4, #84]	; 0x54
 8005d86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d88:	602f      	str	r7, [r5, #0]
 8005d8a:	2900      	cmp	r1, #0
 8005d8c:	d0c9      	beq.n	8005d22 <__sflush_r+0x1a>
 8005d8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d92:	4299      	cmp	r1, r3
 8005d94:	d002      	beq.n	8005d9c <__sflush_r+0x94>
 8005d96:	4628      	mov	r0, r5
 8005d98:	f000 fc9e 	bl	80066d8 <_free_r>
 8005d9c:	2000      	movs	r0, #0
 8005d9e:	6360      	str	r0, [r4, #52]	; 0x34
 8005da0:	e7c0      	b.n	8005d24 <__sflush_r+0x1c>
 8005da2:	2301      	movs	r3, #1
 8005da4:	4628      	mov	r0, r5
 8005da6:	47b0      	blx	r6
 8005da8:	1c41      	adds	r1, r0, #1
 8005daa:	d1c8      	bne.n	8005d3e <__sflush_r+0x36>
 8005dac:	682b      	ldr	r3, [r5, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d0c5      	beq.n	8005d3e <__sflush_r+0x36>
 8005db2:	2b1d      	cmp	r3, #29
 8005db4:	d001      	beq.n	8005dba <__sflush_r+0xb2>
 8005db6:	2b16      	cmp	r3, #22
 8005db8:	d101      	bne.n	8005dbe <__sflush_r+0xb6>
 8005dba:	602f      	str	r7, [r5, #0]
 8005dbc:	e7b1      	b.n	8005d22 <__sflush_r+0x1a>
 8005dbe:	89a3      	ldrh	r3, [r4, #12]
 8005dc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dc4:	81a3      	strh	r3, [r4, #12]
 8005dc6:	e7ad      	b.n	8005d24 <__sflush_r+0x1c>
 8005dc8:	690f      	ldr	r7, [r1, #16]
 8005dca:	2f00      	cmp	r7, #0
 8005dcc:	d0a9      	beq.n	8005d22 <__sflush_r+0x1a>
 8005dce:	0793      	lsls	r3, r2, #30
 8005dd0:	680e      	ldr	r6, [r1, #0]
 8005dd2:	bf08      	it	eq
 8005dd4:	694b      	ldreq	r3, [r1, #20]
 8005dd6:	600f      	str	r7, [r1, #0]
 8005dd8:	bf18      	it	ne
 8005dda:	2300      	movne	r3, #0
 8005ddc:	eba6 0807 	sub.w	r8, r6, r7
 8005de0:	608b      	str	r3, [r1, #8]
 8005de2:	f1b8 0f00 	cmp.w	r8, #0
 8005de6:	dd9c      	ble.n	8005d22 <__sflush_r+0x1a>
 8005de8:	4643      	mov	r3, r8
 8005dea:	463a      	mov	r2, r7
 8005dec:	6a21      	ldr	r1, [r4, #32]
 8005dee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005df0:	4628      	mov	r0, r5
 8005df2:	47b0      	blx	r6
 8005df4:	2800      	cmp	r0, #0
 8005df6:	dc06      	bgt.n	8005e06 <__sflush_r+0xfe>
 8005df8:	89a3      	ldrh	r3, [r4, #12]
 8005dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dfe:	81a3      	strh	r3, [r4, #12]
 8005e00:	f04f 30ff 	mov.w	r0, #4294967295
 8005e04:	e78e      	b.n	8005d24 <__sflush_r+0x1c>
 8005e06:	4407      	add	r7, r0
 8005e08:	eba8 0800 	sub.w	r8, r8, r0
 8005e0c:	e7e9      	b.n	8005de2 <__sflush_r+0xda>
 8005e0e:	bf00      	nop
 8005e10:	20400001 	.word	0x20400001

08005e14 <_fflush_r>:
 8005e14:	b538      	push	{r3, r4, r5, lr}
 8005e16:	690b      	ldr	r3, [r1, #16]
 8005e18:	4605      	mov	r5, r0
 8005e1a:	460c      	mov	r4, r1
 8005e1c:	b1db      	cbz	r3, 8005e56 <_fflush_r+0x42>
 8005e1e:	b118      	cbz	r0, 8005e28 <_fflush_r+0x14>
 8005e20:	6983      	ldr	r3, [r0, #24]
 8005e22:	b90b      	cbnz	r3, 8005e28 <_fflush_r+0x14>
 8005e24:	f000 f860 	bl	8005ee8 <__sinit>
 8005e28:	4b0c      	ldr	r3, [pc, #48]	; (8005e5c <_fflush_r+0x48>)
 8005e2a:	429c      	cmp	r4, r3
 8005e2c:	d109      	bne.n	8005e42 <_fflush_r+0x2e>
 8005e2e:	686c      	ldr	r4, [r5, #4]
 8005e30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e34:	b17b      	cbz	r3, 8005e56 <_fflush_r+0x42>
 8005e36:	4621      	mov	r1, r4
 8005e38:	4628      	mov	r0, r5
 8005e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e3e:	f7ff bf63 	b.w	8005d08 <__sflush_r>
 8005e42:	4b07      	ldr	r3, [pc, #28]	; (8005e60 <_fflush_r+0x4c>)
 8005e44:	429c      	cmp	r4, r3
 8005e46:	d101      	bne.n	8005e4c <_fflush_r+0x38>
 8005e48:	68ac      	ldr	r4, [r5, #8]
 8005e4a:	e7f1      	b.n	8005e30 <_fflush_r+0x1c>
 8005e4c:	4b05      	ldr	r3, [pc, #20]	; (8005e64 <_fflush_r+0x50>)
 8005e4e:	429c      	cmp	r4, r3
 8005e50:	bf08      	it	eq
 8005e52:	68ec      	ldreq	r4, [r5, #12]
 8005e54:	e7ec      	b.n	8005e30 <_fflush_r+0x1c>
 8005e56:	2000      	movs	r0, #0
 8005e58:	bd38      	pop	{r3, r4, r5, pc}
 8005e5a:	bf00      	nop
 8005e5c:	08006e30 	.word	0x08006e30
 8005e60:	08006e50 	.word	0x08006e50
 8005e64:	08006e10 	.word	0x08006e10

08005e68 <std>:
 8005e68:	2300      	movs	r3, #0
 8005e6a:	b510      	push	{r4, lr}
 8005e6c:	4604      	mov	r4, r0
 8005e6e:	e9c0 3300 	strd	r3, r3, [r0]
 8005e72:	6083      	str	r3, [r0, #8]
 8005e74:	8181      	strh	r1, [r0, #12]
 8005e76:	6643      	str	r3, [r0, #100]	; 0x64
 8005e78:	81c2      	strh	r2, [r0, #14]
 8005e7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e7e:	6183      	str	r3, [r0, #24]
 8005e80:	4619      	mov	r1, r3
 8005e82:	2208      	movs	r2, #8
 8005e84:	305c      	adds	r0, #92	; 0x5c
 8005e86:	f7fe fb59 	bl	800453c <memset>
 8005e8a:	4b05      	ldr	r3, [pc, #20]	; (8005ea0 <std+0x38>)
 8005e8c:	6263      	str	r3, [r4, #36]	; 0x24
 8005e8e:	4b05      	ldr	r3, [pc, #20]	; (8005ea4 <std+0x3c>)
 8005e90:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e92:	4b05      	ldr	r3, [pc, #20]	; (8005ea8 <std+0x40>)
 8005e94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e96:	4b05      	ldr	r3, [pc, #20]	; (8005eac <std+0x44>)
 8005e98:	6224      	str	r4, [r4, #32]
 8005e9a:	6323      	str	r3, [r4, #48]	; 0x30
 8005e9c:	bd10      	pop	{r4, pc}
 8005e9e:	bf00      	nop
 8005ea0:	08006ac9 	.word	0x08006ac9
 8005ea4:	08006aeb 	.word	0x08006aeb
 8005ea8:	08006b23 	.word	0x08006b23
 8005eac:	08006b47 	.word	0x08006b47

08005eb0 <_cleanup_r>:
 8005eb0:	4901      	ldr	r1, [pc, #4]	; (8005eb8 <_cleanup_r+0x8>)
 8005eb2:	f000 b885 	b.w	8005fc0 <_fwalk_reent>
 8005eb6:	bf00      	nop
 8005eb8:	08005e15 	.word	0x08005e15

08005ebc <__sfmoreglue>:
 8005ebc:	b570      	push	{r4, r5, r6, lr}
 8005ebe:	1e4a      	subs	r2, r1, #1
 8005ec0:	2568      	movs	r5, #104	; 0x68
 8005ec2:	4355      	muls	r5, r2
 8005ec4:	460e      	mov	r6, r1
 8005ec6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005eca:	f000 fc53 	bl	8006774 <_malloc_r>
 8005ece:	4604      	mov	r4, r0
 8005ed0:	b140      	cbz	r0, 8005ee4 <__sfmoreglue+0x28>
 8005ed2:	2100      	movs	r1, #0
 8005ed4:	e9c0 1600 	strd	r1, r6, [r0]
 8005ed8:	300c      	adds	r0, #12
 8005eda:	60a0      	str	r0, [r4, #8]
 8005edc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005ee0:	f7fe fb2c 	bl	800453c <memset>
 8005ee4:	4620      	mov	r0, r4
 8005ee6:	bd70      	pop	{r4, r5, r6, pc}

08005ee8 <__sinit>:
 8005ee8:	6983      	ldr	r3, [r0, #24]
 8005eea:	b510      	push	{r4, lr}
 8005eec:	4604      	mov	r4, r0
 8005eee:	bb33      	cbnz	r3, 8005f3e <__sinit+0x56>
 8005ef0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005ef4:	6503      	str	r3, [r0, #80]	; 0x50
 8005ef6:	4b12      	ldr	r3, [pc, #72]	; (8005f40 <__sinit+0x58>)
 8005ef8:	4a12      	ldr	r2, [pc, #72]	; (8005f44 <__sinit+0x5c>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6282      	str	r2, [r0, #40]	; 0x28
 8005efe:	4298      	cmp	r0, r3
 8005f00:	bf04      	itt	eq
 8005f02:	2301      	moveq	r3, #1
 8005f04:	6183      	streq	r3, [r0, #24]
 8005f06:	f000 f81f 	bl	8005f48 <__sfp>
 8005f0a:	6060      	str	r0, [r4, #4]
 8005f0c:	4620      	mov	r0, r4
 8005f0e:	f000 f81b 	bl	8005f48 <__sfp>
 8005f12:	60a0      	str	r0, [r4, #8]
 8005f14:	4620      	mov	r0, r4
 8005f16:	f000 f817 	bl	8005f48 <__sfp>
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	60e0      	str	r0, [r4, #12]
 8005f1e:	2104      	movs	r1, #4
 8005f20:	6860      	ldr	r0, [r4, #4]
 8005f22:	f7ff ffa1 	bl	8005e68 <std>
 8005f26:	2201      	movs	r2, #1
 8005f28:	2109      	movs	r1, #9
 8005f2a:	68a0      	ldr	r0, [r4, #8]
 8005f2c:	f7ff ff9c 	bl	8005e68 <std>
 8005f30:	2202      	movs	r2, #2
 8005f32:	2112      	movs	r1, #18
 8005f34:	68e0      	ldr	r0, [r4, #12]
 8005f36:	f7ff ff97 	bl	8005e68 <std>
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	61a3      	str	r3, [r4, #24]
 8005f3e:	bd10      	pop	{r4, pc}
 8005f40:	08006dc8 	.word	0x08006dc8
 8005f44:	08005eb1 	.word	0x08005eb1

08005f48 <__sfp>:
 8005f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f4a:	4b1b      	ldr	r3, [pc, #108]	; (8005fb8 <__sfp+0x70>)
 8005f4c:	681e      	ldr	r6, [r3, #0]
 8005f4e:	69b3      	ldr	r3, [r6, #24]
 8005f50:	4607      	mov	r7, r0
 8005f52:	b913      	cbnz	r3, 8005f5a <__sfp+0x12>
 8005f54:	4630      	mov	r0, r6
 8005f56:	f7ff ffc7 	bl	8005ee8 <__sinit>
 8005f5a:	3648      	adds	r6, #72	; 0x48
 8005f5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005f60:	3b01      	subs	r3, #1
 8005f62:	d503      	bpl.n	8005f6c <__sfp+0x24>
 8005f64:	6833      	ldr	r3, [r6, #0]
 8005f66:	b133      	cbz	r3, 8005f76 <__sfp+0x2e>
 8005f68:	6836      	ldr	r6, [r6, #0]
 8005f6a:	e7f7      	b.n	8005f5c <__sfp+0x14>
 8005f6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005f70:	b16d      	cbz	r5, 8005f8e <__sfp+0x46>
 8005f72:	3468      	adds	r4, #104	; 0x68
 8005f74:	e7f4      	b.n	8005f60 <__sfp+0x18>
 8005f76:	2104      	movs	r1, #4
 8005f78:	4638      	mov	r0, r7
 8005f7a:	f7ff ff9f 	bl	8005ebc <__sfmoreglue>
 8005f7e:	6030      	str	r0, [r6, #0]
 8005f80:	2800      	cmp	r0, #0
 8005f82:	d1f1      	bne.n	8005f68 <__sfp+0x20>
 8005f84:	230c      	movs	r3, #12
 8005f86:	603b      	str	r3, [r7, #0]
 8005f88:	4604      	mov	r4, r0
 8005f8a:	4620      	mov	r0, r4
 8005f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f8e:	4b0b      	ldr	r3, [pc, #44]	; (8005fbc <__sfp+0x74>)
 8005f90:	6665      	str	r5, [r4, #100]	; 0x64
 8005f92:	e9c4 5500 	strd	r5, r5, [r4]
 8005f96:	60a5      	str	r5, [r4, #8]
 8005f98:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005f9c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005fa0:	2208      	movs	r2, #8
 8005fa2:	4629      	mov	r1, r5
 8005fa4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005fa8:	f7fe fac8 	bl	800453c <memset>
 8005fac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005fb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005fb4:	e7e9      	b.n	8005f8a <__sfp+0x42>
 8005fb6:	bf00      	nop
 8005fb8:	08006dc8 	.word	0x08006dc8
 8005fbc:	ffff0001 	.word	0xffff0001

08005fc0 <_fwalk_reent>:
 8005fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fc4:	4680      	mov	r8, r0
 8005fc6:	4689      	mov	r9, r1
 8005fc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005fcc:	2600      	movs	r6, #0
 8005fce:	b914      	cbnz	r4, 8005fd6 <_fwalk_reent+0x16>
 8005fd0:	4630      	mov	r0, r6
 8005fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fd6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005fda:	3f01      	subs	r7, #1
 8005fdc:	d501      	bpl.n	8005fe2 <_fwalk_reent+0x22>
 8005fde:	6824      	ldr	r4, [r4, #0]
 8005fe0:	e7f5      	b.n	8005fce <_fwalk_reent+0xe>
 8005fe2:	89ab      	ldrh	r3, [r5, #12]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d907      	bls.n	8005ff8 <_fwalk_reent+0x38>
 8005fe8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005fec:	3301      	adds	r3, #1
 8005fee:	d003      	beq.n	8005ff8 <_fwalk_reent+0x38>
 8005ff0:	4629      	mov	r1, r5
 8005ff2:	4640      	mov	r0, r8
 8005ff4:	47c8      	blx	r9
 8005ff6:	4306      	orrs	r6, r0
 8005ff8:	3568      	adds	r5, #104	; 0x68
 8005ffa:	e7ee      	b.n	8005fda <_fwalk_reent+0x1a>

08005ffc <_localeconv_r>:
 8005ffc:	4b04      	ldr	r3, [pc, #16]	; (8006010 <_localeconv_r+0x14>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6a18      	ldr	r0, [r3, #32]
 8006002:	4b04      	ldr	r3, [pc, #16]	; (8006014 <_localeconv_r+0x18>)
 8006004:	2800      	cmp	r0, #0
 8006006:	bf08      	it	eq
 8006008:	4618      	moveq	r0, r3
 800600a:	30f0      	adds	r0, #240	; 0xf0
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	2000000c 	.word	0x2000000c
 8006014:	20000070 	.word	0x20000070

08006018 <__swhatbuf_r>:
 8006018:	b570      	push	{r4, r5, r6, lr}
 800601a:	460e      	mov	r6, r1
 800601c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006020:	2900      	cmp	r1, #0
 8006022:	b096      	sub	sp, #88	; 0x58
 8006024:	4614      	mov	r4, r2
 8006026:	461d      	mov	r5, r3
 8006028:	da07      	bge.n	800603a <__swhatbuf_r+0x22>
 800602a:	2300      	movs	r3, #0
 800602c:	602b      	str	r3, [r5, #0]
 800602e:	89b3      	ldrh	r3, [r6, #12]
 8006030:	061a      	lsls	r2, r3, #24
 8006032:	d410      	bmi.n	8006056 <__swhatbuf_r+0x3e>
 8006034:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006038:	e00e      	b.n	8006058 <__swhatbuf_r+0x40>
 800603a:	466a      	mov	r2, sp
 800603c:	f000 fdaa 	bl	8006b94 <_fstat_r>
 8006040:	2800      	cmp	r0, #0
 8006042:	dbf2      	blt.n	800602a <__swhatbuf_r+0x12>
 8006044:	9a01      	ldr	r2, [sp, #4]
 8006046:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800604a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800604e:	425a      	negs	r2, r3
 8006050:	415a      	adcs	r2, r3
 8006052:	602a      	str	r2, [r5, #0]
 8006054:	e7ee      	b.n	8006034 <__swhatbuf_r+0x1c>
 8006056:	2340      	movs	r3, #64	; 0x40
 8006058:	2000      	movs	r0, #0
 800605a:	6023      	str	r3, [r4, #0]
 800605c:	b016      	add	sp, #88	; 0x58
 800605e:	bd70      	pop	{r4, r5, r6, pc}

08006060 <__smakebuf_r>:
 8006060:	898b      	ldrh	r3, [r1, #12]
 8006062:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006064:	079d      	lsls	r5, r3, #30
 8006066:	4606      	mov	r6, r0
 8006068:	460c      	mov	r4, r1
 800606a:	d507      	bpl.n	800607c <__smakebuf_r+0x1c>
 800606c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006070:	6023      	str	r3, [r4, #0]
 8006072:	6123      	str	r3, [r4, #16]
 8006074:	2301      	movs	r3, #1
 8006076:	6163      	str	r3, [r4, #20]
 8006078:	b002      	add	sp, #8
 800607a:	bd70      	pop	{r4, r5, r6, pc}
 800607c:	ab01      	add	r3, sp, #4
 800607e:	466a      	mov	r2, sp
 8006080:	f7ff ffca 	bl	8006018 <__swhatbuf_r>
 8006084:	9900      	ldr	r1, [sp, #0]
 8006086:	4605      	mov	r5, r0
 8006088:	4630      	mov	r0, r6
 800608a:	f000 fb73 	bl	8006774 <_malloc_r>
 800608e:	b948      	cbnz	r0, 80060a4 <__smakebuf_r+0x44>
 8006090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006094:	059a      	lsls	r2, r3, #22
 8006096:	d4ef      	bmi.n	8006078 <__smakebuf_r+0x18>
 8006098:	f023 0303 	bic.w	r3, r3, #3
 800609c:	f043 0302 	orr.w	r3, r3, #2
 80060a0:	81a3      	strh	r3, [r4, #12]
 80060a2:	e7e3      	b.n	800606c <__smakebuf_r+0xc>
 80060a4:	4b0d      	ldr	r3, [pc, #52]	; (80060dc <__smakebuf_r+0x7c>)
 80060a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80060a8:	89a3      	ldrh	r3, [r4, #12]
 80060aa:	6020      	str	r0, [r4, #0]
 80060ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060b0:	81a3      	strh	r3, [r4, #12]
 80060b2:	9b00      	ldr	r3, [sp, #0]
 80060b4:	6163      	str	r3, [r4, #20]
 80060b6:	9b01      	ldr	r3, [sp, #4]
 80060b8:	6120      	str	r0, [r4, #16]
 80060ba:	b15b      	cbz	r3, 80060d4 <__smakebuf_r+0x74>
 80060bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060c0:	4630      	mov	r0, r6
 80060c2:	f000 fd79 	bl	8006bb8 <_isatty_r>
 80060c6:	b128      	cbz	r0, 80060d4 <__smakebuf_r+0x74>
 80060c8:	89a3      	ldrh	r3, [r4, #12]
 80060ca:	f023 0303 	bic.w	r3, r3, #3
 80060ce:	f043 0301 	orr.w	r3, r3, #1
 80060d2:	81a3      	strh	r3, [r4, #12]
 80060d4:	89a3      	ldrh	r3, [r4, #12]
 80060d6:	431d      	orrs	r5, r3
 80060d8:	81a5      	strh	r5, [r4, #12]
 80060da:	e7cd      	b.n	8006078 <__smakebuf_r+0x18>
 80060dc:	08005eb1 	.word	0x08005eb1

080060e0 <malloc>:
 80060e0:	4b02      	ldr	r3, [pc, #8]	; (80060ec <malloc+0xc>)
 80060e2:	4601      	mov	r1, r0
 80060e4:	6818      	ldr	r0, [r3, #0]
 80060e6:	f000 bb45 	b.w	8006774 <_malloc_r>
 80060ea:	bf00      	nop
 80060ec:	2000000c 	.word	0x2000000c

080060f0 <memcpy>:
 80060f0:	b510      	push	{r4, lr}
 80060f2:	1e43      	subs	r3, r0, #1
 80060f4:	440a      	add	r2, r1
 80060f6:	4291      	cmp	r1, r2
 80060f8:	d100      	bne.n	80060fc <memcpy+0xc>
 80060fa:	bd10      	pop	{r4, pc}
 80060fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006100:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006104:	e7f7      	b.n	80060f6 <memcpy+0x6>

08006106 <_Balloc>:
 8006106:	b570      	push	{r4, r5, r6, lr}
 8006108:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800610a:	4604      	mov	r4, r0
 800610c:	460e      	mov	r6, r1
 800610e:	b93d      	cbnz	r5, 8006120 <_Balloc+0x1a>
 8006110:	2010      	movs	r0, #16
 8006112:	f7ff ffe5 	bl	80060e0 <malloc>
 8006116:	6260      	str	r0, [r4, #36]	; 0x24
 8006118:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800611c:	6005      	str	r5, [r0, #0]
 800611e:	60c5      	str	r5, [r0, #12]
 8006120:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006122:	68eb      	ldr	r3, [r5, #12]
 8006124:	b183      	cbz	r3, 8006148 <_Balloc+0x42>
 8006126:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800612e:	b9b8      	cbnz	r0, 8006160 <_Balloc+0x5a>
 8006130:	2101      	movs	r1, #1
 8006132:	fa01 f506 	lsl.w	r5, r1, r6
 8006136:	1d6a      	adds	r2, r5, #5
 8006138:	0092      	lsls	r2, r2, #2
 800613a:	4620      	mov	r0, r4
 800613c:	f000 fabe 	bl	80066bc <_calloc_r>
 8006140:	b160      	cbz	r0, 800615c <_Balloc+0x56>
 8006142:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006146:	e00e      	b.n	8006166 <_Balloc+0x60>
 8006148:	2221      	movs	r2, #33	; 0x21
 800614a:	2104      	movs	r1, #4
 800614c:	4620      	mov	r0, r4
 800614e:	f000 fab5 	bl	80066bc <_calloc_r>
 8006152:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006154:	60e8      	str	r0, [r5, #12]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1e4      	bne.n	8006126 <_Balloc+0x20>
 800615c:	2000      	movs	r0, #0
 800615e:	bd70      	pop	{r4, r5, r6, pc}
 8006160:	6802      	ldr	r2, [r0, #0]
 8006162:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006166:	2300      	movs	r3, #0
 8006168:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800616c:	e7f7      	b.n	800615e <_Balloc+0x58>

0800616e <_Bfree>:
 800616e:	b570      	push	{r4, r5, r6, lr}
 8006170:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006172:	4606      	mov	r6, r0
 8006174:	460d      	mov	r5, r1
 8006176:	b93c      	cbnz	r4, 8006188 <_Bfree+0x1a>
 8006178:	2010      	movs	r0, #16
 800617a:	f7ff ffb1 	bl	80060e0 <malloc>
 800617e:	6270      	str	r0, [r6, #36]	; 0x24
 8006180:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006184:	6004      	str	r4, [r0, #0]
 8006186:	60c4      	str	r4, [r0, #12]
 8006188:	b13d      	cbz	r5, 800619a <_Bfree+0x2c>
 800618a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800618c:	686a      	ldr	r2, [r5, #4]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006194:	6029      	str	r1, [r5, #0]
 8006196:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800619a:	bd70      	pop	{r4, r5, r6, pc}

0800619c <__multadd>:
 800619c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061a0:	690d      	ldr	r5, [r1, #16]
 80061a2:	461f      	mov	r7, r3
 80061a4:	4606      	mov	r6, r0
 80061a6:	460c      	mov	r4, r1
 80061a8:	f101 0c14 	add.w	ip, r1, #20
 80061ac:	2300      	movs	r3, #0
 80061ae:	f8dc 0000 	ldr.w	r0, [ip]
 80061b2:	b281      	uxth	r1, r0
 80061b4:	fb02 7101 	mla	r1, r2, r1, r7
 80061b8:	0c0f      	lsrs	r7, r1, #16
 80061ba:	0c00      	lsrs	r0, r0, #16
 80061bc:	fb02 7000 	mla	r0, r2, r0, r7
 80061c0:	b289      	uxth	r1, r1
 80061c2:	3301      	adds	r3, #1
 80061c4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80061c8:	429d      	cmp	r5, r3
 80061ca:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80061ce:	f84c 1b04 	str.w	r1, [ip], #4
 80061d2:	dcec      	bgt.n	80061ae <__multadd+0x12>
 80061d4:	b1d7      	cbz	r7, 800620c <__multadd+0x70>
 80061d6:	68a3      	ldr	r3, [r4, #8]
 80061d8:	42ab      	cmp	r3, r5
 80061da:	dc12      	bgt.n	8006202 <__multadd+0x66>
 80061dc:	6861      	ldr	r1, [r4, #4]
 80061de:	4630      	mov	r0, r6
 80061e0:	3101      	adds	r1, #1
 80061e2:	f7ff ff90 	bl	8006106 <_Balloc>
 80061e6:	6922      	ldr	r2, [r4, #16]
 80061e8:	3202      	adds	r2, #2
 80061ea:	f104 010c 	add.w	r1, r4, #12
 80061ee:	4680      	mov	r8, r0
 80061f0:	0092      	lsls	r2, r2, #2
 80061f2:	300c      	adds	r0, #12
 80061f4:	f7ff ff7c 	bl	80060f0 <memcpy>
 80061f8:	4621      	mov	r1, r4
 80061fa:	4630      	mov	r0, r6
 80061fc:	f7ff ffb7 	bl	800616e <_Bfree>
 8006200:	4644      	mov	r4, r8
 8006202:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006206:	3501      	adds	r5, #1
 8006208:	615f      	str	r7, [r3, #20]
 800620a:	6125      	str	r5, [r4, #16]
 800620c:	4620      	mov	r0, r4
 800620e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006212 <__hi0bits>:
 8006212:	0c02      	lsrs	r2, r0, #16
 8006214:	0412      	lsls	r2, r2, #16
 8006216:	4603      	mov	r3, r0
 8006218:	b9b2      	cbnz	r2, 8006248 <__hi0bits+0x36>
 800621a:	0403      	lsls	r3, r0, #16
 800621c:	2010      	movs	r0, #16
 800621e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006222:	bf04      	itt	eq
 8006224:	021b      	lsleq	r3, r3, #8
 8006226:	3008      	addeq	r0, #8
 8006228:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800622c:	bf04      	itt	eq
 800622e:	011b      	lsleq	r3, r3, #4
 8006230:	3004      	addeq	r0, #4
 8006232:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006236:	bf04      	itt	eq
 8006238:	009b      	lsleq	r3, r3, #2
 800623a:	3002      	addeq	r0, #2
 800623c:	2b00      	cmp	r3, #0
 800623e:	db06      	blt.n	800624e <__hi0bits+0x3c>
 8006240:	005b      	lsls	r3, r3, #1
 8006242:	d503      	bpl.n	800624c <__hi0bits+0x3a>
 8006244:	3001      	adds	r0, #1
 8006246:	4770      	bx	lr
 8006248:	2000      	movs	r0, #0
 800624a:	e7e8      	b.n	800621e <__hi0bits+0xc>
 800624c:	2020      	movs	r0, #32
 800624e:	4770      	bx	lr

08006250 <__lo0bits>:
 8006250:	6803      	ldr	r3, [r0, #0]
 8006252:	f013 0207 	ands.w	r2, r3, #7
 8006256:	4601      	mov	r1, r0
 8006258:	d00b      	beq.n	8006272 <__lo0bits+0x22>
 800625a:	07da      	lsls	r2, r3, #31
 800625c:	d423      	bmi.n	80062a6 <__lo0bits+0x56>
 800625e:	0798      	lsls	r0, r3, #30
 8006260:	bf49      	itett	mi
 8006262:	085b      	lsrmi	r3, r3, #1
 8006264:	089b      	lsrpl	r3, r3, #2
 8006266:	2001      	movmi	r0, #1
 8006268:	600b      	strmi	r3, [r1, #0]
 800626a:	bf5c      	itt	pl
 800626c:	600b      	strpl	r3, [r1, #0]
 800626e:	2002      	movpl	r0, #2
 8006270:	4770      	bx	lr
 8006272:	b298      	uxth	r0, r3
 8006274:	b9a8      	cbnz	r0, 80062a2 <__lo0bits+0x52>
 8006276:	0c1b      	lsrs	r3, r3, #16
 8006278:	2010      	movs	r0, #16
 800627a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800627e:	bf04      	itt	eq
 8006280:	0a1b      	lsreq	r3, r3, #8
 8006282:	3008      	addeq	r0, #8
 8006284:	071a      	lsls	r2, r3, #28
 8006286:	bf04      	itt	eq
 8006288:	091b      	lsreq	r3, r3, #4
 800628a:	3004      	addeq	r0, #4
 800628c:	079a      	lsls	r2, r3, #30
 800628e:	bf04      	itt	eq
 8006290:	089b      	lsreq	r3, r3, #2
 8006292:	3002      	addeq	r0, #2
 8006294:	07da      	lsls	r2, r3, #31
 8006296:	d402      	bmi.n	800629e <__lo0bits+0x4e>
 8006298:	085b      	lsrs	r3, r3, #1
 800629a:	d006      	beq.n	80062aa <__lo0bits+0x5a>
 800629c:	3001      	adds	r0, #1
 800629e:	600b      	str	r3, [r1, #0]
 80062a0:	4770      	bx	lr
 80062a2:	4610      	mov	r0, r2
 80062a4:	e7e9      	b.n	800627a <__lo0bits+0x2a>
 80062a6:	2000      	movs	r0, #0
 80062a8:	4770      	bx	lr
 80062aa:	2020      	movs	r0, #32
 80062ac:	4770      	bx	lr

080062ae <__i2b>:
 80062ae:	b510      	push	{r4, lr}
 80062b0:	460c      	mov	r4, r1
 80062b2:	2101      	movs	r1, #1
 80062b4:	f7ff ff27 	bl	8006106 <_Balloc>
 80062b8:	2201      	movs	r2, #1
 80062ba:	6144      	str	r4, [r0, #20]
 80062bc:	6102      	str	r2, [r0, #16]
 80062be:	bd10      	pop	{r4, pc}

080062c0 <__multiply>:
 80062c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c4:	4614      	mov	r4, r2
 80062c6:	690a      	ldr	r2, [r1, #16]
 80062c8:	6923      	ldr	r3, [r4, #16]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	bfb8      	it	lt
 80062ce:	460b      	movlt	r3, r1
 80062d0:	4688      	mov	r8, r1
 80062d2:	bfbc      	itt	lt
 80062d4:	46a0      	movlt	r8, r4
 80062d6:	461c      	movlt	r4, r3
 80062d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80062dc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80062e0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80062e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80062e8:	eb07 0609 	add.w	r6, r7, r9
 80062ec:	42b3      	cmp	r3, r6
 80062ee:	bfb8      	it	lt
 80062f0:	3101      	addlt	r1, #1
 80062f2:	f7ff ff08 	bl	8006106 <_Balloc>
 80062f6:	f100 0514 	add.w	r5, r0, #20
 80062fa:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80062fe:	462b      	mov	r3, r5
 8006300:	2200      	movs	r2, #0
 8006302:	4573      	cmp	r3, lr
 8006304:	d316      	bcc.n	8006334 <__multiply+0x74>
 8006306:	f104 0214 	add.w	r2, r4, #20
 800630a:	f108 0114 	add.w	r1, r8, #20
 800630e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006312:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006316:	9300      	str	r3, [sp, #0]
 8006318:	9b00      	ldr	r3, [sp, #0]
 800631a:	9201      	str	r2, [sp, #4]
 800631c:	4293      	cmp	r3, r2
 800631e:	d80c      	bhi.n	800633a <__multiply+0x7a>
 8006320:	2e00      	cmp	r6, #0
 8006322:	dd03      	ble.n	800632c <__multiply+0x6c>
 8006324:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006328:	2b00      	cmp	r3, #0
 800632a:	d05d      	beq.n	80063e8 <__multiply+0x128>
 800632c:	6106      	str	r6, [r0, #16]
 800632e:	b003      	add	sp, #12
 8006330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006334:	f843 2b04 	str.w	r2, [r3], #4
 8006338:	e7e3      	b.n	8006302 <__multiply+0x42>
 800633a:	f8b2 b000 	ldrh.w	fp, [r2]
 800633e:	f1bb 0f00 	cmp.w	fp, #0
 8006342:	d023      	beq.n	800638c <__multiply+0xcc>
 8006344:	4689      	mov	r9, r1
 8006346:	46ac      	mov	ip, r5
 8006348:	f04f 0800 	mov.w	r8, #0
 800634c:	f859 4b04 	ldr.w	r4, [r9], #4
 8006350:	f8dc a000 	ldr.w	sl, [ip]
 8006354:	b2a3      	uxth	r3, r4
 8006356:	fa1f fa8a 	uxth.w	sl, sl
 800635a:	fb0b a303 	mla	r3, fp, r3, sl
 800635e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006362:	f8dc 4000 	ldr.w	r4, [ip]
 8006366:	4443      	add	r3, r8
 8006368:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800636c:	fb0b 840a 	mla	r4, fp, sl, r8
 8006370:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006374:	46e2      	mov	sl, ip
 8006376:	b29b      	uxth	r3, r3
 8006378:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800637c:	454f      	cmp	r7, r9
 800637e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006382:	f84a 3b04 	str.w	r3, [sl], #4
 8006386:	d82b      	bhi.n	80063e0 <__multiply+0x120>
 8006388:	f8cc 8004 	str.w	r8, [ip, #4]
 800638c:	9b01      	ldr	r3, [sp, #4]
 800638e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006392:	3204      	adds	r2, #4
 8006394:	f1ba 0f00 	cmp.w	sl, #0
 8006398:	d020      	beq.n	80063dc <__multiply+0x11c>
 800639a:	682b      	ldr	r3, [r5, #0]
 800639c:	4689      	mov	r9, r1
 800639e:	46a8      	mov	r8, r5
 80063a0:	f04f 0b00 	mov.w	fp, #0
 80063a4:	f8b9 c000 	ldrh.w	ip, [r9]
 80063a8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80063ac:	fb0a 440c 	mla	r4, sl, ip, r4
 80063b0:	445c      	add	r4, fp
 80063b2:	46c4      	mov	ip, r8
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80063ba:	f84c 3b04 	str.w	r3, [ip], #4
 80063be:	f859 3b04 	ldr.w	r3, [r9], #4
 80063c2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80063c6:	0c1b      	lsrs	r3, r3, #16
 80063c8:	fb0a b303 	mla	r3, sl, r3, fp
 80063cc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80063d0:	454f      	cmp	r7, r9
 80063d2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80063d6:	d805      	bhi.n	80063e4 <__multiply+0x124>
 80063d8:	f8c8 3004 	str.w	r3, [r8, #4]
 80063dc:	3504      	adds	r5, #4
 80063de:	e79b      	b.n	8006318 <__multiply+0x58>
 80063e0:	46d4      	mov	ip, sl
 80063e2:	e7b3      	b.n	800634c <__multiply+0x8c>
 80063e4:	46e0      	mov	r8, ip
 80063e6:	e7dd      	b.n	80063a4 <__multiply+0xe4>
 80063e8:	3e01      	subs	r6, #1
 80063ea:	e799      	b.n	8006320 <__multiply+0x60>

080063ec <__pow5mult>:
 80063ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063f0:	4615      	mov	r5, r2
 80063f2:	f012 0203 	ands.w	r2, r2, #3
 80063f6:	4606      	mov	r6, r0
 80063f8:	460f      	mov	r7, r1
 80063fa:	d007      	beq.n	800640c <__pow5mult+0x20>
 80063fc:	3a01      	subs	r2, #1
 80063fe:	4c21      	ldr	r4, [pc, #132]	; (8006484 <__pow5mult+0x98>)
 8006400:	2300      	movs	r3, #0
 8006402:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006406:	f7ff fec9 	bl	800619c <__multadd>
 800640a:	4607      	mov	r7, r0
 800640c:	10ad      	asrs	r5, r5, #2
 800640e:	d035      	beq.n	800647c <__pow5mult+0x90>
 8006410:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006412:	b93c      	cbnz	r4, 8006424 <__pow5mult+0x38>
 8006414:	2010      	movs	r0, #16
 8006416:	f7ff fe63 	bl	80060e0 <malloc>
 800641a:	6270      	str	r0, [r6, #36]	; 0x24
 800641c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006420:	6004      	str	r4, [r0, #0]
 8006422:	60c4      	str	r4, [r0, #12]
 8006424:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006428:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800642c:	b94c      	cbnz	r4, 8006442 <__pow5mult+0x56>
 800642e:	f240 2171 	movw	r1, #625	; 0x271
 8006432:	4630      	mov	r0, r6
 8006434:	f7ff ff3b 	bl	80062ae <__i2b>
 8006438:	2300      	movs	r3, #0
 800643a:	f8c8 0008 	str.w	r0, [r8, #8]
 800643e:	4604      	mov	r4, r0
 8006440:	6003      	str	r3, [r0, #0]
 8006442:	f04f 0800 	mov.w	r8, #0
 8006446:	07eb      	lsls	r3, r5, #31
 8006448:	d50a      	bpl.n	8006460 <__pow5mult+0x74>
 800644a:	4639      	mov	r1, r7
 800644c:	4622      	mov	r2, r4
 800644e:	4630      	mov	r0, r6
 8006450:	f7ff ff36 	bl	80062c0 <__multiply>
 8006454:	4639      	mov	r1, r7
 8006456:	4681      	mov	r9, r0
 8006458:	4630      	mov	r0, r6
 800645a:	f7ff fe88 	bl	800616e <_Bfree>
 800645e:	464f      	mov	r7, r9
 8006460:	106d      	asrs	r5, r5, #1
 8006462:	d00b      	beq.n	800647c <__pow5mult+0x90>
 8006464:	6820      	ldr	r0, [r4, #0]
 8006466:	b938      	cbnz	r0, 8006478 <__pow5mult+0x8c>
 8006468:	4622      	mov	r2, r4
 800646a:	4621      	mov	r1, r4
 800646c:	4630      	mov	r0, r6
 800646e:	f7ff ff27 	bl	80062c0 <__multiply>
 8006472:	6020      	str	r0, [r4, #0]
 8006474:	f8c0 8000 	str.w	r8, [r0]
 8006478:	4604      	mov	r4, r0
 800647a:	e7e4      	b.n	8006446 <__pow5mult+0x5a>
 800647c:	4638      	mov	r0, r7
 800647e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006482:	bf00      	nop
 8006484:	08006f60 	.word	0x08006f60

08006488 <__lshift>:
 8006488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800648c:	460c      	mov	r4, r1
 800648e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006492:	6923      	ldr	r3, [r4, #16]
 8006494:	6849      	ldr	r1, [r1, #4]
 8006496:	eb0a 0903 	add.w	r9, sl, r3
 800649a:	68a3      	ldr	r3, [r4, #8]
 800649c:	4607      	mov	r7, r0
 800649e:	4616      	mov	r6, r2
 80064a0:	f109 0501 	add.w	r5, r9, #1
 80064a4:	42ab      	cmp	r3, r5
 80064a6:	db32      	blt.n	800650e <__lshift+0x86>
 80064a8:	4638      	mov	r0, r7
 80064aa:	f7ff fe2c 	bl	8006106 <_Balloc>
 80064ae:	2300      	movs	r3, #0
 80064b0:	4680      	mov	r8, r0
 80064b2:	f100 0114 	add.w	r1, r0, #20
 80064b6:	461a      	mov	r2, r3
 80064b8:	4553      	cmp	r3, sl
 80064ba:	db2b      	blt.n	8006514 <__lshift+0x8c>
 80064bc:	6920      	ldr	r0, [r4, #16]
 80064be:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80064c2:	f104 0314 	add.w	r3, r4, #20
 80064c6:	f016 021f 	ands.w	r2, r6, #31
 80064ca:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80064ce:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80064d2:	d025      	beq.n	8006520 <__lshift+0x98>
 80064d4:	f1c2 0e20 	rsb	lr, r2, #32
 80064d8:	2000      	movs	r0, #0
 80064da:	681e      	ldr	r6, [r3, #0]
 80064dc:	468a      	mov	sl, r1
 80064de:	4096      	lsls	r6, r2
 80064e0:	4330      	orrs	r0, r6
 80064e2:	f84a 0b04 	str.w	r0, [sl], #4
 80064e6:	f853 0b04 	ldr.w	r0, [r3], #4
 80064ea:	459c      	cmp	ip, r3
 80064ec:	fa20 f00e 	lsr.w	r0, r0, lr
 80064f0:	d814      	bhi.n	800651c <__lshift+0x94>
 80064f2:	6048      	str	r0, [r1, #4]
 80064f4:	b108      	cbz	r0, 80064fa <__lshift+0x72>
 80064f6:	f109 0502 	add.w	r5, r9, #2
 80064fa:	3d01      	subs	r5, #1
 80064fc:	4638      	mov	r0, r7
 80064fe:	f8c8 5010 	str.w	r5, [r8, #16]
 8006502:	4621      	mov	r1, r4
 8006504:	f7ff fe33 	bl	800616e <_Bfree>
 8006508:	4640      	mov	r0, r8
 800650a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800650e:	3101      	adds	r1, #1
 8006510:	005b      	lsls	r3, r3, #1
 8006512:	e7c7      	b.n	80064a4 <__lshift+0x1c>
 8006514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006518:	3301      	adds	r3, #1
 800651a:	e7cd      	b.n	80064b8 <__lshift+0x30>
 800651c:	4651      	mov	r1, sl
 800651e:	e7dc      	b.n	80064da <__lshift+0x52>
 8006520:	3904      	subs	r1, #4
 8006522:	f853 2b04 	ldr.w	r2, [r3], #4
 8006526:	f841 2f04 	str.w	r2, [r1, #4]!
 800652a:	459c      	cmp	ip, r3
 800652c:	d8f9      	bhi.n	8006522 <__lshift+0x9a>
 800652e:	e7e4      	b.n	80064fa <__lshift+0x72>

08006530 <__mcmp>:
 8006530:	6903      	ldr	r3, [r0, #16]
 8006532:	690a      	ldr	r2, [r1, #16]
 8006534:	1a9b      	subs	r3, r3, r2
 8006536:	b530      	push	{r4, r5, lr}
 8006538:	d10c      	bne.n	8006554 <__mcmp+0x24>
 800653a:	0092      	lsls	r2, r2, #2
 800653c:	3014      	adds	r0, #20
 800653e:	3114      	adds	r1, #20
 8006540:	1884      	adds	r4, r0, r2
 8006542:	4411      	add	r1, r2
 8006544:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006548:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800654c:	4295      	cmp	r5, r2
 800654e:	d003      	beq.n	8006558 <__mcmp+0x28>
 8006550:	d305      	bcc.n	800655e <__mcmp+0x2e>
 8006552:	2301      	movs	r3, #1
 8006554:	4618      	mov	r0, r3
 8006556:	bd30      	pop	{r4, r5, pc}
 8006558:	42a0      	cmp	r0, r4
 800655a:	d3f3      	bcc.n	8006544 <__mcmp+0x14>
 800655c:	e7fa      	b.n	8006554 <__mcmp+0x24>
 800655e:	f04f 33ff 	mov.w	r3, #4294967295
 8006562:	e7f7      	b.n	8006554 <__mcmp+0x24>

08006564 <__mdiff>:
 8006564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006568:	460d      	mov	r5, r1
 800656a:	4607      	mov	r7, r0
 800656c:	4611      	mov	r1, r2
 800656e:	4628      	mov	r0, r5
 8006570:	4614      	mov	r4, r2
 8006572:	f7ff ffdd 	bl	8006530 <__mcmp>
 8006576:	1e06      	subs	r6, r0, #0
 8006578:	d108      	bne.n	800658c <__mdiff+0x28>
 800657a:	4631      	mov	r1, r6
 800657c:	4638      	mov	r0, r7
 800657e:	f7ff fdc2 	bl	8006106 <_Balloc>
 8006582:	2301      	movs	r3, #1
 8006584:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800658c:	bfa4      	itt	ge
 800658e:	4623      	movge	r3, r4
 8006590:	462c      	movge	r4, r5
 8006592:	4638      	mov	r0, r7
 8006594:	6861      	ldr	r1, [r4, #4]
 8006596:	bfa6      	itte	ge
 8006598:	461d      	movge	r5, r3
 800659a:	2600      	movge	r6, #0
 800659c:	2601      	movlt	r6, #1
 800659e:	f7ff fdb2 	bl	8006106 <_Balloc>
 80065a2:	692b      	ldr	r3, [r5, #16]
 80065a4:	60c6      	str	r6, [r0, #12]
 80065a6:	6926      	ldr	r6, [r4, #16]
 80065a8:	f105 0914 	add.w	r9, r5, #20
 80065ac:	f104 0214 	add.w	r2, r4, #20
 80065b0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80065b4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80065b8:	f100 0514 	add.w	r5, r0, #20
 80065bc:	f04f 0e00 	mov.w	lr, #0
 80065c0:	f852 ab04 	ldr.w	sl, [r2], #4
 80065c4:	f859 4b04 	ldr.w	r4, [r9], #4
 80065c8:	fa1e f18a 	uxtah	r1, lr, sl
 80065cc:	b2a3      	uxth	r3, r4
 80065ce:	1ac9      	subs	r1, r1, r3
 80065d0:	0c23      	lsrs	r3, r4, #16
 80065d2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80065d6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80065da:	b289      	uxth	r1, r1
 80065dc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80065e0:	45c8      	cmp	r8, r9
 80065e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80065e6:	4694      	mov	ip, r2
 80065e8:	f845 3b04 	str.w	r3, [r5], #4
 80065ec:	d8e8      	bhi.n	80065c0 <__mdiff+0x5c>
 80065ee:	45bc      	cmp	ip, r7
 80065f0:	d304      	bcc.n	80065fc <__mdiff+0x98>
 80065f2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80065f6:	b183      	cbz	r3, 800661a <__mdiff+0xb6>
 80065f8:	6106      	str	r6, [r0, #16]
 80065fa:	e7c5      	b.n	8006588 <__mdiff+0x24>
 80065fc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006600:	fa1e f381 	uxtah	r3, lr, r1
 8006604:	141a      	asrs	r2, r3, #16
 8006606:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800660a:	b29b      	uxth	r3, r3
 800660c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006610:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006614:	f845 3b04 	str.w	r3, [r5], #4
 8006618:	e7e9      	b.n	80065ee <__mdiff+0x8a>
 800661a:	3e01      	subs	r6, #1
 800661c:	e7e9      	b.n	80065f2 <__mdiff+0x8e>

0800661e <__d2b>:
 800661e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006622:	460e      	mov	r6, r1
 8006624:	2101      	movs	r1, #1
 8006626:	ec59 8b10 	vmov	r8, r9, d0
 800662a:	4615      	mov	r5, r2
 800662c:	f7ff fd6b 	bl	8006106 <_Balloc>
 8006630:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006634:	4607      	mov	r7, r0
 8006636:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800663a:	bb34      	cbnz	r4, 800668a <__d2b+0x6c>
 800663c:	9301      	str	r3, [sp, #4]
 800663e:	f1b8 0300 	subs.w	r3, r8, #0
 8006642:	d027      	beq.n	8006694 <__d2b+0x76>
 8006644:	a802      	add	r0, sp, #8
 8006646:	f840 3d08 	str.w	r3, [r0, #-8]!
 800664a:	f7ff fe01 	bl	8006250 <__lo0bits>
 800664e:	9900      	ldr	r1, [sp, #0]
 8006650:	b1f0      	cbz	r0, 8006690 <__d2b+0x72>
 8006652:	9a01      	ldr	r2, [sp, #4]
 8006654:	f1c0 0320 	rsb	r3, r0, #32
 8006658:	fa02 f303 	lsl.w	r3, r2, r3
 800665c:	430b      	orrs	r3, r1
 800665e:	40c2      	lsrs	r2, r0
 8006660:	617b      	str	r3, [r7, #20]
 8006662:	9201      	str	r2, [sp, #4]
 8006664:	9b01      	ldr	r3, [sp, #4]
 8006666:	61bb      	str	r3, [r7, #24]
 8006668:	2b00      	cmp	r3, #0
 800666a:	bf14      	ite	ne
 800666c:	2102      	movne	r1, #2
 800666e:	2101      	moveq	r1, #1
 8006670:	6139      	str	r1, [r7, #16]
 8006672:	b1c4      	cbz	r4, 80066a6 <__d2b+0x88>
 8006674:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006678:	4404      	add	r4, r0
 800667a:	6034      	str	r4, [r6, #0]
 800667c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006680:	6028      	str	r0, [r5, #0]
 8006682:	4638      	mov	r0, r7
 8006684:	b003      	add	sp, #12
 8006686:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800668a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800668e:	e7d5      	b.n	800663c <__d2b+0x1e>
 8006690:	6179      	str	r1, [r7, #20]
 8006692:	e7e7      	b.n	8006664 <__d2b+0x46>
 8006694:	a801      	add	r0, sp, #4
 8006696:	f7ff fddb 	bl	8006250 <__lo0bits>
 800669a:	9b01      	ldr	r3, [sp, #4]
 800669c:	617b      	str	r3, [r7, #20]
 800669e:	2101      	movs	r1, #1
 80066a0:	6139      	str	r1, [r7, #16]
 80066a2:	3020      	adds	r0, #32
 80066a4:	e7e5      	b.n	8006672 <__d2b+0x54>
 80066a6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80066aa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80066ae:	6030      	str	r0, [r6, #0]
 80066b0:	6918      	ldr	r0, [r3, #16]
 80066b2:	f7ff fdae 	bl	8006212 <__hi0bits>
 80066b6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80066ba:	e7e1      	b.n	8006680 <__d2b+0x62>

080066bc <_calloc_r>:
 80066bc:	b538      	push	{r3, r4, r5, lr}
 80066be:	fb02 f401 	mul.w	r4, r2, r1
 80066c2:	4621      	mov	r1, r4
 80066c4:	f000 f856 	bl	8006774 <_malloc_r>
 80066c8:	4605      	mov	r5, r0
 80066ca:	b118      	cbz	r0, 80066d4 <_calloc_r+0x18>
 80066cc:	4622      	mov	r2, r4
 80066ce:	2100      	movs	r1, #0
 80066d0:	f7fd ff34 	bl	800453c <memset>
 80066d4:	4628      	mov	r0, r5
 80066d6:	bd38      	pop	{r3, r4, r5, pc}

080066d8 <_free_r>:
 80066d8:	b538      	push	{r3, r4, r5, lr}
 80066da:	4605      	mov	r5, r0
 80066dc:	2900      	cmp	r1, #0
 80066de:	d045      	beq.n	800676c <_free_r+0x94>
 80066e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066e4:	1f0c      	subs	r4, r1, #4
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	bfb8      	it	lt
 80066ea:	18e4      	addlt	r4, r4, r3
 80066ec:	f000 fa98 	bl	8006c20 <__malloc_lock>
 80066f0:	4a1f      	ldr	r2, [pc, #124]	; (8006770 <_free_r+0x98>)
 80066f2:	6813      	ldr	r3, [r2, #0]
 80066f4:	4610      	mov	r0, r2
 80066f6:	b933      	cbnz	r3, 8006706 <_free_r+0x2e>
 80066f8:	6063      	str	r3, [r4, #4]
 80066fa:	6014      	str	r4, [r2, #0]
 80066fc:	4628      	mov	r0, r5
 80066fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006702:	f000 ba8e 	b.w	8006c22 <__malloc_unlock>
 8006706:	42a3      	cmp	r3, r4
 8006708:	d90c      	bls.n	8006724 <_free_r+0x4c>
 800670a:	6821      	ldr	r1, [r4, #0]
 800670c:	1862      	adds	r2, r4, r1
 800670e:	4293      	cmp	r3, r2
 8006710:	bf04      	itt	eq
 8006712:	681a      	ldreq	r2, [r3, #0]
 8006714:	685b      	ldreq	r3, [r3, #4]
 8006716:	6063      	str	r3, [r4, #4]
 8006718:	bf04      	itt	eq
 800671a:	1852      	addeq	r2, r2, r1
 800671c:	6022      	streq	r2, [r4, #0]
 800671e:	6004      	str	r4, [r0, #0]
 8006720:	e7ec      	b.n	80066fc <_free_r+0x24>
 8006722:	4613      	mov	r3, r2
 8006724:	685a      	ldr	r2, [r3, #4]
 8006726:	b10a      	cbz	r2, 800672c <_free_r+0x54>
 8006728:	42a2      	cmp	r2, r4
 800672a:	d9fa      	bls.n	8006722 <_free_r+0x4a>
 800672c:	6819      	ldr	r1, [r3, #0]
 800672e:	1858      	adds	r0, r3, r1
 8006730:	42a0      	cmp	r0, r4
 8006732:	d10b      	bne.n	800674c <_free_r+0x74>
 8006734:	6820      	ldr	r0, [r4, #0]
 8006736:	4401      	add	r1, r0
 8006738:	1858      	adds	r0, r3, r1
 800673a:	4282      	cmp	r2, r0
 800673c:	6019      	str	r1, [r3, #0]
 800673e:	d1dd      	bne.n	80066fc <_free_r+0x24>
 8006740:	6810      	ldr	r0, [r2, #0]
 8006742:	6852      	ldr	r2, [r2, #4]
 8006744:	605a      	str	r2, [r3, #4]
 8006746:	4401      	add	r1, r0
 8006748:	6019      	str	r1, [r3, #0]
 800674a:	e7d7      	b.n	80066fc <_free_r+0x24>
 800674c:	d902      	bls.n	8006754 <_free_r+0x7c>
 800674e:	230c      	movs	r3, #12
 8006750:	602b      	str	r3, [r5, #0]
 8006752:	e7d3      	b.n	80066fc <_free_r+0x24>
 8006754:	6820      	ldr	r0, [r4, #0]
 8006756:	1821      	adds	r1, r4, r0
 8006758:	428a      	cmp	r2, r1
 800675a:	bf04      	itt	eq
 800675c:	6811      	ldreq	r1, [r2, #0]
 800675e:	6852      	ldreq	r2, [r2, #4]
 8006760:	6062      	str	r2, [r4, #4]
 8006762:	bf04      	itt	eq
 8006764:	1809      	addeq	r1, r1, r0
 8006766:	6021      	streq	r1, [r4, #0]
 8006768:	605c      	str	r4, [r3, #4]
 800676a:	e7c7      	b.n	80066fc <_free_r+0x24>
 800676c:	bd38      	pop	{r3, r4, r5, pc}
 800676e:	bf00      	nop
 8006770:	20000204 	.word	0x20000204

08006774 <_malloc_r>:
 8006774:	b570      	push	{r4, r5, r6, lr}
 8006776:	1ccd      	adds	r5, r1, #3
 8006778:	f025 0503 	bic.w	r5, r5, #3
 800677c:	3508      	adds	r5, #8
 800677e:	2d0c      	cmp	r5, #12
 8006780:	bf38      	it	cc
 8006782:	250c      	movcc	r5, #12
 8006784:	2d00      	cmp	r5, #0
 8006786:	4606      	mov	r6, r0
 8006788:	db01      	blt.n	800678e <_malloc_r+0x1a>
 800678a:	42a9      	cmp	r1, r5
 800678c:	d903      	bls.n	8006796 <_malloc_r+0x22>
 800678e:	230c      	movs	r3, #12
 8006790:	6033      	str	r3, [r6, #0]
 8006792:	2000      	movs	r0, #0
 8006794:	bd70      	pop	{r4, r5, r6, pc}
 8006796:	f000 fa43 	bl	8006c20 <__malloc_lock>
 800679a:	4a21      	ldr	r2, [pc, #132]	; (8006820 <_malloc_r+0xac>)
 800679c:	6814      	ldr	r4, [r2, #0]
 800679e:	4621      	mov	r1, r4
 80067a0:	b991      	cbnz	r1, 80067c8 <_malloc_r+0x54>
 80067a2:	4c20      	ldr	r4, [pc, #128]	; (8006824 <_malloc_r+0xb0>)
 80067a4:	6823      	ldr	r3, [r4, #0]
 80067a6:	b91b      	cbnz	r3, 80067b0 <_malloc_r+0x3c>
 80067a8:	4630      	mov	r0, r6
 80067aa:	f000 f97d 	bl	8006aa8 <_sbrk_r>
 80067ae:	6020      	str	r0, [r4, #0]
 80067b0:	4629      	mov	r1, r5
 80067b2:	4630      	mov	r0, r6
 80067b4:	f000 f978 	bl	8006aa8 <_sbrk_r>
 80067b8:	1c43      	adds	r3, r0, #1
 80067ba:	d124      	bne.n	8006806 <_malloc_r+0x92>
 80067bc:	230c      	movs	r3, #12
 80067be:	6033      	str	r3, [r6, #0]
 80067c0:	4630      	mov	r0, r6
 80067c2:	f000 fa2e 	bl	8006c22 <__malloc_unlock>
 80067c6:	e7e4      	b.n	8006792 <_malloc_r+0x1e>
 80067c8:	680b      	ldr	r3, [r1, #0]
 80067ca:	1b5b      	subs	r3, r3, r5
 80067cc:	d418      	bmi.n	8006800 <_malloc_r+0x8c>
 80067ce:	2b0b      	cmp	r3, #11
 80067d0:	d90f      	bls.n	80067f2 <_malloc_r+0x7e>
 80067d2:	600b      	str	r3, [r1, #0]
 80067d4:	50cd      	str	r5, [r1, r3]
 80067d6:	18cc      	adds	r4, r1, r3
 80067d8:	4630      	mov	r0, r6
 80067da:	f000 fa22 	bl	8006c22 <__malloc_unlock>
 80067de:	f104 000b 	add.w	r0, r4, #11
 80067e2:	1d23      	adds	r3, r4, #4
 80067e4:	f020 0007 	bic.w	r0, r0, #7
 80067e8:	1ac3      	subs	r3, r0, r3
 80067ea:	d0d3      	beq.n	8006794 <_malloc_r+0x20>
 80067ec:	425a      	negs	r2, r3
 80067ee:	50e2      	str	r2, [r4, r3]
 80067f0:	e7d0      	b.n	8006794 <_malloc_r+0x20>
 80067f2:	428c      	cmp	r4, r1
 80067f4:	684b      	ldr	r3, [r1, #4]
 80067f6:	bf16      	itet	ne
 80067f8:	6063      	strne	r3, [r4, #4]
 80067fa:	6013      	streq	r3, [r2, #0]
 80067fc:	460c      	movne	r4, r1
 80067fe:	e7eb      	b.n	80067d8 <_malloc_r+0x64>
 8006800:	460c      	mov	r4, r1
 8006802:	6849      	ldr	r1, [r1, #4]
 8006804:	e7cc      	b.n	80067a0 <_malloc_r+0x2c>
 8006806:	1cc4      	adds	r4, r0, #3
 8006808:	f024 0403 	bic.w	r4, r4, #3
 800680c:	42a0      	cmp	r0, r4
 800680e:	d005      	beq.n	800681c <_malloc_r+0xa8>
 8006810:	1a21      	subs	r1, r4, r0
 8006812:	4630      	mov	r0, r6
 8006814:	f000 f948 	bl	8006aa8 <_sbrk_r>
 8006818:	3001      	adds	r0, #1
 800681a:	d0cf      	beq.n	80067bc <_malloc_r+0x48>
 800681c:	6025      	str	r5, [r4, #0]
 800681e:	e7db      	b.n	80067d8 <_malloc_r+0x64>
 8006820:	20000204 	.word	0x20000204
 8006824:	20000208 	.word	0x20000208

08006828 <__sfputc_r>:
 8006828:	6893      	ldr	r3, [r2, #8]
 800682a:	3b01      	subs	r3, #1
 800682c:	2b00      	cmp	r3, #0
 800682e:	b410      	push	{r4}
 8006830:	6093      	str	r3, [r2, #8]
 8006832:	da08      	bge.n	8006846 <__sfputc_r+0x1e>
 8006834:	6994      	ldr	r4, [r2, #24]
 8006836:	42a3      	cmp	r3, r4
 8006838:	db01      	blt.n	800683e <__sfputc_r+0x16>
 800683a:	290a      	cmp	r1, #10
 800683c:	d103      	bne.n	8006846 <__sfputc_r+0x1e>
 800683e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006842:	f7fe bb5b 	b.w	8004efc <__swbuf_r>
 8006846:	6813      	ldr	r3, [r2, #0]
 8006848:	1c58      	adds	r0, r3, #1
 800684a:	6010      	str	r0, [r2, #0]
 800684c:	7019      	strb	r1, [r3, #0]
 800684e:	4608      	mov	r0, r1
 8006850:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006854:	4770      	bx	lr

08006856 <__sfputs_r>:
 8006856:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006858:	4606      	mov	r6, r0
 800685a:	460f      	mov	r7, r1
 800685c:	4614      	mov	r4, r2
 800685e:	18d5      	adds	r5, r2, r3
 8006860:	42ac      	cmp	r4, r5
 8006862:	d101      	bne.n	8006868 <__sfputs_r+0x12>
 8006864:	2000      	movs	r0, #0
 8006866:	e007      	b.n	8006878 <__sfputs_r+0x22>
 8006868:	463a      	mov	r2, r7
 800686a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800686e:	4630      	mov	r0, r6
 8006870:	f7ff ffda 	bl	8006828 <__sfputc_r>
 8006874:	1c43      	adds	r3, r0, #1
 8006876:	d1f3      	bne.n	8006860 <__sfputs_r+0xa>
 8006878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800687c <_vfiprintf_r>:
 800687c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006880:	460c      	mov	r4, r1
 8006882:	b09d      	sub	sp, #116	; 0x74
 8006884:	4617      	mov	r7, r2
 8006886:	461d      	mov	r5, r3
 8006888:	4606      	mov	r6, r0
 800688a:	b118      	cbz	r0, 8006894 <_vfiprintf_r+0x18>
 800688c:	6983      	ldr	r3, [r0, #24]
 800688e:	b90b      	cbnz	r3, 8006894 <_vfiprintf_r+0x18>
 8006890:	f7ff fb2a 	bl	8005ee8 <__sinit>
 8006894:	4b7c      	ldr	r3, [pc, #496]	; (8006a88 <_vfiprintf_r+0x20c>)
 8006896:	429c      	cmp	r4, r3
 8006898:	d158      	bne.n	800694c <_vfiprintf_r+0xd0>
 800689a:	6874      	ldr	r4, [r6, #4]
 800689c:	89a3      	ldrh	r3, [r4, #12]
 800689e:	0718      	lsls	r0, r3, #28
 80068a0:	d55e      	bpl.n	8006960 <_vfiprintf_r+0xe4>
 80068a2:	6923      	ldr	r3, [r4, #16]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d05b      	beq.n	8006960 <_vfiprintf_r+0xe4>
 80068a8:	2300      	movs	r3, #0
 80068aa:	9309      	str	r3, [sp, #36]	; 0x24
 80068ac:	2320      	movs	r3, #32
 80068ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068b2:	2330      	movs	r3, #48	; 0x30
 80068b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068b8:	9503      	str	r5, [sp, #12]
 80068ba:	f04f 0b01 	mov.w	fp, #1
 80068be:	46b8      	mov	r8, r7
 80068c0:	4645      	mov	r5, r8
 80068c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80068c6:	b10b      	cbz	r3, 80068cc <_vfiprintf_r+0x50>
 80068c8:	2b25      	cmp	r3, #37	; 0x25
 80068ca:	d154      	bne.n	8006976 <_vfiprintf_r+0xfa>
 80068cc:	ebb8 0a07 	subs.w	sl, r8, r7
 80068d0:	d00b      	beq.n	80068ea <_vfiprintf_r+0x6e>
 80068d2:	4653      	mov	r3, sl
 80068d4:	463a      	mov	r2, r7
 80068d6:	4621      	mov	r1, r4
 80068d8:	4630      	mov	r0, r6
 80068da:	f7ff ffbc 	bl	8006856 <__sfputs_r>
 80068de:	3001      	adds	r0, #1
 80068e0:	f000 80c2 	beq.w	8006a68 <_vfiprintf_r+0x1ec>
 80068e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068e6:	4453      	add	r3, sl
 80068e8:	9309      	str	r3, [sp, #36]	; 0x24
 80068ea:	f898 3000 	ldrb.w	r3, [r8]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f000 80ba 	beq.w	8006a68 <_vfiprintf_r+0x1ec>
 80068f4:	2300      	movs	r3, #0
 80068f6:	f04f 32ff 	mov.w	r2, #4294967295
 80068fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068fe:	9304      	str	r3, [sp, #16]
 8006900:	9307      	str	r3, [sp, #28]
 8006902:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006906:	931a      	str	r3, [sp, #104]	; 0x68
 8006908:	46a8      	mov	r8, r5
 800690a:	2205      	movs	r2, #5
 800690c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006910:	485e      	ldr	r0, [pc, #376]	; (8006a8c <_vfiprintf_r+0x210>)
 8006912:	f7f9 fc65 	bl	80001e0 <memchr>
 8006916:	9b04      	ldr	r3, [sp, #16]
 8006918:	bb78      	cbnz	r0, 800697a <_vfiprintf_r+0xfe>
 800691a:	06d9      	lsls	r1, r3, #27
 800691c:	bf44      	itt	mi
 800691e:	2220      	movmi	r2, #32
 8006920:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006924:	071a      	lsls	r2, r3, #28
 8006926:	bf44      	itt	mi
 8006928:	222b      	movmi	r2, #43	; 0x2b
 800692a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800692e:	782a      	ldrb	r2, [r5, #0]
 8006930:	2a2a      	cmp	r2, #42	; 0x2a
 8006932:	d02a      	beq.n	800698a <_vfiprintf_r+0x10e>
 8006934:	9a07      	ldr	r2, [sp, #28]
 8006936:	46a8      	mov	r8, r5
 8006938:	2000      	movs	r0, #0
 800693a:	250a      	movs	r5, #10
 800693c:	4641      	mov	r1, r8
 800693e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006942:	3b30      	subs	r3, #48	; 0x30
 8006944:	2b09      	cmp	r3, #9
 8006946:	d969      	bls.n	8006a1c <_vfiprintf_r+0x1a0>
 8006948:	b360      	cbz	r0, 80069a4 <_vfiprintf_r+0x128>
 800694a:	e024      	b.n	8006996 <_vfiprintf_r+0x11a>
 800694c:	4b50      	ldr	r3, [pc, #320]	; (8006a90 <_vfiprintf_r+0x214>)
 800694e:	429c      	cmp	r4, r3
 8006950:	d101      	bne.n	8006956 <_vfiprintf_r+0xda>
 8006952:	68b4      	ldr	r4, [r6, #8]
 8006954:	e7a2      	b.n	800689c <_vfiprintf_r+0x20>
 8006956:	4b4f      	ldr	r3, [pc, #316]	; (8006a94 <_vfiprintf_r+0x218>)
 8006958:	429c      	cmp	r4, r3
 800695a:	bf08      	it	eq
 800695c:	68f4      	ldreq	r4, [r6, #12]
 800695e:	e79d      	b.n	800689c <_vfiprintf_r+0x20>
 8006960:	4621      	mov	r1, r4
 8006962:	4630      	mov	r0, r6
 8006964:	f7fe fb1c 	bl	8004fa0 <__swsetup_r>
 8006968:	2800      	cmp	r0, #0
 800696a:	d09d      	beq.n	80068a8 <_vfiprintf_r+0x2c>
 800696c:	f04f 30ff 	mov.w	r0, #4294967295
 8006970:	b01d      	add	sp, #116	; 0x74
 8006972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006976:	46a8      	mov	r8, r5
 8006978:	e7a2      	b.n	80068c0 <_vfiprintf_r+0x44>
 800697a:	4a44      	ldr	r2, [pc, #272]	; (8006a8c <_vfiprintf_r+0x210>)
 800697c:	1a80      	subs	r0, r0, r2
 800697e:	fa0b f000 	lsl.w	r0, fp, r0
 8006982:	4318      	orrs	r0, r3
 8006984:	9004      	str	r0, [sp, #16]
 8006986:	4645      	mov	r5, r8
 8006988:	e7be      	b.n	8006908 <_vfiprintf_r+0x8c>
 800698a:	9a03      	ldr	r2, [sp, #12]
 800698c:	1d11      	adds	r1, r2, #4
 800698e:	6812      	ldr	r2, [r2, #0]
 8006990:	9103      	str	r1, [sp, #12]
 8006992:	2a00      	cmp	r2, #0
 8006994:	db01      	blt.n	800699a <_vfiprintf_r+0x11e>
 8006996:	9207      	str	r2, [sp, #28]
 8006998:	e004      	b.n	80069a4 <_vfiprintf_r+0x128>
 800699a:	4252      	negs	r2, r2
 800699c:	f043 0302 	orr.w	r3, r3, #2
 80069a0:	9207      	str	r2, [sp, #28]
 80069a2:	9304      	str	r3, [sp, #16]
 80069a4:	f898 3000 	ldrb.w	r3, [r8]
 80069a8:	2b2e      	cmp	r3, #46	; 0x2e
 80069aa:	d10e      	bne.n	80069ca <_vfiprintf_r+0x14e>
 80069ac:	f898 3001 	ldrb.w	r3, [r8, #1]
 80069b0:	2b2a      	cmp	r3, #42	; 0x2a
 80069b2:	d138      	bne.n	8006a26 <_vfiprintf_r+0x1aa>
 80069b4:	9b03      	ldr	r3, [sp, #12]
 80069b6:	1d1a      	adds	r2, r3, #4
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	9203      	str	r2, [sp, #12]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	bfb8      	it	lt
 80069c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80069c4:	f108 0802 	add.w	r8, r8, #2
 80069c8:	9305      	str	r3, [sp, #20]
 80069ca:	4d33      	ldr	r5, [pc, #204]	; (8006a98 <_vfiprintf_r+0x21c>)
 80069cc:	f898 1000 	ldrb.w	r1, [r8]
 80069d0:	2203      	movs	r2, #3
 80069d2:	4628      	mov	r0, r5
 80069d4:	f7f9 fc04 	bl	80001e0 <memchr>
 80069d8:	b140      	cbz	r0, 80069ec <_vfiprintf_r+0x170>
 80069da:	2340      	movs	r3, #64	; 0x40
 80069dc:	1b40      	subs	r0, r0, r5
 80069de:	fa03 f000 	lsl.w	r0, r3, r0
 80069e2:	9b04      	ldr	r3, [sp, #16]
 80069e4:	4303      	orrs	r3, r0
 80069e6:	f108 0801 	add.w	r8, r8, #1
 80069ea:	9304      	str	r3, [sp, #16]
 80069ec:	f898 1000 	ldrb.w	r1, [r8]
 80069f0:	482a      	ldr	r0, [pc, #168]	; (8006a9c <_vfiprintf_r+0x220>)
 80069f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069f6:	2206      	movs	r2, #6
 80069f8:	f108 0701 	add.w	r7, r8, #1
 80069fc:	f7f9 fbf0 	bl	80001e0 <memchr>
 8006a00:	2800      	cmp	r0, #0
 8006a02:	d037      	beq.n	8006a74 <_vfiprintf_r+0x1f8>
 8006a04:	4b26      	ldr	r3, [pc, #152]	; (8006aa0 <_vfiprintf_r+0x224>)
 8006a06:	bb1b      	cbnz	r3, 8006a50 <_vfiprintf_r+0x1d4>
 8006a08:	9b03      	ldr	r3, [sp, #12]
 8006a0a:	3307      	adds	r3, #7
 8006a0c:	f023 0307 	bic.w	r3, r3, #7
 8006a10:	3308      	adds	r3, #8
 8006a12:	9303      	str	r3, [sp, #12]
 8006a14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a16:	444b      	add	r3, r9
 8006a18:	9309      	str	r3, [sp, #36]	; 0x24
 8006a1a:	e750      	b.n	80068be <_vfiprintf_r+0x42>
 8006a1c:	fb05 3202 	mla	r2, r5, r2, r3
 8006a20:	2001      	movs	r0, #1
 8006a22:	4688      	mov	r8, r1
 8006a24:	e78a      	b.n	800693c <_vfiprintf_r+0xc0>
 8006a26:	2300      	movs	r3, #0
 8006a28:	f108 0801 	add.w	r8, r8, #1
 8006a2c:	9305      	str	r3, [sp, #20]
 8006a2e:	4619      	mov	r1, r3
 8006a30:	250a      	movs	r5, #10
 8006a32:	4640      	mov	r0, r8
 8006a34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a38:	3a30      	subs	r2, #48	; 0x30
 8006a3a:	2a09      	cmp	r2, #9
 8006a3c:	d903      	bls.n	8006a46 <_vfiprintf_r+0x1ca>
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d0c3      	beq.n	80069ca <_vfiprintf_r+0x14e>
 8006a42:	9105      	str	r1, [sp, #20]
 8006a44:	e7c1      	b.n	80069ca <_vfiprintf_r+0x14e>
 8006a46:	fb05 2101 	mla	r1, r5, r1, r2
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	4680      	mov	r8, r0
 8006a4e:	e7f0      	b.n	8006a32 <_vfiprintf_r+0x1b6>
 8006a50:	ab03      	add	r3, sp, #12
 8006a52:	9300      	str	r3, [sp, #0]
 8006a54:	4622      	mov	r2, r4
 8006a56:	4b13      	ldr	r3, [pc, #76]	; (8006aa4 <_vfiprintf_r+0x228>)
 8006a58:	a904      	add	r1, sp, #16
 8006a5a:	4630      	mov	r0, r6
 8006a5c:	f7fd fe0a 	bl	8004674 <_printf_float>
 8006a60:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006a64:	4681      	mov	r9, r0
 8006a66:	d1d5      	bne.n	8006a14 <_vfiprintf_r+0x198>
 8006a68:	89a3      	ldrh	r3, [r4, #12]
 8006a6a:	065b      	lsls	r3, r3, #25
 8006a6c:	f53f af7e 	bmi.w	800696c <_vfiprintf_r+0xf0>
 8006a70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a72:	e77d      	b.n	8006970 <_vfiprintf_r+0xf4>
 8006a74:	ab03      	add	r3, sp, #12
 8006a76:	9300      	str	r3, [sp, #0]
 8006a78:	4622      	mov	r2, r4
 8006a7a:	4b0a      	ldr	r3, [pc, #40]	; (8006aa4 <_vfiprintf_r+0x228>)
 8006a7c:	a904      	add	r1, sp, #16
 8006a7e:	4630      	mov	r0, r6
 8006a80:	f7fe f8ae 	bl	8004be0 <_printf_i>
 8006a84:	e7ec      	b.n	8006a60 <_vfiprintf_r+0x1e4>
 8006a86:	bf00      	nop
 8006a88:	08006e30 	.word	0x08006e30
 8006a8c:	08006f6c 	.word	0x08006f6c
 8006a90:	08006e50 	.word	0x08006e50
 8006a94:	08006e10 	.word	0x08006e10
 8006a98:	08006f72 	.word	0x08006f72
 8006a9c:	08006f76 	.word	0x08006f76
 8006aa0:	08004675 	.word	0x08004675
 8006aa4:	08006857 	.word	0x08006857

08006aa8 <_sbrk_r>:
 8006aa8:	b538      	push	{r3, r4, r5, lr}
 8006aaa:	4c06      	ldr	r4, [pc, #24]	; (8006ac4 <_sbrk_r+0x1c>)
 8006aac:	2300      	movs	r3, #0
 8006aae:	4605      	mov	r5, r0
 8006ab0:	4608      	mov	r0, r1
 8006ab2:	6023      	str	r3, [r4, #0]
 8006ab4:	f7fb fbe6 	bl	8002284 <_sbrk>
 8006ab8:	1c43      	adds	r3, r0, #1
 8006aba:	d102      	bne.n	8006ac2 <_sbrk_r+0x1a>
 8006abc:	6823      	ldr	r3, [r4, #0]
 8006abe:	b103      	cbz	r3, 8006ac2 <_sbrk_r+0x1a>
 8006ac0:	602b      	str	r3, [r5, #0]
 8006ac2:	bd38      	pop	{r3, r4, r5, pc}
 8006ac4:	2000032c 	.word	0x2000032c

08006ac8 <__sread>:
 8006ac8:	b510      	push	{r4, lr}
 8006aca:	460c      	mov	r4, r1
 8006acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ad0:	f000 f8a8 	bl	8006c24 <_read_r>
 8006ad4:	2800      	cmp	r0, #0
 8006ad6:	bfab      	itete	ge
 8006ad8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006ada:	89a3      	ldrhlt	r3, [r4, #12]
 8006adc:	181b      	addge	r3, r3, r0
 8006ade:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006ae2:	bfac      	ite	ge
 8006ae4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ae6:	81a3      	strhlt	r3, [r4, #12]
 8006ae8:	bd10      	pop	{r4, pc}

08006aea <__swrite>:
 8006aea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aee:	461f      	mov	r7, r3
 8006af0:	898b      	ldrh	r3, [r1, #12]
 8006af2:	05db      	lsls	r3, r3, #23
 8006af4:	4605      	mov	r5, r0
 8006af6:	460c      	mov	r4, r1
 8006af8:	4616      	mov	r6, r2
 8006afa:	d505      	bpl.n	8006b08 <__swrite+0x1e>
 8006afc:	2302      	movs	r3, #2
 8006afe:	2200      	movs	r2, #0
 8006b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b04:	f000 f868 	bl	8006bd8 <_lseek_r>
 8006b08:	89a3      	ldrh	r3, [r4, #12]
 8006b0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b12:	81a3      	strh	r3, [r4, #12]
 8006b14:	4632      	mov	r2, r6
 8006b16:	463b      	mov	r3, r7
 8006b18:	4628      	mov	r0, r5
 8006b1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b1e:	f000 b817 	b.w	8006b50 <_write_r>

08006b22 <__sseek>:
 8006b22:	b510      	push	{r4, lr}
 8006b24:	460c      	mov	r4, r1
 8006b26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b2a:	f000 f855 	bl	8006bd8 <_lseek_r>
 8006b2e:	1c43      	adds	r3, r0, #1
 8006b30:	89a3      	ldrh	r3, [r4, #12]
 8006b32:	bf15      	itete	ne
 8006b34:	6560      	strne	r0, [r4, #84]	; 0x54
 8006b36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006b3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006b3e:	81a3      	strheq	r3, [r4, #12]
 8006b40:	bf18      	it	ne
 8006b42:	81a3      	strhne	r3, [r4, #12]
 8006b44:	bd10      	pop	{r4, pc}

08006b46 <__sclose>:
 8006b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b4a:	f000 b813 	b.w	8006b74 <_close_r>
	...

08006b50 <_write_r>:
 8006b50:	b538      	push	{r3, r4, r5, lr}
 8006b52:	4c07      	ldr	r4, [pc, #28]	; (8006b70 <_write_r+0x20>)
 8006b54:	4605      	mov	r5, r0
 8006b56:	4608      	mov	r0, r1
 8006b58:	4611      	mov	r1, r2
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	6022      	str	r2, [r4, #0]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	f7fb f876 	bl	8001c50 <_write>
 8006b64:	1c43      	adds	r3, r0, #1
 8006b66:	d102      	bne.n	8006b6e <_write_r+0x1e>
 8006b68:	6823      	ldr	r3, [r4, #0]
 8006b6a:	b103      	cbz	r3, 8006b6e <_write_r+0x1e>
 8006b6c:	602b      	str	r3, [r5, #0]
 8006b6e:	bd38      	pop	{r3, r4, r5, pc}
 8006b70:	2000032c 	.word	0x2000032c

08006b74 <_close_r>:
 8006b74:	b538      	push	{r3, r4, r5, lr}
 8006b76:	4c06      	ldr	r4, [pc, #24]	; (8006b90 <_close_r+0x1c>)
 8006b78:	2300      	movs	r3, #0
 8006b7a:	4605      	mov	r5, r0
 8006b7c:	4608      	mov	r0, r1
 8006b7e:	6023      	str	r3, [r4, #0]
 8006b80:	f7fb fb4b 	bl	800221a <_close>
 8006b84:	1c43      	adds	r3, r0, #1
 8006b86:	d102      	bne.n	8006b8e <_close_r+0x1a>
 8006b88:	6823      	ldr	r3, [r4, #0]
 8006b8a:	b103      	cbz	r3, 8006b8e <_close_r+0x1a>
 8006b8c:	602b      	str	r3, [r5, #0]
 8006b8e:	bd38      	pop	{r3, r4, r5, pc}
 8006b90:	2000032c 	.word	0x2000032c

08006b94 <_fstat_r>:
 8006b94:	b538      	push	{r3, r4, r5, lr}
 8006b96:	4c07      	ldr	r4, [pc, #28]	; (8006bb4 <_fstat_r+0x20>)
 8006b98:	2300      	movs	r3, #0
 8006b9a:	4605      	mov	r5, r0
 8006b9c:	4608      	mov	r0, r1
 8006b9e:	4611      	mov	r1, r2
 8006ba0:	6023      	str	r3, [r4, #0]
 8006ba2:	f7fb fb46 	bl	8002232 <_fstat>
 8006ba6:	1c43      	adds	r3, r0, #1
 8006ba8:	d102      	bne.n	8006bb0 <_fstat_r+0x1c>
 8006baa:	6823      	ldr	r3, [r4, #0]
 8006bac:	b103      	cbz	r3, 8006bb0 <_fstat_r+0x1c>
 8006bae:	602b      	str	r3, [r5, #0]
 8006bb0:	bd38      	pop	{r3, r4, r5, pc}
 8006bb2:	bf00      	nop
 8006bb4:	2000032c 	.word	0x2000032c

08006bb8 <_isatty_r>:
 8006bb8:	b538      	push	{r3, r4, r5, lr}
 8006bba:	4c06      	ldr	r4, [pc, #24]	; (8006bd4 <_isatty_r+0x1c>)
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	4605      	mov	r5, r0
 8006bc0:	4608      	mov	r0, r1
 8006bc2:	6023      	str	r3, [r4, #0]
 8006bc4:	f7fb fb45 	bl	8002252 <_isatty>
 8006bc8:	1c43      	adds	r3, r0, #1
 8006bca:	d102      	bne.n	8006bd2 <_isatty_r+0x1a>
 8006bcc:	6823      	ldr	r3, [r4, #0]
 8006bce:	b103      	cbz	r3, 8006bd2 <_isatty_r+0x1a>
 8006bd0:	602b      	str	r3, [r5, #0]
 8006bd2:	bd38      	pop	{r3, r4, r5, pc}
 8006bd4:	2000032c 	.word	0x2000032c

08006bd8 <_lseek_r>:
 8006bd8:	b538      	push	{r3, r4, r5, lr}
 8006bda:	4c07      	ldr	r4, [pc, #28]	; (8006bf8 <_lseek_r+0x20>)
 8006bdc:	4605      	mov	r5, r0
 8006bde:	4608      	mov	r0, r1
 8006be0:	4611      	mov	r1, r2
 8006be2:	2200      	movs	r2, #0
 8006be4:	6022      	str	r2, [r4, #0]
 8006be6:	461a      	mov	r2, r3
 8006be8:	f7fb fb3e 	bl	8002268 <_lseek>
 8006bec:	1c43      	adds	r3, r0, #1
 8006bee:	d102      	bne.n	8006bf6 <_lseek_r+0x1e>
 8006bf0:	6823      	ldr	r3, [r4, #0]
 8006bf2:	b103      	cbz	r3, 8006bf6 <_lseek_r+0x1e>
 8006bf4:	602b      	str	r3, [r5, #0]
 8006bf6:	bd38      	pop	{r3, r4, r5, pc}
 8006bf8:	2000032c 	.word	0x2000032c

08006bfc <__ascii_mbtowc>:
 8006bfc:	b082      	sub	sp, #8
 8006bfe:	b901      	cbnz	r1, 8006c02 <__ascii_mbtowc+0x6>
 8006c00:	a901      	add	r1, sp, #4
 8006c02:	b142      	cbz	r2, 8006c16 <__ascii_mbtowc+0x1a>
 8006c04:	b14b      	cbz	r3, 8006c1a <__ascii_mbtowc+0x1e>
 8006c06:	7813      	ldrb	r3, [r2, #0]
 8006c08:	600b      	str	r3, [r1, #0]
 8006c0a:	7812      	ldrb	r2, [r2, #0]
 8006c0c:	1c10      	adds	r0, r2, #0
 8006c0e:	bf18      	it	ne
 8006c10:	2001      	movne	r0, #1
 8006c12:	b002      	add	sp, #8
 8006c14:	4770      	bx	lr
 8006c16:	4610      	mov	r0, r2
 8006c18:	e7fb      	b.n	8006c12 <__ascii_mbtowc+0x16>
 8006c1a:	f06f 0001 	mvn.w	r0, #1
 8006c1e:	e7f8      	b.n	8006c12 <__ascii_mbtowc+0x16>

08006c20 <__malloc_lock>:
 8006c20:	4770      	bx	lr

08006c22 <__malloc_unlock>:
 8006c22:	4770      	bx	lr

08006c24 <_read_r>:
 8006c24:	b538      	push	{r3, r4, r5, lr}
 8006c26:	4c07      	ldr	r4, [pc, #28]	; (8006c44 <_read_r+0x20>)
 8006c28:	4605      	mov	r5, r0
 8006c2a:	4608      	mov	r0, r1
 8006c2c:	4611      	mov	r1, r2
 8006c2e:	2200      	movs	r2, #0
 8006c30:	6022      	str	r2, [r4, #0]
 8006c32:	461a      	mov	r2, r3
 8006c34:	f7fb fad4 	bl	80021e0 <_read>
 8006c38:	1c43      	adds	r3, r0, #1
 8006c3a:	d102      	bne.n	8006c42 <_read_r+0x1e>
 8006c3c:	6823      	ldr	r3, [r4, #0]
 8006c3e:	b103      	cbz	r3, 8006c42 <_read_r+0x1e>
 8006c40:	602b      	str	r3, [r5, #0]
 8006c42:	bd38      	pop	{r3, r4, r5, pc}
 8006c44:	2000032c 	.word	0x2000032c

08006c48 <__ascii_wctomb>:
 8006c48:	b149      	cbz	r1, 8006c5e <__ascii_wctomb+0x16>
 8006c4a:	2aff      	cmp	r2, #255	; 0xff
 8006c4c:	bf85      	ittet	hi
 8006c4e:	238a      	movhi	r3, #138	; 0x8a
 8006c50:	6003      	strhi	r3, [r0, #0]
 8006c52:	700a      	strbls	r2, [r1, #0]
 8006c54:	f04f 30ff 	movhi.w	r0, #4294967295
 8006c58:	bf98      	it	ls
 8006c5a:	2001      	movls	r0, #1
 8006c5c:	4770      	bx	lr
 8006c5e:	4608      	mov	r0, r1
 8006c60:	4770      	bx	lr
	...

08006c64 <_init>:
 8006c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c66:	bf00      	nop
 8006c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c6a:	bc08      	pop	{r3}
 8006c6c:	469e      	mov	lr, r3
 8006c6e:	4770      	bx	lr

08006c70 <_fini>:
 8006c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c72:	bf00      	nop
 8006c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c76:	bc08      	pop	{r3}
 8006c78:	469e      	mov	lr, r3
 8006c7a:	4770      	bx	lr
